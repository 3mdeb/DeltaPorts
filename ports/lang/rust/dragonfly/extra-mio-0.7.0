--- cargo-crates/mio-0.7.0/src/sys/unix/selector/kqueue.rs.orig	2020-02-10 11:24:38 UTC
+++ cargo-crates/mio-0.7.0/src/sys/unix/selector/kqueue.rs
@@ -19,7 +19,7 @@ type Count = libc::c_int;
 type Count = libc::size_t;
 
 // Type of the `filter` field in the `kevent` structure.
-#[cfg(any(target_os = "freebsd", target_os = "openbsd"))]
+#[cfg(any(target_os = "freebsd", target_os = "openbsd", target_os = "dragonfly"))]
 type Filter = libc::c_short;
 #[cfg(any(target_os = "macos", target_os = "ios"))]
 type Filter = i16;
@@ -27,7 +27,7 @@ type Filter = i16;
 type Filter = u32;
 
 // Type of the `flags` field in the `kevent` structure.
-#[cfg(any(target_os = "freebsd", target_os = "openbsd"))]
+#[cfg(any(target_os = "freebsd", target_os = "openbsd", target_os = "dragonfly"))]
 type Flags = libc::c_ushort;
 #[cfg(any(target_os = "macos", target_os = "ios"))]
 type Flags = u16;
@@ -209,7 +209,7 @@ impl Selector {
     }
 
     // Used by `Waker`.
-    #[cfg(any(target_os = "freebsd", target_os = "ios", target_os = "macos"))]
+    #[cfg(any(target_os = "freebsd", target_os = "ios", target_os = "macos", target_os = "dragonfly"))]
     pub fn setup_waker(&self, token: Token) -> io::Result<()> {
         // First attempt to accept user space notifications.
         let mut kevent = kevent!(
@@ -229,7 +229,7 @@ impl Selector {
     }
 
     // Used by `Waker`.
-    #[cfg(any(target_os = "freebsd", target_os = "ios", target_os = "macos"))]
+    #[cfg(any(target_os = "freebsd", target_os = "ios", target_os = "macos", target_os = "dragonfly"))]
     pub fn wake(&self, token: Token) -> io::Result<()> {
         let mut kevent = kevent!(
             0,
@@ -360,14 +360,14 @@ pub mod event {
 
     pub fn is_readable(event: &Event) -> bool {
         event.filter == libc::EVFILT_READ || {
-            #[cfg(any(target_os = "freebsd", target_os = "ios", target_os = "macos"))]
+            #[cfg(any(target_os = "freebsd", target_os = "ios", target_os = "macos", target_os = "dragonfly"))]
             // Used by the `Awakener`. On platforms that use `eventfd` or a unix
             // pipe it will emit a readable event so we'll fake that here as
             // well.
             {
                 event.filter == libc::EVFILT_USER
             }
-            #[cfg(not(any(target_os = "freebsd", target_os = "ios", target_os = "macos")))]
+            #[cfg(not(any(target_os = "freebsd", target_os = "ios", target_os = "macos", target_os = "dragonfly")))]
             {
                 false
             }
@@ -640,8 +640,6 @@ pub mod event {
             libc::NOTE_LEEWAY,
             #[cfg(any(target_os = "ios", target_os = "macos"))]
             libc::NOTE_CRITICAL,
-            #[cfg(any(target_os = "dragonfly"))]
-            libc::NOTE_BACKGROUND,
         );
 
         // Can't reference fields in packed structures.
