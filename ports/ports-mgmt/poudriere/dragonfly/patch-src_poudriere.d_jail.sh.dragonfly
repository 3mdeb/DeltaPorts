--- /dev/null	2012-11-19 07:55:21.370360877 +0100
+++ src/poudriere.d/jail.sh.dragonfly	2012-11-19 19:11:44.000000000 +0100
@@ -0,0 +1,215 @@
+#!/bin/sh
+#
+# DragonFly specific
+
+jail_runs() {
+	[ $# -ne 0 ] && eargs
+	local AWKCMD='{ if($2 == host) print $1 }'
+	jls | awk -v host="${JAILNAME}" "${AWKCMD}" > \
+	  /dev/null 2>&1 && return 1
+	return 0
+}
+
+update_jail() {
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	jail_runs && \
+		err 1 "Unable to remove jail ${JAILNAME}: it is running"
+
+	METHOD=`zget method`
+	if [ "${METHOD}" = "-" ]; then
+		METHOD="git"
+		zset method "${METHOD}"
+	fi
+	case ${METHOD} in
+	git)
+		install_from_git
+		umount ${JAILMNT}
+		zkill ${JAILFS}@clean
+		zsnap ${JAILFS}@clean
+		;;
+	*)
+		err 1 "Unsupported method"
+		;;
+	esac
+
+}
+
+build_and_install_world() {
+	local JLOGBASE=${POUDRIERE_DATA}/jailbuild/${JAILNAME}
+	local ncpus=$(/sbin/sysctl hw.ncpu | awk '{print $2}')
+	local factor=`expr ${ncpus} \* 2 - 1`
+	local options="-DNO_GCC47 -DNO_GAMES -DNOPROFILE -DNO_BINUTILS221"
+	mkdir -p ${JLOGBASE}
+
+	export TARGET_ARCH=${ARCH}
+	export __MAKE_CONF=/dev/null
+	export DESTDIR=${JAILMNT}
+
+	msg "${JAILNAME}: making buildworld"
+	cd ${JAILMNT}/usr/src && \
+	  make -j${factor} ${options} buildworld > \
+	  ${JLOGBASE}/build.log 2>&1 || err 1 "Fail to build world"
+
+	msg "${JAILNAME}: making installworld"
+	cd ${JAILMNT}/usr/src && make ${options} installworld > \
+	  ${JLOGBASE}/install.log 2>&1 || err 1 "Fail to install world"
+
+	msg "${JAILNAME}: making distribution"
+	cd ${JAILMNT}/usr/src/etc && make distribution > \
+	  ${JLOGBASE}/distrib.log 2>&1 || err 1 "Fail to make distribution"
+
+	# make upgrade required to link device drives (e.g. </dev/video/...)
+	msg "${JAILNAME}: making world upgrade"
+	cd ${JAILMNT}/usr/src && make upgrade > \
+	  ${JLOGBASE}/upgrade.log 2>&1 || err 1 "Fail to make world upgrade"
+
+	# get out of JAILMNT so we can unmount it if necessary
+	cd ${POUDRIERE_DATA}
+}
+
+convert_property_version () {
+	local GREPPAT='^[0-9]\.[0-9]+$'
+	local FILTER=`echo "${1}" | grep -E "${GREPPAT}"`
+	if [ -n "${FILTER}" ]; then
+	   echo RELEASE-${1}
+	else
+	   echo master
+	fi
+}
+
+convert_version () {
+	# $1 can be empty; "master" will be returned
+	local GREPPAT='^[0-9]\.[0-9]+$'
+	local FILTER=`echo "${1}" | grep -E "${GREPPAT}"`
+	if [ -n "${FILTER}" ]; then
+	   echo DragonFly_RELEASE_`echo ${FILTER} | sed 's|\.|_|'`
+	else
+	   echo master
+	fi
+}
+
+install_from_git() {
+	local UPDATE=0
+	local proto
+	local bver
+	local bverz
+	local mounted=$(check_mount "${JAILFS}")
+
+	[ -z ${mounted} ] && ${NULLMOUNT} "${JAILFS}" "${JAILMNT}"
+	[ -d ${JAILMNT}/usr/src ] && UPDATE=1
+	mkdir -p ${JAILMNT}/usr/src
+	cd ${JAILMNT}/usr/src
+	if [ ${UPDATE} -eq 0 ]; then
+		msg "Checking out the sources via git..."
+		bver=$(convert_version ${VERSION})
+		git init
+		git remote add origin git://${GIT_HOST}/dragonfly.git
+		git fetch --depth=1 origin
+		git branch ${bver} origin/${bver}
+		git checkout ${bver}
+		git pull || err 1 "Fail "
+		echo " done"
+	else
+		msg "Updating the sources via git..."
+		if [ -n "${TORELEASE}" ]; then
+			bver=$(convert_version "${TORELEASE}")
+			bverz=$(convert_property_version "${TORELEASE}")
+			BAE=`git branch -l | grep ${bver}`
+			if [ -z "${BAE}" ]; then
+				git branch ${bver} origin/${bver}
+			fi
+			git checkout ${bver}
+			zset version ${bverz}
+		fi
+		git pull || err 1 "Fail "
+		echo " done"
+	fi
+	build_and_install_world
+}
+
+create_jail() {
+	jail_exists ${JAILNAME} && err 2 "The jail ${JAILNAME} already exists"
+
+	test -z ${VERSION} && usage
+
+	if [ -z ${JAILMNT} ]; then
+		JAILMNT=${BASEFS}/jails/${JAILNAME}
+	fi
+
+	if [ -z ${JAILFS} ] ; then
+		JAILFS=${ZROOTFS}/jails/${JAILNAME}
+	fi
+
+	case ${METHOD} in
+	git)
+		GIT=`which git`
+		test -z ${GIT} && err 1 "You need git on your host to use this method"
+		FCT=install_from_git
+		;;
+	*)
+		err 2 "Unknown method to create the jail"
+		;;
+	esac
+
+	local bverz=$(convert_property_version "${VERSION}")
+	jail_create_zfs ${JAILNAME} ${bverz} ${ARCH} ${JAILMNT} ${JAILFS}
+	mkdir -p ${POUDRIERE_DATA}/logs
+	# Wrap the jail creation in a special cleanup hook that will remove
+	# the jail if any error is encountered
+	CLEANUP_HOOK=cleanup_new_jail
+	zset method "${METHOD}"
+	${FCT}
+	eval `grep "^[RB][A-Z]*=" ${JAILMNT}/usr/src/sys/conf/newvers.sh `
+	RELEASE=${REVISION}-${BRANCH}
+	OSVERSION=`awk '/\#define __DragonFly_version/ { print $3 }' ${JAILMNT}/usr/include/sys/param.h`
+	LOGIN_ENV=",UNAME_r=${RELEASE},UNAME_v=DragonFly ${RELEASE},OSVERSION=${OSVERSION}"
+
+	sed -i .back -e "s/:\(setenv.*\):/:\1${LOGIN_ENV}:/" ${JAILMNT}/etc/login.conf
+	cap_mkdb ${JAILMNT}/etc/login.conf
+	pwd_mkdb -d ${JAILMNT}/etc/ -p ${JAILMNT}/etc/master.passwd
+
+	cat >> ${JAILMNT}/etc/make.conf << EOF
+USE_PACKAGE_DEPENDS=yes
+BATCH=yes
+WRKDIRPREFIX=/wrkdirs
+EOF
+
+	mkdir -p ${JAILMNT}/${PORTSRC}
+	mkdir -p ${JAILMNT}/wrkdirs
+
+	zsnap ${JAILFS}@clean
+	unset CLEANUP_HOOK
+	msg "Jail ${JAILNAME} ${VERSION} ${ARCH} is ready to be used"
+	umount ${JAILMNT}
+}
+
+set_sysctl() {
+	[ $# -ne 2 ] && knob value
+	local KNOB=${1}
+	local WANTVAL=${2}
+	CURVAL=`sysctl -n ${KNOB} 2>/dev/null`
+	if [ ${WANTVAL} -ne ${CURVAL} ]; then
+		sysctl ${KNOB}=${WANTVAL}
+	fi
+}
+
+jrun() {
+	[ $# -ne 1 ] && eargs network
+	local AWKCMD='{ if ($2 != "127.0.0.1") print $2 }'
+	local network=$1
+	local ipargs
+	if [ ${network} -eq 0 ]; then
+		ipargs="127.0.0.1"
+	else
+		local inherited=`grep 'inet [0-9]' | awk "${AWKCMD}"`
+		ipargs="127.0.0.1,${inherited}"
+	fi
+
+	set_sysctl jail.allow_raw_sockets 1
+	set_sysctl jail.chflags_allowed 1
+	set_sysctl jail.sysvipc_allowed 1
+	sys_sysctl jail.socket_unixiproute_only 1
+	sys_sysctl jail.set_hostname_allowed 0
+
+	jail ${JAILMNT} ${jAILNAME} ${ipargs} /bin/sh
+}
