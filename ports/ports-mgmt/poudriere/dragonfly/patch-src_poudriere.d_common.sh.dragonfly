--- /dev/null	2013-01-13 04:46:51.754149689 +0100
+++ src/poudriere.d/common.sh.dragonfly	2013-01-13 04:35:06.775559000 +0100
@@ -0,0 +1,109 @@
+#!/bin/sh
+#
+# DragonFly-specific
+# Many vestigial functions left over from attempt to use jails.
+# Since DragonFly doesn't care about only having network during fetch,
+# It is more efficient and simpler just to use chroots.
+
+injail()  {
+	chroot ${JAILMNT} $@
+}
+
+jrun() {
+	[ $# -ne 1 ] && eargs network
+	# NO-OP FOR CHROOT
+}
+
+jail_soft_stop() {
+	# NO-OP FOR CHROOT
+}
+
+jail_stop() {
+	[ $# -ne 0 ] && eargs
+	local mnt
+	zset status "stop:"
+
+	cd /
+	msg "Umounting file systems"
+	mnt=`realpath ${MASTERMNT:-${JAILMNT}}`
+	mount | awk -v mnt="${mnt}/" 'BEGIN{ gsub(/\//, "\\\/", mnt); } { if ($3 ~ mnt && $1 !~ /\/dev\/md/ ) { print $3 }}' |  sort -r | xargs umount || :
+	umount ${mnt} || :
+
+	export STATUS=0
+}
+
+jail_start() {
+	[ $# -ne 0 ] && eargs
+	local arch=$(zget arch)
+	local NEEDFS="${NULLFSREF} procfs"
+	if [ -z "${NOLINUX}" ]; then
+		if [ "${arch}" = "i386" ]; then
+			NEEDFS="${NEEDFS} linprocfs linsysfs"
+			sysctl -n compat.linux.osrelease >/dev/null 2>&1 || kldload linux
+		fi
+	fi
+	[ -n "${USE_TMPFS}" ] && NEEDFS="${NEEDFS} tmpfs"
+	for fs in ${NEEDFS}; do
+		lsvfs $fs >/dev/null 2>&1 || kldload $fs
+	done
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	zset status "start:"
+
+	zrollback ${JAILFS}@clean
+
+	msg "Mounting system devices for ${JAILNAME}"
+	do_jail_mounts 1
+
+	test -n "${RESOLV_CONF}" && cp -v "${RESOLV_CONF}" "${JAILMNT}/etc/"
+
+	# Only set STATUS=1 if not turned off
+	# jail -s should not do this or jail will stop on EXIT
+	[ ${SET_STATUS_ON_START-1} -eq 1 ] && export STATUS=1
+}
+
+jail_runs() {
+	[ $# -ne 0 ] && eargs
+	local check=$(zget status)
+	[ "${check}" = "idle:" ] && return 0
+	return 1
+}
+
+
+listed_ports() {
+	if [ ${ALL:-0} -eq 1 ]; then
+		PORTSDIR=$(get_portsdir ${PTNAME})
+		local toplevel="$(cd ${PORTSDIR} && find * -type d -depth 0 -maxdepth 0 2>/dev/null)"
+		for level in ${toplevel}; do
+		  if [ "${level}" != "Mk" \
+		    -a "${level}" != "Tools" \
+		    -a "${level}" != "Templates" ]; then
+		    cd ${PORTSDIR} && find ${level}/ -type d -depth 1 -maxdepth 1 2>/dev/null
+		  fi
+		done
+		return
+	fi
+	if [ -z "${LISTPORTS}" ]; then
+		if [ -n "${LISTPKGS}" ]; then
+			grep -v -E '(^[[:space:]]*#|^[[:space:]]*$)' ${LISTPKGS}
+		fi
+	else
+		echo ${LISTPORTS} | tr ' ' '\n'
+	fi
+}
+
+killtree() {
+	local _pid=${1}
+	local _sig=${2}
+	local _child
+	local _children
+
+	# stop parent from attempting to folk
+	kill -17 ${_pid} 2>/dev/null
+	if [ $? -eq 0 ]; then
+	   _children=$(pgrep -P ${_pid})
+	   for _child in ${children}; do
+	      killtree ${_child} ${_sig}
+	   done
+	   kill -${_sig} ${_pid}
+	fi
+}
