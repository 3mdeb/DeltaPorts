--- src/poudriere.d/common.sh.hammer.orig	2013-02-22 22:25:46.000000000 +0000
+++ src/poudriere.d/common.sh.hammer
@@ -0,0 +1,823 @@
+#!/bin/sh
+
+zget() {
+	[ $# -ne 1 ] && eargs property
+	local name="${JAILNAME}"
+	local confloc=${POUDRIERE_DATA}/hammer/jails/${name}/${1}
+	if [ -f ${confloc} ]; then
+	   cat ${confloc}
+	else
+	   echo "-"
+	fi
+	return 0
+}
+
+zset() {
+	[ $# -ne 2 ] && eargs property value
+	local name="${JAILNAME}"
+	local confdir=${POUDRIERE_DATA}/hammer/jails/${name}
+	mkdir -p ${confdir}
+	echo "$2" > ${confdir}/${1}
+}
+
+pzget() {
+	[ $# -ne 1 ] && eargs property
+	local name="${PTNAME}"
+	local confloc=${POUDRIERE_DATA}/hammer/ports/${name}/${1}
+	if [ -f ${confloc} ]; then
+	   cat ${confloc}
+	else
+	   echo "-"
+	fi
+	return 0
+}
+
+pzset() {
+	[ $# -ne 2 ] && eargs property value
+	local name="${PTNAME}"
+	local confdir=${POUDRIERE_DATA}/hammer/ports/${name}
+	mkdir -p ${confdir}
+	echo "$2" > ${confdir}/${1}
+}
+
+snapname () {
+	[ $# -ne 1 ] && eargs pfs-filesystem@snapname
+	echo "${1}" | sed -e "s|\/pfs\/poudriere\.||"
+}
+
+extract_pfs () {
+	[ $# -ne 1 ] && eargs pfs-filesystem@snapname
+	echo "${1}" | sed -e 's|@.*||'
+}
+
+pfs_path () {
+	[ $# -ne 1 ] && eargs filesystem
+	local part2=$(echo "${1}" | sed -e "s|${ZROOTFS}\/||" -e "s|\/|\.|g")
+	echo "/pfs/poudriere.${part2}"
+}
+
+onlysnap () {
+	[ $# -ne 1 ] && eargs filesystem@snapname
+	local testat=$(echo "${1}" | grep @)
+	if [ -n "${testat}" ]; then
+	   echo 1
+	else
+	   echo 0
+	fi
+}
+
+check_mount () {
+	[ $# -ne 1 ] && eargs filesystem
+	local REAL=$(realpath ${1})
+	local AWKCMD='{ if ($1 == mnt) print $3 }'
+	mount | awk -v mnt="${REAL}" "${AWKCMD}"
+	return 0
+}
+
+zkill() {
+	[ $# -ne 1 ] && eargs pfs-filesystem@snapname
+	if [ $(onlysnap "${1}") -eq 1 ]; then
+		local snap=$(snapname "${1}")
+		[ -L ${HAMMER_SNAPDIR}/${snap} ] && \
+		  hammer snaprm ${HAMMER_SNAPDIR}/${snap}
+	fi
+	return 0
+}
+
+zsnap() {
+	[ $# -ne 1 ] && eargs pfs-filesystem@snapname
+	local snap=$(snapname "${1}")
+	local pfs=$(extract_pfs ${1})
+	mkdir -p ${HAMMER_SNAPDIR}
+	if [ -L ${HAMMER_SNAPDIR}/${snap} ]; then
+	   zkill ${1}
+	fi
+	hammer snapshot ${pfs} ${HAMMER_SNAPDIR}/${snap} > /dev/null
+	return 0
+}
+
+save_preinstall_state () {
+	[ $# -ne 3 ] && eargs master-mountpoint slave-mountpoint job-id
+	local mm="${1}"
+	local jn="${3}"
+	if [ -z "${mm}" ]; then
+	   mm="${2}"
+	   jn="00"
+	fi
+	local mtreename=slave-${jn}.preinst
+	local trees=${mm}/poudriere/trees
+	mtree -X ${trees}/mtree.exclude -xcn -k uid,gid,mode -p ${2} \
+	   > ${trees}/${mtreename}
+}
+
+differential () {
+	[ $# -ne 3 ] && eargs master-mountpoint slave-mountpoint job-id
+	local mm="${1}"
+	local jn="${3}"
+	if [ -z "${mm}" ]; then
+	   mm="${2}"
+	   jn="00"
+	fi
+	local mtreename=slave-${jn}.preinst
+	local trees=${mm}/poudriere/trees
+	local AWKCMD='{ if ($0 != ". changed") { \
+xx = length ($0); \
+if ($NF == "changed") {print "M * " substr ($0, 1, xx - 8)} \
+if ($NF == "missing") {print "- * " substr ($0, 1, xx - 8)} \
+if ($NF == "extra")   {print "+ * " substr ($0, 1, xx - 6)} \
+}}'
+	mtree -X ${trees}/mtree.exclude -x -f ${trees}/${mtreename} -p ${2} \
+	   | grep -E ' (changed|extra|missing)$' \
+	   | sed -e 's|^./||' \
+	   | awk "${AWKCMD}"
+}
+
+kill_metadata () {
+	[ $# -ne 1 ] && eargs jailport_name
+	rm -rf ${POUDRIERE_DATA}/hammer/${1}
+}
+
+zdelete() {
+	[ $# -ne 2 ] && eargs pfs-filesystem subdirectory
+	# Hammer doesn't use this, no-op
+}
+
+zkillfs () {
+	[ $# -ne 2 ] && eargs pfs-filesystem jailport
+	local mounted=$(check_mount ${1})
+	[ -n "${mounted}" ] && \
+	  err 1 "Must unmount filesystem ${1} before destroying it"
+	kill_metadata ${2}
+	hammer pfs-destroy ${1}
+}
+
+zrollback () {
+	[ $# -ne 1 ] && eargs pfs-filesystem@snapname
+	if [ $(onlysnap "${1}") -eq 0 ]; then
+		err 1 "Must specify snapshot in rollback"
+	fi
+	local snap=$(snapname "${1}")
+	local pfs=$(extract_pfs ${1})
+	# rollback only used for starting jail and building world
+
+	cpdup -x -VV -i0 ${HAMMER_SNAPDIR}/${snap}/ ${pfs}/
+	cpdup -VV -i0 ${HAMMER_SNAPDIR}/${snap}/etc/ ${pfs}/etc/
+	cpdup -VV -i0 ${HAMMER_SNAPDIR}/${snap}/var/ ${pfs}/var/
+	cpdup -VV -i0 ${HAMMER_SNAPDIR}/${snap}/usr/local/ ${pfs}/usr/local/
+	cp ${HAMMER_SNAPDIR}/${snap}/.cpignore ${pfs}/
+	cp ${HAMMER_SNAPDIR}/${snap}/usr/.cpignore ${pfs}/usr/
+}
+
+zxdiff () {
+	[ $# -ne 2 ] && eargs pfs-filesystem@snapname pfs-filesystem
+	# very basic zfs diff emulations: [M+-] (no R, no / type)
+	if [ $(onlysnap "${1}") -eq 0 ]; then
+		err 1 "Must specify snapshot in rollback"
+	fi
+	local snap=$(snapname "${1}")
+	local RIGHT="${2}"
+	local LEFTS=${HAMMER_SNAPDIR}/${snap}
+	local AWKCMD='{ \
+ lslen = length (leftside); \
+ rslen = length (rightside); \
+ if ($1 == "Files") \
+ { \
+   len = index ($0, " and ") - 7; \
+   print "M * " substr ($0, 7 + lslen, len - lslen); \
+ } \
+ if ($1 == "Only") \
+ { \
+   ndx = index ($0, ":"); \
+   if (leftside == substr ($0, 9, lslen)) { \
+     sym = "- * "; \
+     stem = substr ($0, 9 + lslen, ndx - 9 - lslen); \
+   } \
+   else { \
+     sym = "+ * "; \
+     stem = substr ($0, 9 + rslen, ndx - 9 - rslen); \
+   } \
+   ufile = substr ($0, ndx + 2); \
+   print sym stem "/" ufile; \
+ } \
+}'
+	diff -qr --exclude=src ${LEFTS} ${RIGHT} 2> /dev/null | \
+	   awk -v leftside=${LEFTS} -v rightside=${RIGHT} "${AWKCMD}"
+}
+
+jail_exists() {
+	[ $# -ne 1 ] && eargs jailname
+	local pfs=$(pfs_path "${ZROOTFS}/jails/${1}")
+	if [ -d ${pfs} ] || \
+	   [ -d ${POUDRIERE_DATA}/hammer/jails/${1} ]; then
+	    return 0
+	fi
+	return 1
+}
+
+jail_get_base() {
+	[ $# -ne 1 ] && eargs jailname
+	local confloc=${POUDRIERE_DATA}/hammer/jails/${1}/mountpoint
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+jail_get_version() {
+	[ $# -ne 1 ] && eargs jailname
+	local confloc=${POUDRIERE_DATA}/hammer/jails/${1}/version
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+jail_get_fs() {
+	[ $# -ne 1 ] && eargs jailname
+	local confloc=${POUDRIERE_DATA}/hammer/jails/${1}/filesys
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+porttree_exists() {
+	[ $# -ne 1 ] && eargs portstree_name
+	local pfs=$(pfs_path "${ZROOTFS}/ports/${1}")
+	if [ -d ${pfs} ] || \
+	   [ -d ${POUDRIERE_DATA}/hammer/ports/${1} ]; then
+	    return 0;
+	fi
+	return 1
+}
+
+porttree_get_base() {
+	[ $# -ne 1 ] && eargs portstree_name
+	local confloc=${POUDRIERE_DATA}/hammer/ports/${1}/mountpoint
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+porttree_get_fs() {
+	[ $# -ne 1 ] && eargs portstree_name
+	local confloc=${POUDRIERE_DATA}/hammer/ports/${1}/filesys
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+porttree_get_method() {
+	[ $# -ne 1 ] && eargs portstree_name
+	local confloc=${POUDRIERE_DATA}/hammer/ports/${1}/method
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+get_data_dir() {
+	if [ -n "${POUDRIERE_DATA}" ]; then
+		echo ${POUDRIERE_DATA}
+	else
+		echo ${BASEFS}/data
+	fi
+}
+
+jail_create_zfs() {
+	[ $# -ne 5 ] && eargs name version arch mountpoint pfs
+	local name=$1
+	local version=$2
+	local arch=$3
+	local mnt=$( echo $4 | sed -e "s,//,/,g")
+	local pfs=$5
+	local confdir="${POUDRIERE_DATA}/hammer/jails/${name}"
+	local numcpu=$(sysctl -n hw.ncpu)
+	local JOBX="$(jot -w %02d ${numcpu})"
+	msg_n "Creating ${name} fs..."
+
+	mkdir -p ${mnt}
+	mkdir -p ${confdir}
+	hammer pfs-master $pfs
+
+	echo "rootfs"     > ${confdir}/type
+	echo "${name}"    > ${confdir}/name
+	echo "${version}" > ${confdir}/version
+	echo "${arch}"    > ${confdir}/arch
+	echo "${mnt}"     > ${confdir}/mountpoint
+	echo "${pfs}"     > ${confdir}/filesys
+	echo "${numcpu}"  > ${confdir}/slaves
+
+	for j in ${JOBX}; do
+		jmnt="${mnt}/build/${j}"
+		jname="${name}-job-${j}"
+		jconfdir=${confdir}-job-${j}
+
+		mkdir -p ${jconfdir}
+
+		echo "rootfs"     > ${jconfdir}/type
+		echo "${jname}"   > ${jconfdir}/name
+		echo "${version}" > ${jconfdir}/version
+		echo "${arch}"    > ${jconfdir}/arch
+		echo "${jmnt}"    > ${jconfdir}/mountpoint
+	done
+
+	echo " done"
+}
+
+porttree_create_zfs() {
+	[ $# -ne 3 ] && eargs name mountpoint pfs
+	local name=$1
+	local mnt=$( echo $2 | sed -e 's,//,/,g')
+	local pfs=$3
+	local confdir="${POUDRIERE_DATA}/hammer/ports/${name}"
+	msg_n "Creating ${name} fs..."
+
+	mkdir -p ${mnt}
+	mkdir -p ${confdir}
+	hammer pfs-master $pfs
+
+	echo "ports"	> ${confdir}/type
+	echo "${name}"	> ${confdir}/name
+	echo "${mnt}"	> ${confdir}/mountpoint
+	echo "${pfs}"	> ${confdir}/filesys
+
+	echo " done"
+}
+
+start_builders() {
+	local j mnt
+	for j in ${JOBS}; do
+		mnt="${JAILMNT}/build/${j}"
+		mkdir -p ${mnt}
+		touch ${mnt}/virgin
+	done	
+}
+
+create_slave() {
+	[ $# -ne 2 ] && eargs master-mountpoint job-number
+	local j="${2}"
+	local mnt="${1}/build/${j}"
+	local name="${JAILNAME}"
+	local snap=$(snapname "${JAILFS%.job-*}@clean")
+	local BASEIMG=${HAMMER_SNAPDIR}/${JAILNAME%-job-*}
+	
+	zset name "${name}"	
+	zset status "genesis:"
+	if [ -f ${mnt}/virgin ]; then
+	    job_msg "Creating slave jail"
+	    # Make one-time readonly duplicate of base image
+	    rm ${mnt}/virgin
+	    ${NULLMOUNT} -o rdonly ${BASEIMG} ${mnt}
+	    JAILNAME=${name} MASTERMNT=${1} JAILMNT=${mnt} do_jail_mounts 0
+	    JAILNAME=${name} MASTERMNT=${1} JAILMNT=${mnt} do_portbuild_mounts 0
+	else
+	    job_msg "Refreshing slave jail"
+	fi
+	# Refresh /usr/local and /etc and /var
+	mount_tmpfs tmpfs ${mnt}/tmp
+	mount_tmpfs tmfps ${mnt}/wrkdirs
+	[ -n "${USE_TMPFS}" ] && mount_tmpfs tmpfs ${mnt}/var
+	[ -n "${USE_TMPFS}" ] && mount_tmpfs tmpfs ${mnt}/etc
+	[ -n "${USE_TMPFS}" ] && mount_tmpfs tmpfs ${mnt}/usr/local
+	cp -a ${HAMMER_SNAPDIR}/${snap}/etc/* ${mnt}/etc/
+	cp -a ${HAMMER_SNAPDIR}/${snap}/var/* ${mnt}/var/
+
+	JAILMNT=${mnt} injail /usr/sbin/mtree -q -U -f \
+	   ${PORTSRC}/Templates/BSD.local.dist -d -e -p /usr/local >/dev/null
+}
+
+destroy_slave() {
+	[ $# -ne 2 ] && eargs master-mountpoint job-number
+	local j="${2}"
+	local mnt="${1}/build/${j}"
+	zset status "dismounting:${j}"	
+	JAILNAME=${name} zset status "cleaning:"
+
+	# make sure cwd is not on mount
+	cd /
+
+	# destroy jail
+	umount ${mnt}/tmp
+	umount ${mnt}/wrkdirs
+	if [ -n "${USE_TMPFS}" ]; then
+	    umount ${mnt}/etc
+	    umount ${mnt}/var
+	    umount ${mnt}/usr/local
+	else
+	    rm -rf ${mng}/etc/*
+	    rm -rf ${mnt}/var/*
+	    rm -rf ${mnt}/usr/local/*
+	fi
+}
+
+stop_builders() {
+	local j mnt
+
+	# wait for the last running processes
+	cat ${JAILMNT}/poudriere/var/run/*.pid 2>/dev/null | xargs pwait 2>/dev/null
+
+	msg "Stopping ${PARALLEL_JOBS} builders"
+
+	# wait for slaves to finish dismounting
+	sleep 5
+
+	for j in ${JOBS}; do
+		jail_soft_stop ${JAILNAME}-job-${j} || :
+		kill_metadata jails/${JAILNAME}-job-${j}
+		JAILNAME=${JAILNAME}-job-${j} zset status "available"
+	done
+
+	cd /
+	mnt=`realpath ${JAILMNT}`
+	mount | awk -v mnt="${mnt}/build/" 'BEGIN{ gsub(/\//, "\\\/", mnt); } { if ($3 ~ mnt && $1 !~ /\/dev\/md/ ) { print $3 }}' |  sort -r | xargs umount || :
+
+	# No builders running, unset JOBS
+	JOBS=""
+}
+
+build_queue() {
+
+	local j cnt mnt pfs name pkgname read_queue builders_active should_build_stats
+	local AWKCMD='{ if ($1 != "PID") print $1 }'
+	local pidfile running
+
+	rm -f $(log_path)/last_run.failed
+	read_queue=1
+	should_build_stats=1 # Always build stats on first pass
+	while :; do
+		builders_active=0
+		for j in ${JOBS}; do
+			mnt="${JAILMNT}/build/${j}"
+			pfs="${JAILFS}.job-${j}"
+			name="${JAILNAME}-job-${j}"
+			pidfile="${JAILMNT}/poudriere/var/run/${j}.pid"
+			if [ -f "${pidfile}" ]; then
+				running=$(ps -p `cat ${pidfile}` | awk "${AWKCMD}")
+				if [ -n "${running}" ]; then
+					builders_active=1
+					continue
+				fi
+				should_build_stats=1
+				rm -f ${pidfile}
+
+				# A builder finished, check the queue to see if
+				# it can do some work
+				read_queue=1
+			fi
+
+			# Don't want to read the queue, so just skip this
+			# builder and check the next, as it may be done
+			[ ${read_queue} -eq 0 ] && continue
+
+			pkgname=$(next_in_queue)
+			if [ -z "${pkgname}" ]; then
+				# pool empty ?
+				[ -n "$(dir_empty ${JAILMNT}/poudriere/pool)" ] && return
+
+				# Pool is waiting on dep, wait until a build
+				# is done before checking the queue again
+				read_queue=0
+			else
+				MASTERMNT=${JAILMNT} JAILNAME="${name}" JAILMNT="${mnt}" JAILFS="${pfs}" \
+				MASTERFS=${JAILFS} MY_JOBID="${j}" \
+				build_pkg "${pkgname}" >/dev/null 2>&1 &
+				echo "$!" > ${pidfile}
+
+				# A new job is spawned, try to read the queue
+				# just to keep things moving
+				read_queue=1
+				builders_active=1
+			fi
+		done
+		if [ ${read_queue} -eq 0 ]; then
+			# If not wanting to read the queue, sleep to save CPU
+			sleep 1
+		fi
+
+		if [ ${builders_active} -eq 0 ]; then
+			msg "Dependency loop or poudriere bug detected."
+			find ${JAILMNT}/poudriere/pool || echo "pool missing"
+			find ${JAILMNT}/poudriere/deps || echo "deps missing"
+			err 1 "Queue is unprocessable"
+		fi
+
+		if [ ${should_build_stats} -eq 1 ]; then
+			build_stats
+			should_build_stats=0
+		fi
+	done
+}
+
+
+cleanup() {
+	[ -n "${CLEANED_UP}" ] && return 0
+	msg "Cleaning up"
+	# If this is a builder, don't cleanup, the master will handle that.
+	if [ -n "${MY_JOBID}" ]; then
+		[ -n "${PKGNAME}" ] && clean_pool ${PKGNAME} 1 || :
+		return 0
+
+	fi
+	# Prevent recursive cleanup on error
+	if [ -n "${CLEANING_UP}" ]; then
+		echo "Failure cleaning up. Giving up." >&2
+		return
+	fi
+	export CLEANING_UP=1
+	local BASEJNAME=${JAILNAME%-job-*}
+	[ -z "${BASEJNAME}" ] && err 2 "Fail: Missing JAILNAME"
+	log_stop
+
+	# Kill main process' children
+	for pid in $(jobs -p); do
+		killtree ${pid} 9 || :
+	done
+
+	if [ -d ${MASTERMNT:-${JAILMNT}}/poudriere/var/run ]; then
+		for pid in ${MASTERMNT:-${JAILMNT}}/poudriere/var/run/*.pid; do
+			# Ensure there is a pidfile to read or break
+			[ "${pid}" = "${MASTERMNT:-${JAILMNT}}/poudriere/var/run/*.pid" ] && break
+			killtree `cat ${pid}` 9 || :
+		done
+	fi
+	wait
+
+	jail_stop
+	[ -n "${USE_TMPFS}" ] && umount ${HAMMER_SNAPDIR}/${BASEJNAME}
+	rm -rf ${HAMMER_SNAPDIR}/${BASEJNAME}
+	rm -rf ${POUDRIERE_DATA}/hammer/jails/${BASEJNAME}-job-*
+	export CLEANED_UP=1
+}
+
+post_conf_check () {
+	[ -z ${HAMMER_SNAPDIR} ] && err 1 "HAMMER_SNAPDIR variable is not set"
+
+	# Hammer starts with ZROOTFS value, set ZPOOL to null
+	ZPOOL=
+
+	# Try to minimize ZVERSION checks issues
+	ZVERSION=9999
+
+	# use tmpfs for poudriere deps and pool
+	TMPFS_DATA=yes
+}
+
+print_ports_table () {
+	[ $# -ne 1 ] && eargs quiet
+	TABFORM='%-20s %-10s %s\n'
+	[ ${1} -eq 0 ] && printf "${TABFORM}" "PORTSTREE" "METHOD" "PATH"
+	local METHOD PTREEPATH
+	local confdir=${POUDRIERE_DATA}/hammer/ports
+	if [ -d ${confdir} ] && [ -n "$(ls -A ${confdir})" ]; then
+	  cd ${confdir}
+	  PORTLIST=$(find -s * -type d)
+	  for port in ${PORTLIST}; do
+	    if [ -f ${confdir}/${port}/method ]; then
+	      METHOD=$(cat ${confdir}/${port}/method)
+	    else
+	      METHOD=-
+	    fi
+	    PTREEPATH=$(cat ${confdir}/${port}/mountpoint)
+	    printf "${TABFORM}" "${port}" "${METHOD}" "${PTREEPATH}"
+	  done
+	fi
+}
+
+print_jails_table () {
+	[ $# -ne 1 ] && eargs quiet
+	local confdir=${POUDRIERE_DATA}/hammer/jails
+	local TABFORM='%-20s %-12s %-7s %-7s %-7s %-7s %-7s %-7s %-7s %s\n'
+	local SLVFORM='%-20s %s\n'
+	local COLCNT
+	local PARAMS
+	local AMSLAVE
+	local JAILLIST
+	[ ${1} -eq 0 ] && printf "${TABFORM}" \
+		"JAILNAME" "VERSION" "ARCH" "METHOD" "SUCCESS" \
+		"FAILED" "IGNORED" "SKIPPED" "QUEUED" "STATUS"
+	PARAMS="name version arch method stats_built stats_failed \
+	        stats_ignored stats_skipped stats_queued status"
+	if [ -d ${confdir} ] && [ -n "$(ls -A ${confdir})" ]; then
+	  cd ${confdir}
+	  JAILLIST=$(find -s * -type d)
+	  for jail in ${JAILLIST}; do
+	    AMSLAVE=$(echo ${jail} | grep -E 'job-[0-9][0-9]$')
+	    if [ -n "${AMSLAVE}" ]; then
+	      val_0=$(cat ${confdir}/${jail}/name 2>/dev/null || echo "-")
+	      val_1=$(cat ${confdir}/${jail}/status 2>/dev/null || echo "-")
+	      printf "${SLVFORM}" "${val_0}" "${val_1}"
+	    else
+	      COLCNT=0
+	      for param in ${PARAMS}; do
+	        if [ -f ${confdir}/${jail}/${param} ]; then
+	          eval "val_${COLCNT}=`cat ${confdir}/${jail}/${param}`"
+	        else
+	          eval "val_${COLCNT}=-"
+	        fi
+	        COLCNT=`expr ${COLCNT} + 1`
+	      done
+	      printf "${TABFORM}" "${val_0}" "${val_1}" "${val_2}" \
+	             "${val_3}" "${val_4}" "${val_5}" "${val_6}" \
+	             "${val_7}" "${val_8}" "${val_9}"
+	    fi
+	  done
+	fi
+}
+
+list_jail_info () {
+	[ $# -ne 2 ] && eargs num_queued num_to_build
+	echo "Jailname:              $(zget name)"
+	echo "BSD version:           $(zget version)"
+	echo "BSD arch:              $(zget arch)"
+	echo "Install/update method: $(zget method)"
+	echo "Status:                $(zget status)"
+	echo "Packages built:        $(zget stats_built)"
+	echo "Packages failed:       $(zget stats_failed)"
+	echo "Packages ignored:      $(zget stats_ignored)"
+	echo "Packages skipped:      $(zget stats_skipped)"
+	echo "Packages queued:       ${1}"
+	echo "Packages to be built:  ${2}"
+}
+
+mount_jailport() {
+	[ $# -ne 2 ] && eargs pfs-filesystem mountpoint
+	local mounted=$(check_mount ${1})
+	[ -z "${mounted}" ] && ${NULLMOUNT} ${1} ${2} || \
+  	  err 1 "Failed to null-mount ${1} to ${2}"
+}
+
+get_portsdir() {
+	[ $# -ne 1 ] && eargs portstree_name
+	echo $(porttree_get_fs ${1})
+}
+
+check_jobs() {
+	case ${PARALLEL_JOBS} in
+	''|*[!0-9]*)
+		local nslaves=$(zget slaves)
+		if [ -n "${JOBS_LIMIT}" ]; then
+			PARALLEL_JOBS=`expr ${nslaves} / ${JOBS_LIMIT}`
+		else
+			PARALLEL_JOBS=${nslaves}
+		fi
+		;;
+	esac
+}
+
+do_jail_mounts() {
+	# should_mkdir no longer used
+	[ $# -ne 1 ] && eargs should_mkdir
+	local should_mkdir=$1
+	local arch=$(zget arch)
+
+	mount -t devfs devfs ${JAILMNT}/dev
+	mount -t procfs proc ${JAILMNT}/proc
+
+	if [ -z "${NOLINUX}" ]; then
+				if [ "${arch}" = "i386" ]; then
+			if [ ${should_mkdir} -eq 1 ]; then
+				mkdir -p ${JAILMNT}/compat/linux/proc
+				mkdir -p ${JAILMNT}/compat/linux/sys
+			fi
+			mount -t linprocfs linprocfs ${JAILMNT}/compat/linux/proc
+		fi
+	fi
+}
+
+do_portbuild_mounts() {
+	[ $# -ne 1 ] && eargs should_mkdir
+	local should_mkdir=$1
+
+	# Only do this when starting the master jail, clones will already have the dirs
+	if [ ${should_mkdir} -eq 1 ]; then
+		mkdir -p ${STD_PACKAGES}
+		mkdir -p ${PKGDIR}/All
+		mkdir -p ${STD_DISTFILES}
+		if [ -d "${CCACHE_DIR:-/nonexistent}" ]; then
+			mkdir -p ${JAILMNT}${CCACHE_DIR} || err 1 "Failed to create ccache directory "
+			msg "Mounting ccache from: ${CCACHE_DIR}"
+			export CCACHE_DIR
+			export WITH_CCACHE_BUILD=yes
+		fi
+		# Check for invalid options-JAILNAME created by bad options.sh
+		[ -d ${POUDRIERED}/options-${JAILNAME%-job-*} ] && err 1 "Please move your options-${JAILNAME%-job-*} to ${JAILNAME%-job-*}-options"
+		
+		# only mount wrkdirs on master jail
+		# The slaves are already tmpfs, no need to mount tmpfs on tmpfs
+		[ -n "${USE_TMPFS}" ] && mount -t tmpfs tmpfs ${JAILMNT}/wrkdirs
+
+		msg "Mounting packages from: ${PKGDIR}"
+	fi
+
+	${NULLMOUNT} -o ro ${PORTSDIR} ${JAILMNT}/${PORTSRC} || err 1 "Failed to mount the ports directory "
+	${NULLMOUNT} ${PKGDIR} ${JAILMNT}/${STD_PACKAGES} || err 1 "Failed to mount the packages directory "
+
+	if [ "$(realpath ${DISTFILES_CACHE:-/nonexistent})" != "$(realpath ${PORTSDIR}/distfiles)" ]; then
+		${NULLMOUNT} ${DISTFILES_CACHE} ${JAILMNT}/${STD_DISTFILES} || err 1 "Failed to mount the distfile directory"
+	fi
+
+	# Order is JAILNAME-SETNAME, then SETNAME, then JAILNAME, then default.
+	if [ -n "${SETNAME}" -a -d ${POUDRIERED}/${JAILNAME%-job-*}${SETNAME}-options ]; then
+		use_options ${POUDRIERED}/${JAILNAME%-job-*}${SETNAME}-options ${should_mkdir}
+	elif [ -d ${POUDRIERED}/${SETNAME#-}-options ]; then
+		use_options ${POUDRIERED}/${SETNAME#-}-options ${should_mkdir}
+	elif [ -d ${POUDRIERED}/${JAILNAME%-job-*}-options ]; then
+		use_options ${POUDRIERED}/${JAILNAME%-job-*}-options ${should_mkdir}
+	elif [ -d ${POUDRIERED}/options ]; then
+		use_options ${POUDRIERED}/options ${should_mkdir}
+	fi
+
+	if [ -d "${CCACHE_DIR:-/nonexistent}" ]; then
+		# Mount user supplied CCACHE_DIR into /var/cache/ccache
+		${NULLMOUNT} ${CCACHE_DIR} ${JAILMNT}${CCACHE_DIR} || err 1 "Failed to mount the ccache directory "
+	fi
+}
+
+# Build+test port and return on first failure
+build_port() {
+	[ $# -ne 1 ] && eargs portdir
+	local portdir=$1
+	local port=$(echo ${portdir} | sed -e "s|^${PORTSRC}/||")
+	local targets="check-config fetch checksum extract patch configure build run-depends install package ${PORTTESTING:+deinstall}"
+
+	for phase in ${targets}; do
+		zset status "${phase}:${port}"
+		job_msg_verbose "Status for build ${port}: ${phase}"
+		if [ "${phase}" = "fetch" ]; then
+			jail_soft_stop ${JAILNAME}
+			jrun 1
+		fi
+		if [ "${phase}" = "install" ]; then
+			save_preinstall_state "${MASTERMNT}" "${JAILMNT}" "${MY_JOBID}"
+		fi
+		if [ "${phase}" = "deinstall" ]; then
+			msg "Checking shared library dependencies"
+			if [ ${PKGNG} -eq 0 ]; then
+				PLIST="/var/db/pkg/${PKGNAME}/+CONTENTS"
+				grep -v "^@" ${JAILMNT}${PLIST} | \
+					sed -e "s,^,${PREFIX}/," | \
+					xargs injail ldd 2>&1 | \
+					grep -v "not a dynamic executable" | \
+					awk ' /=>/{ print $3 }' | sort -u
+			else
+				injail pkg query "%Fp" ${PKGNAME} | \
+					xargs injail ldd 2>&1 | \
+					grep -v "not a dynamic executable" | \
+					awk '/=>/ { print $3 }' | sort -u
+			fi
+		fi
+
+		print_phase_header ${phase}
+		injail env ${PKGENV} ${PORT_FLAGS} make -C ${portdir} ${phase} || return 1
+		print_phase_footer
+
+		if [ "${phase}" = "checksum" ]; then
+			jail_soft_stop ${JAILNAME}
+			jrun 0
+		fi
+		if [ "${phase}" = "deinstall" ]; then
+			msg "Checking for extra files and directories"
+			PREFIX=`injail make -C ${portdir} -VPREFIX`
+			zset status "leftovers:${port}"
+			if [ $ZVERSION -lt 28 ]; then
+				find ${jailbase}${PREFIX} ! -type d | \
+					sed -e "s,^${jailbase}${PREFIX}/,," | sort
+
+				find ${jailbase}${PREFIX}/ -type d | sed "s,^${jailbase}${PREFIX}/,," | sort > ${jailbase}${PREFIX}.PLIST_DIRS.after
+				comm -13 ${jailbase}${PREFIX}.PLIST_DIRS.before ${jailbase}${PREFIX}.PLIST_DIRS.after | sort -r | awk '{ print "@dirrmtry "$1}'
+			else
+				local portname=$(injail make -C ${portdir} -VPORTNAME)
+				local add=$(mktemp ${jailbase}/tmp/add.XXXXXX)
+				local add1=$(mktemp ${jailbase}/tmp/add1.XXXXXX)
+				local del=$(mktemp ${jailbase}/tmp/del.XXXXXX)
+				local del1=$(mktemp ${jailbase}/tmp/del1.XXXXXX)
+				local mod=$(mktemp ${jailbase}/tmp/mod.XXXXXX)
+				local mod1=$(mktemp ${jailbase}/tmp/mod1.XXXXXX)
+				local die=0
+				differential "${MASTERMNT}" "${JAILMNT}" "${MY_JOBID}" | \
+					while read mod type path; do
+					local ppath
+					ppath=`echo "$path" | sed -e "s,^${JAILMNT},," -e "s,^${PREFIX}/,," -e "s,^share/${portname},%%DATADIR%%," -e "s,^etc/${portname},%%ETCDIR%%,"`
+					case $mod$type in
+					+*) echo "${ppath}" >> ${add};;
+					-*) echo "${ppath}" >> ${del};;
+					M/) continue;;
+					M*) echo "${ppath}" >> ${mod};;
+					esac
+				done
+				sort ${add} > ${add1}
+				sort ${del} > ${del1}
+				sort ${mod} > ${mod1}
+				comm -12 ${add1} ${del1} >> ${mod1}
+				comm -23 ${add1} ${del1} > ${add}
+				comm -13 ${add1} ${del1} > ${del}
+				if [ -s "${add}" ]; then
+					msg "Files or directories left over:"
+					die=1
+					cat ${add}
+				fi
+				if [ -s "${del}" ]; then
+					msg "Files or directories removed:"
+					die=1
+					cat ${del}
+				fi
+				if [ -s "${mod}" ]; then
+					msg "Files or directories modified:"
+					die=1
+					cat ${mod1}
+				fi
+				rm -f ${add} ${add1} ${del} ${del1} ${mod} ${mod1}
+				[ $die -eq 0 ] || return 1
+			fi
+		fi
+	done
+	jail_soft_stop ${JAILNAME}
+	jrun 0
+	zset status "idle:"
+	return 0
+}
