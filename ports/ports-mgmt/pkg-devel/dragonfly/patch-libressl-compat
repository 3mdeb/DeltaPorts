LibreSSL does not have EVP_MD_meth_dup() yet, use prior RSA versions.

--- libpkg/rsa.c.orig	2021-02-18 18:00:56 UTC
+++ libpkg/rsa.c
@@ -37,7 +37,7 @@
 #include "private/event.h"
 #include "private/pkg.h"
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 /*
  * This matches the historical usage for pkg.  Older versions sign the hex
  * encoding of the SHA256 checksum.  If we ever deprecated RSA, this can go
@@ -45,6 +45,7 @@
  */
 static EVP_MD *md_pkg_sha1;
 
+/* LibreSSL does not have EVP_MD_meth_dup() yet */
 static EVP_MD *
 EVP_md_pkg_sha1(void)
 {
@@ -231,7 +232,7 @@ rsa_verify_cb(int fd, void *ud)
 	char *sha256;
 	char errbuf[1024];
 	EVP_PKEY *pkey = NULL;
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 	EVP_PKEY_CTX *ctx;
 #else
 	RSA *rsa;
@@ -254,7 +255,7 @@ rsa_verify_cb(int fd, void *ud)
 		return (EPKG_FATAL);
 	}
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 	ctx = EVP_PKEY_CTX_new(pkey, NULL);
 	if (ctx == NULL) {
 		EVP_PKEY_free(pkey);
@@ -300,7 +301,7 @@ rsa_verify_cb(int fd, void *ud)
 		else
 			pkg_emit_error("%s: rsa signature verification failure",
 			    cbdata->key);
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 		EVP_PKEY_CTX_free(ctx);
 #else
 		RSA_free(rsa);
@@ -309,7 +310,7 @@ rsa_verify_cb(int fd, void *ud)
 		return (EPKG_FATAL);
 	}
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 	EVP_PKEY_CTX_free(ctx);
 #else
 	RSA_free(rsa);
@@ -359,7 +360,7 @@ rsa_sign(char *path, struct pkg_key *key
 {
 	char errbuf[1024];
 	int max_len = 0, ret;
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 	EVP_PKEY_CTX *ctx;
 	size_t siglen;
 #else
@@ -384,7 +385,7 @@ rsa_sign(char *path, struct pkg_key *key
 	if (sha256 == NULL)
 		return (EPKG_FATAL);
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 	ctx = EVP_PKEY_CTX_new(keyinfo->key, NULL);
 	if (ctx == NULL) {
 		free(sha256);
@@ -423,7 +424,7 @@ rsa_sign(char *path, struct pkg_key *key
 	if (ret <= 0) {
 		pkg_emit_error("%s: %s", keyinfo->path,
 		   ERR_error_string(ERR_get_error(), errbuf));
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 		EVP_PKEY_CTX_free(ctx);
 #else
 		RSA_free(rsa);
@@ -431,7 +432,7 @@ rsa_sign(char *path, struct pkg_key *key
 		return (EPKG_FATAL);
 	}
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
 	assert(siglen <= INT_MAX);
 	*osiglen = siglen;
 	EVP_PKEY_CTX_free(ctx);
