--- src/poudriere.d/common.sh.dragonfly.orig	2013-04-01 15:07:37.000000000 +0000
+++ src/poudriere.d/common.sh.dragonfly
@@ -0,0 +1,850 @@
+#!/bin/sh
+#
+# DragonFly-specific
+# Many vestigial functions left over from attempt to use jails.
+# Since DragonFly doesn't care about only having network during fetch,
+# It is more efficient and simpler just to use chroots.
+
+injail()  {
+	chroot ${JAILMNT} $@
+}
+
+jrun() {
+	[ $# -ne 1 ] && eargs network
+	# NO-OP FOR CHROOT
+}
+
+jail_soft_stop() {
+	# NO-OP FOR CHROOT
+}
+
+jail_stop() {
+	[ $# -ne 0 ] && eargs
+	local mnt
+	zset status "stop:"
+
+	cd /
+	msg "Umounting file systems"
+	mnt=`realpath ${MASTERMNT:-${JAILMNT}}`
+	mount | awk -v mnt="${mnt}/" 'BEGIN{ gsub(/\//, "\\\/", mnt); } { if ($3 ~ mnt && $1 !~ /\/dev\/md/ ) { print $3 }}' |  sort -r | xargs umount || :
+	umount ${mnt} || :
+
+	export STATUS=0
+}
+
+jail_dismount() {
+	[ $# -ne 0 ] && eargs
+	local mnt
+	local mnt2
+
+	cd /
+	msg "Umounting file systems"
+	mnt=`realpath ${JAILMNT}`
+	mnt2=${BASEFS}/memory/${JAILNAME}
+	mount | awk -v mnt="${mnt}" '{ if ($3 ~ mnt && $1 !~ /\/dev\/md/ ) { print $3 }}' |  sort -r | xargs umount -v || :
+	mount | awk -v mnt="${mnt2}" '{ if ($3 == mnt) { print $3 }}' | xargs umount -v || :
+}
+
+jail_start() {
+	[ $# -ne 0 ] && eargs
+	local arch=$(zget arch)
+	local NEEDFS="${NULLFSREF} procfs tmpfs"
+	local BASEIMG=${BASEFS}/memory/${JAILNAME}
+
+	if [ -z "${NOLINUX}" ]; then
+		if [ "${arch}" = "i386" ]; then
+			NEEDFS="${NEEDFS} linprocfs"
+			sysctl -n compat.linux.osrelease >/dev/null 2>&1 || kldload linux
+		fi
+	fi
+	for fs in ${NEEDFS}; do
+		lsvfs $fs >/dev/null 2>&1 || kldload $fs
+	done
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	zset status "start:"
+
+	mount_tmpfs -s 400M tmpfs ${BASEIMG}
+	cpdup -x -VV -i0 ${JAILFS}/ ${BASEIMG}/
+	mkdir ${BASEIMG}/etc \
+	      ${BASEIMG}/var \
+	      ${BASEIMG}/usr/local
+
+	# The master jail is malleable so /etc/ can be modified later
+	# The slave jails are read only.  All have same source
+
+	${NULLMOUNT} ${BASEIMG} ${JAILMNT}
+	mount_tmpfs -s 15M   tmpfs ${JAILMNT}/etc
+	mount_tmpfs -s 100M  tmpfs ${JAILMNT}/tmp
+	mount_tmpfs -s 125M  tmpfs ${JAILMNT}/var
+	mount_tmpfs -s 64K   tmpfs ${JAILMNT}/compat
+	mount_tmpfs -s 3G    tmpfs ${JAILMNT}/usr/local
+
+	mkdir -p ${JAILMNT}/compat/linprocfs \
+		 ${JAILMNT}/compat/linux/proc \
+		 ${JAILMNT}/compat/svr4
+	cp -a ${JAILFS}/etc/* ${JAILMNT}/etc/
+	cp -a ${JAILFS}/var/* ${JAILMNT}/var/
+
+	msg "Mounting system devices for ${JAILNAME}"
+	do_jail_mounts 0
+
+	test -n "${RESOLV_CONF}" && cp -v "${RESOLV_CONF}" "${JAILMNT}/etc/"
+
+	# Only set STATUS=1 if not turned off
+	# jail -s should not do this or jail will stop on EXIT
+	[ ${SET_STATUS_ON_START-1} -eq 1 ] && export STATUS=1
+}
+
+listed_ports() {
+	if [ ${ALL:-0} -eq 1 ]; then
+		PORTSDIR=$(get_portsdir ${PTNAME})
+		local toplevel="$(cd ${PORTSDIR} && find * -type d -depth 0 -maxdepth 0 2>/dev/null)"
+		for level in ${toplevel}; do
+		  if [ "${level}" != "Mk" \
+		    -a "${level}" != "Tools" \
+		    -a "${level}" != "Templates" ]; then
+		    cd ${PORTSDIR} && find ${level}/ -type d -depth 1 -maxdepth 1 2>/dev/null
+		  fi
+		done
+		return
+	fi
+	if [ -z "${LISTPORTS}" ]; then
+		if [ -n "${LISTPKGS}" ]; then
+			grep -v -E '(^[[:space:]]*#|^[[:space:]]*$)' ${LISTPKGS}
+		fi
+	else
+		echo ${LISTPORTS} | tr ' ' '\n'
+	fi
+}
+
+killtree() {
+	local _pid=${1}
+	local _sig=${2}
+	local _child
+	local _children
+
+	# stop parent from attempting to folk
+	kill -17 ${_pid} 2>/dev/null
+	if [ $? -eq 0 ]; then
+	   _children=$(pgrep -P ${_pid})
+	   for _child in ${children}; do
+	      killtree ${_child} ${_sig}
+	   done
+	   kill -${_sig} ${_pid}
+	fi
+}
+
+zget() {
+	[ $# -ne 1 ] && eargs property
+	local name="${JAILNAME}"
+	local confloc=${POUDRIERE_DATA}/meta/jail/${name}/${1}
+	if [ -f ${confloc} ]; then
+	   cat ${confloc}
+	else
+	   echo "-"
+	fi
+	return 0
+}
+
+zset() {
+	[ $# -ne 2 ] && eargs property value
+	local name="${JAILNAME}"
+	local confdir=${POUDRIERE_DATA}/meta/jail/${name}
+	mkdir -p ${confdir}
+	echo "$2" > ${confdir}/${1}
+}
+
+pzget() {
+	[ $# -ne 1 ] && eargs property
+	local name="${PTNAME}"
+	local confloc=${POUDRIERE_DATA}/meta/tree/${name}/${1}
+	if [ -f ${confloc} ]; then
+	   cat ${confloc}
+	else
+	   echo "-"
+	fi
+	return 0
+}
+
+pzset() {
+	[ $# -ne 2 ] && eargs property value
+	local name="${PTNAME}"
+	local confdir=${POUDRIERE_DATA}/meta/tree/${name}
+	mkdir -p ${confdir}
+	echo "$2" > ${confdir}/${1}
+}
+
+check_mount () {
+	[ $# -ne 1 ] && eargs filesystem
+	local REAL=$(realpath ${1})
+	local AWKCMD='{ if ($1 == mnt) print $3 }'
+	mount | awk -v mnt="${REAL}" "${AWKCMD}"
+	return 0
+}
+
+save_preinstall_state () {
+	[ $# -ne 3 ] && eargs master-mountpoint slave-mountpoint job-id
+	local mm="${1}"
+	local jn="${3}"
+	if [ -z "${mm}" ]; then
+	   mm="${2}"
+	   jn="00"
+	fi
+	local mtreename=slave-${jn}.preinst
+	local trees=${mm}/poudriere/trees
+	mtree -X ${trees}/mtree.exclude -xcn -k uid,gid,mode -p ${2} \
+	   > ${trees}/${mtreename}
+}
+
+differential () {
+	[ $# -ne 3 ] && eargs master-mountpoint slave-mountpoint job-id
+	local mm="${1}"
+	local jn="${3}"
+	if [ -z "${mm}" ]; then
+	   mm="${2}"
+	   jn="00"
+	fi
+	local mtreename=slave-${jn}.preinst
+	local trees=${mm}/poudriere/trees
+	local AWKCMD='{ if ($0 != ". changed") { \
+xx = length ($0); \
+if ($NF == "changed") {print "M * " substr ($0, 1, xx - 8)} \
+if ($NF == "missing") {print "- * " substr ($0, 1, xx - 8)} \
+if ($NF == "extra")   {print "+ * " substr ($0, 1, xx - 6)} \
+}}'
+	mtree -X ${trees}/mtree.exclude -x -f ${trees}/${mtreename} -p ${2} \
+	   | grep -E ' (changed|extra|missing)$' \
+	   | sed -e 's|^./||' \
+	   | awk "${AWKCMD}"
+}
+
+kill_metadata () {
+	[ $# -ne 1 ] && eargs jailport_name
+	rm -rf ${POUDRIERE_DATA}/meta/${1}
+}
+
+zkillfs () {
+	[ $# -ne 2 ] && eargs filesys jailport
+	local mounted=$(check_mount ${1})
+	[ -n "${mounted}" ] && \
+	  err 1 "Must unmount filesystem ${1} before destroying it"
+	kill_metadata ${2}
+	rm -rf ${1}
+}
+
+jail_exists() {
+	[ $# -ne 1 ] && eargs jailname
+	[ -d ${POUDRIERE_DATA}/meta/jail/${1} ] && return 0
+	return 1
+}
+
+jail_get_base() {
+	[ $# -ne 1 ] && eargs jailname
+	local confloc=${POUDRIERE_DATA}/meta/jail/${1}/mountpoint
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+jail_get_version() {
+	[ $# -ne 1 ] && eargs jailname
+	local confloc=${POUDRIERE_DATA}/meta/jail/${1}/version
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+jail_get_fs() {
+	[ $# -ne 1 ] && eargs jailname
+	local confloc=${POUDRIERE_DATA}/meta/jail/${1}/filesys
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+porttree_exists() {
+	[ $# -ne 1 ] && eargs portstree_name
+	[ -d ${POUDRIERE_DATA}/meta/tree/${1} ] && return 0;
+	return 1
+}
+
+porttree_get_fs() {
+	[ $# -ne 1 ] && eargs portstree_name
+	local confloc=${POUDRIERE_DATA}/meta/tree/${1}/filesys
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+porttree_get_method() {
+	[ $# -ne 1 ] && eargs portstree_name
+	local confloc=${POUDRIERE_DATA}/meta/tree/${1}/method
+	[ -f ${confloc} ] && cat ${confloc}
+}
+
+get_data_dir() {
+	if [ -n "${POUDRIERE_DATA}" ]; then
+		echo ${POUDRIERE_DATA}
+	else
+		echo ${BASEFS}/data
+	fi
+}
+
+porttree_create_zfs() {
+	[ $# -ne 2 ] && eargs name filesys
+	local name=$1
+	local filesys=$2
+	local confdir="${POUDRIERE_DATA}/meta/tree/${name}"
+	msg_n "Creating ${name} filesystem..."
+
+	mkdir -p ${confdir}
+	mkdir -p ${filesys}
+
+	echo "ports"	  > ${confdir}/type
+	echo "${name}"	  > ${confdir}/name
+	echo "${filesys}" > ${confdir}/filesys
+
+	echo " done"
+}
+
+start_builders() {
+	local j mnt
+	for j in ${JOBS}; do
+		mnt="${JAILMNT}/build/${j}"
+		mkdir -p ${mnt}
+		touch ${mnt}/virgin
+	done
+	zset epoch $(date '+%s')
+}
+
+dismount() {
+	[ $# -ne 1 ] && eargs mountpoint
+	umount ${1} || :
+}
+
+create_slave() {
+	[ $# -ne 2 ] && eargs master-mountpoint job-number
+	local j="${2}"
+	local mnt="${1}/build/${j}"
+	local name="${JAILNAME}"
+	local BASEIMG=${BASEFS}/memory/${JAILNAME%-job-*}
+	
+	zset name "${name}"	
+	zset status "genesis:"
+	if [ -f ${mnt}/virgin ]; then
+	    job_msg "Jail     Mounting"
+	    # Make one-time readonly duplicate of base image, virgin hidden
+	    ${NULLMOUNT} -o rdonly ${BASEIMG} ${mnt}
+	    JAILNAME=${name} MASTERMNT=${1} JAILMNT=${mnt} do_jail_mounts 0
+	    JAILNAME=${name} MASTERMNT=${1} JAILMNT=${mnt} do_portbuild_mounts 0
+	else
+	    job_msg "Jail     Renovating"
+	fi
+	# Refresh /usr/local and /etc and /var
+	mount_tmpfs -s 100M  tmpfs ${mnt}/tmp
+	mount_tmpfs -s 7G    tmfps ${mnt}/wrkdirs
+	mount_tmpfs -s 12M   tmpfs ${mnt}/etc
+	mount_tmpfs -s 125M  tmpfs ${mnt}/var
+	mount_tmpfs -s 64K   tmpfs ${mnt}/compat
+	mount_tmpfs -s 3G    tmpfs ${mnt}/usr/local
+	mkdir -p ${mnt}/compat/linprocfs \
+		 ${mnt}/compat/linux/proc \
+		 ${mnt}/compat/svr4
+	cp -a ${JAILFS}/etc/* ${mnt}/etc/
+	cp -a ${JAILFS}/var/* ${mnt}/var/
+	[ -n "${RESOLV_CONF}" ] && cp -v "${RESOLV_CONF}" ${mnt}/etc/
+
+	JAILMNT=${mnt} injail /usr/sbin/mtree -q -U -f \
+	   ${PORTSRC}/Templates/BSD.local.dist -d -e -p /usr/local >/dev/null
+
+	job_msg "Jail     Ready"
+}
+
+destroy_slave() {
+	[ $# -ne 2 ] && eargs master-mountpoint job-number
+	local j="${2}"
+	local mnt="${1}/build/${j}"
+	zset status "dismounting:${j}"	
+
+	# make sure cwd is not on mount
+	cd /
+
+	# Repeat dismount attempts in case 1 or more failed
+	# This also helps reap mount on previous failed attempts
+	for x in 1 2; do
+	   [ ${x} -eq 1 ] && sleep 3
+	   dismount ${mnt}/tmp
+	   dismount ${mnt}/wrkdirs
+	   dismount ${mnt}/etc
+	   dismount ${mnt}/var
+	   dismount ${mnt}/compat/linprocfs
+	   dismount ${mnt}/compat/srv4
+	   dismount ${mnt}/compat
+	   dismount ${mnt}/usr/local
+	done
+
+	zset status "available:"
+}
+
+stop_builders() {
+	local j mnt
+
+	# wait for the last running processes
+	cat ${JAILMNT}/poudriere/var/run/*.pid 2>/dev/null | xargs pwait 2>/dev/null
+
+	msg "Stopping ${PARALLEL_JOBS} builders"
+
+	# wait for slaves to finish dismounting
+	sleep 3
+
+	for j in ${JOBS}; do
+		jail_soft_stop ${JAILNAME}-job-${j} || :
+		kill_metadata jails/${JAILNAME}-job-${j}
+		JAILNAME=${JAILNAME}-job-${j} zset status "available:"
+	done
+
+	cd /
+	mnt=`realpath ${JAILMNT}`
+	mount | awk -v mnt="${mnt}/build/" 'BEGIN{ gsub(/\//, "\\\/", mnt); } { if ($3 ~ mnt && $1 !~ /\/dev\/md/ ) { print $3 }}' |  sort -r | xargs umount || :
+
+	# No builders running, unset JOBS
+	JOBS=""
+}
+
+slim_stats() {
+	[ $# -ne 1 ] && eargs type
+	local logname=${JAILMNT}/poudriere/ports.${1}
+	local cnt
+	if [ "${1}" = "skipped" ]; then
+	    cnt=$(awk '{print $1}' ${logname} | uniq | wc -l)
+	else
+	    cnt=$(cat ${logname} | wc -l)
+	fi
+	zset stats_${1} ${cnt}
+}
+
+build_queue() {
+
+	local j cnt mnt name pkgname read_queue stats_countdown
+	local builders_active new_builders_active
+	local AWKCMD='{ if ($1 != "PID") print $1 }'
+	local pidfile running
+
+	rm -f $(log_path)/last_run.failed
+	read_queue=1
+	stats_countdown=0 # Always build stats on first pass
+	builders_active=1
+
+	while :; do
+		new_builders_active=0
+		for j in ${JOBS}; do
+			mnt="${JAILMNT}/build/${j}"
+			name="${JAILNAME}-job-${j}"
+			pidfile="${JAILMNT}/poudriere/var/run/${j}.pid"
+			if [ -f "${pidfile}" ]; then
+				running=$(ps -p `cat ${pidfile}` | awk "${AWKCMD}")
+				if [ -n "${running}" ]; then
+					new_builders_active=1
+					continue
+				fi
+				stats_countdown=$((stats_countdown - 1))
+				rm -f ${pidfile}
+				read_queue=1
+			fi
+
+			# A slot is available for this job.  Leave
+			# current read state intact, loop if
+			# reading the queue here would be fruitless.
+			#
+			[ ${read_queue} -eq 0 ] && continue
+
+			# A builder slot is available, either because one just
+			# finished or because one finished previously.
+			#
+			# Check the pool
+			#
+			pkgname=$(next_in_queue)
+			if [ -z "${pkgname}" ]; then
+				# The pool is empty or can't be processed due to
+				# dependencies.
+				#
+				# Wait until a build is done before checking
+				# the queue again.  When a build finishes it may
+				# release dependencies and add to the pool.
+				#
+				read_queue=0
+			else
+				# Dispatch next element in pool to available slot
+				#
+				MASTERMNT=${JAILMNT} JAILNAME="${name}" \
+				JAILMNT="${mnt}" MY_JOBID="${j}" \
+				build_pkg "${pkgname}" >/dev/null 2>&1 &
+				echo "$!" > ${pidfile}
+
+				# A new job is spawned, try to read the queue
+				# just to keep things moving
+				read_queue=1
+				builders_active=1
+				new_builders_active=1
+			fi
+		done
+
+		builders_active=${new_builders_active}
+		if [ ${read_queue} -eq 0 ]; then
+			# If not wanting to read the queue, sleep to save CPU
+			sleep 1
+		fi
+
+		if [ ${builders_active} -eq 0 ]; then
+			[ -n "$(dir_empty ${JAILMNT}/poudriere/pool0)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool1)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool2)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool3)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool4)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool5)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool6)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool7)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool8)" -a \
+			  -n "$(dir_empty ${JAILMNT}/poudriere/pool9)" ] && return
+			msg "Dependency loop or poudriere bug detected."
+			find ${JAILMNT}/poudriere/pool* >/dev/null || echo "pool missing"
+			find ${JAILMNT}/poudriere/deps >/dev/null || echo "deps missing"
+			err 1 "Queue is unprocessable"
+		fi
+
+		slim_stats built
+		slim_stats failed
+		slim_stats ignored
+		# accurate skip counting is more cpu intensive to calculate
+		# than other statistics, so only check it every 5 packages
+		if [ ${stats_countdown} -lt 1 ]; then
+			slim_stats skipped
+			stats_countdown=5
+		fi
+	done
+}
+
+
+cleanup() {
+	[ -n "${CLEANED_UP}" ] && return 0
+	msg "Cleaning up"
+	# If this is a builder, don't cleanup, the master will handle that.
+	if [ -n "${MY_JOBID}" ]; then
+		[ -n "${PKGNAME}" ] && clean_pool ${PKGNAME} 1 || :
+		return 0
+
+	fi
+	# Prevent recursive cleanup on error
+	if [ -n "${CLEANING_UP}" ]; then
+		echo "Failure cleaning up. Giving up." >&2
+		return
+	fi
+	export CLEANING_UP=1
+	local BASEJNAME=${JAILNAME%-job-*}
+	[ -z "${BASEJNAME}" ] && err 2 "Fail: Missing JAILNAME"
+	log_stop
+
+	zset epoch 0
+	# Kill main process' children
+	for pid in $(jobs -p); do
+		killtree ${pid} 9 || :
+	done
+
+	if [ -d ${MASTERMNT:-${JAILMNT}}/poudriere/var/run ]; then
+		for pid in ${MASTERMNT:-${JAILMNT}}/poudriere/var/run/*.pid; do
+			# Ensure there is a pidfile to read or break
+			[ "${pid}" = "${MASTERMNT:-${JAILMNT}}/poudriere/var/run/*.pid" ] && break
+			killtree `cat ${pid}` 9 || :
+		done
+	fi
+	wait
+
+	jail_stop
+	umount ${BASEFS}/memory/${BASEJNAME}
+	rm -rf ${POUDRIERE_DATA}/meta/jail/${BASEJNAME}-job-*
+	export CLEANED_UP=1
+}
+
+post_conf_check () {
+	# Older (HAMMER) versions cared about ZPOOL to null
+	ZPOOL=
+
+	# Try to minimize ZVERSION checks issues
+	ZVERSION=9999
+
+	# use tmpfs for poudriere deps and pool
+	TMPFS_DATA=yes
+}
+
+print_ports_table () {
+	[ $# -ne 1 ] && eargs quiet
+	TABFORM='%-20s %-10s %-19s %s\n'
+	[ ${1} -eq 0 ] && printf "${TABFORM}" "PORTSTREE" "METHOD" "LAST_UPDATED"
+	local METHOD PTREEPATH TSTAMP
+	local confdir=${POUDRIERE_DATA}/meta/tree
+	if [ -d ${confdir} ] && [ -n "$(ls -A ${confdir})" ]; then
+	  cd ${confdir}
+	  PORTLIST=$(find -s * -type d)
+	  for port in ${PORTLIST}; do
+	    if [ -f ${confdir}/${port}/method ]; then
+	      METHOD=$(cat ${confdir}/${port}/method)
+	    else
+	      METHOD=-
+	    fi
+	    TSTAMP=$(cat ${confdir}/${port}/timestamp)
+	    printf "${TABFORM}" "${port}" "${METHOD}" "${TSTAMP}"
+	  done
+	fi
+}
+
+print_jails_table () {
+	[ $# -ne 1 ] && eargs quiet
+	local confdir=${POUDRIERE_DATA}/meta/jail
+	local TABFORM='%-20s %-12s %-7s %-7s %-7s %-7s %-7s %-7s %-7s %s\n'
+	local SLVFORM='%-20s %s\n'
+	local COLCNT
+	local PARAMS
+	local AMSLAVE
+	local JAILLIST
+	[ ${1} -eq 0 ] && printf "${TABFORM}" \
+		"JAILNAME" "VERSION" "ARCH" "METHOD" "SUCCESS" \
+		"FAILED" "IGNORED" "SKIPPED" "QUEUED" "STATUS"
+	PARAMS="name version arch method stats_built stats_failed \
+	        stats_ignored stats_skipped stats_queued status"
+	if [ -d ${confdir} ] && [ -n "$(ls -A ${confdir})" ]; then
+	  cd ${confdir}
+	  JAILLIST=$(find -s * -type d)
+	  for jail in ${JAILLIST}; do
+	    AMSLAVE=$(echo ${jail} | grep -E 'job-[0-9][0-9]$')
+	    if [ -n "${AMSLAVE}" ]; then
+	      val_0=$(cat ${confdir}/${jail}/name 2>/dev/null || echo "-")
+	      val_1=$(cat ${confdir}/${jail}/status 2>/dev/null || echo "-")
+	      printf "${SLVFORM}" "${val_0}" "${val_1}"
+	    else
+	      COLCNT=0
+	      for param in ${PARAMS}; do
+	        if [ -f ${confdir}/${jail}/${param} ]; then
+	          eval "val_${COLCNT}=`cat ${confdir}/${jail}/${param}`"
+	        else
+	          eval "val_${COLCNT}=-"
+	        fi
+	        COLCNT=`expr ${COLCNT} + 1`
+	      done
+	      printf "${TABFORM}" "${val_0}" "${val_1}" "${val_2}" \
+	             "${val_3}" "${val_4}" "${val_5}" "${val_6}" \
+	             "${val_7}" "${val_8}" "${val_9}"
+	    fi
+	  done
+	fi
+}
+
+list_jail_info () {
+	[ $# -ne 2 ] && eargs num_queued num_to_build
+	local EPOCH
+	local building_started
+	local elapsed elapsed_days elapsed_hms elapsed_timestamp
+	echo "Jailname:              $(zget name)"
+	echo "BSD version:           $(zget version)"
+	echo "BSD arch:              $(zget arch)"
+	echo "Install/update method: $(zget method)"
+	echo "World built:           $(zget timestamp)"
+	echo "Status:                $(zget status)"
+	EPOCH=$(zget epoch)
+	if [ "${EPOCH}" != "-" -a "${EPOCH}" != "0" ]; then
+	   building_started=$(date -j -r ${EPOCH} "+%Y-%m-%d %H:%M:%S")
+	   elapsed=$(expr `date "+%s"` - ${EPOCH})
+	   elapsed_days=$(expr ${elapsed} / 86400)
+	   elapsed_hms=$(date -j -u -r ${elapsed} "+%H:%M:%S")
+	   case ${elapsed_days} in
+	     0) elapsed_timestamp="${elapsed_hms}" ;;
+	     1) elapsed_timestamp="1 day, ${elapsed_hms}" ;;
+	     *) elapsed_timestamp="${elapsed_days} days, ${elapsed_hms}" ;;
+	   esac
+	   echo "Building started:      ${building_started}"
+	   echo "Elapsed time:          ${elapsed_timestamp}"
+	fi
+	echo "Packages built:        $(zget stats_built)"
+	echo "Packages failed:       $(zget stats_failed)"
+	echo "Packages ignored:      $(zget stats_ignored)"
+	echo "Packages skipped:      $(zget stats_skipped)"
+	echo "Packages queued:       ${1}"
+	echo "Packages to be built:  ${2}"
+}
+
+mount_jailport() {
+	[ $# -ne 2 ] && eargs filesys mountpoint
+	local mounted=$(check_mount ${1})
+	[ -z "${mounted}" ] && ${NULLMOUNT} ${1} ${2} || \
+  	  err 1 "Failed to null-mount ${1} to ${2}"
+}
+
+get_portsdir() {
+	[ $# -ne 1 ] && eargs portstree_name
+	echo $(porttree_get_fs ${1})
+}
+
+check_jobs() {
+	case ${PARALLEL_JOBS} in
+	''|*[!0-9]*)
+		local nslaves=$(zget slaves)
+		if [ -n "${JOBS_LIMIT}" ]; then
+			PARALLEL_JOBS=`expr ${nslaves} / ${JOBS_LIMIT}`
+		else
+			PARALLEL_JOBS=${nslaves}
+		fi
+		;;
+	esac
+}
+
+do_jail_mounts() {
+	# should_mkdir no longer used
+	[ $# -ne 1 ] && eargs should_mkdir
+	local should_mkdir=$1
+	local arch=$(zget arch)
+
+	mount -t devfs devfs ${JAILMNT}/dev
+	mount -t procfs proc ${JAILMNT}/proc
+
+	if [ -z "${NOLINUX}" ]; then
+				if [ "${arch}" = "i386" ]; then
+			if [ ${should_mkdir} -eq 1 ]; then
+				mkdir -p ${JAILMNT}/compat/linux/proc
+			fi
+			mount -t linprocfs linprocfs ${JAILMNT}/compat/linux/proc
+		fi
+	fi
+}
+
+do_portbuild_mounts() {
+	[ $# -ne 1 ] && eargs should_mkdir
+	local should_mkdir=$1
+
+	# Only do this when starting the master jail, clones will already have the dirs
+	if [ ${should_mkdir} -eq 1 ]; then
+		mkdir -p ${STD_PACKAGES}
+		mkdir -p ${PKGDIR}/All
+		mkdir -p ${STD_DISTFILES}
+		if [ -d "${CCACHE_DIR:-/nonexistent}" ]; then
+			mkdir -p ${JAILMNT}${CCACHE_DIR} || err 1 "Failed to create ccache directory "
+			msg "Mounting ccache from: ${CCACHE_DIR}"
+			export CCACHE_DIR
+			export WITH_CCACHE_BUILD=yes
+		fi
+		# Check for invalid options-JAILNAME created by bad options.sh
+		[ -d ${POUDRIERED}/options-${JAILNAME%-job-*} ] && err 1 "Please move your options-${JAILNAME%-job-*} to ${JAILNAME%-job-*}-options"
+
+		mount_tmpfs -s 7G tmpfs ${JAILMNT}/wrkdirs
+		msg "Mounting packages from: ${PKGDIR}"
+	fi
+
+	${NULLMOUNT} -o ro ${PORTSDIR} ${JAILMNT}/${PORTSRC} || err 1 "Failed to mount the ports directory "
+	${NULLMOUNT} ${PKGDIR} ${JAILMNT}/${STD_PACKAGES} || err 1 "Failed to mount the packages directory "
+
+	if [ "$(realpath ${DISTFILES_CACHE:-/nonexistent})" != "$(realpath ${PORTSDIR}/distfiles)" ]; then
+		${NULLMOUNT} ${DISTFILES_CACHE} ${JAILMNT}/${STD_DISTFILES} || err 1 "Failed to mount the distfile directory"
+	fi
+
+	# Order is JAILNAME-SETNAME, then SETNAME, then JAILNAME, then default.
+	if [ -n "${SETNAME}" -a -d ${POUDRIERED}/${JAILNAME%-job-*}${SETNAME}-options ]; then
+		use_options ${POUDRIERED}/${JAILNAME%-job-*}${SETNAME}-options ${should_mkdir}
+	elif [ -d ${POUDRIERED}/${SETNAME#-}-options ]; then
+		use_options ${POUDRIERED}/${SETNAME#-}-options ${should_mkdir}
+	elif [ -d ${POUDRIERED}/${JAILNAME%-job-*}-options ]; then
+		use_options ${POUDRIERED}/${JAILNAME%-job-*}-options ${should_mkdir}
+	elif [ -d ${POUDRIERED}/options ]; then
+		use_options ${POUDRIERED}/options ${should_mkdir}
+	fi
+
+	if [ -d "${CCACHE_DIR:-/nonexistent}" ]; then
+		# Mount user supplied CCACHE_DIR into /var/cache/ccache
+		${NULLMOUNT} ${CCACHE_DIR} ${JAILMNT}${CCACHE_DIR} || err 1 "Failed to mount the ccache directory "
+	fi
+}
+
+# Build+test port and return on first failure
+build_port() {
+	[ $# -ne 1 ] && eargs portdir
+	local portdir=$1
+	local port=$(echo ${portdir} | sed -e "s|^${PORTSRC}/||")
+	local targets="check-config fetch checksum extract patch configure build run-depends install package ${PORTTESTING:+deinstall}"
+
+	for phase in ${targets}; do
+		zset status "${phase}:${port}"
+		job_msg_verbose "Status   ${port}: ${phase}"
+		if [ "${phase}" = "fetch" ]; then
+			jail_soft_stop ${JAILNAME}
+			jrun 1
+		fi
+		if [ "${phase}" = "install" ]; then
+			save_preinstall_state "${MASTERMNT}" "${JAILMNT}" "${MY_JOBID}"
+		fi
+		if [ "${phase}" = "deinstall" ]; then
+			msg "Checking shared library dependencies"
+			if [ ${PKGNG} -eq 0 ]; then
+				PLIST="/var/db/pkg/${PKGNAME}/+CONTENTS"
+				grep -v "^@" ${JAILMNT}${PLIST} | \
+					sed -e "s,^,${PREFIX}/," | \
+					xargs injail ldd 2>&1 | \
+					grep -v "not a dynamic executable" | \
+					awk ' /=>/{ print $3 }' | sort -u
+			else
+				injail pkg query "%Fp" ${PKGNAME} | \
+					xargs injail ldd 2>&1 | \
+					grep -v "not a dynamic executable" | \
+					awk '/=>/ { print $3 }' | sort -u
+			fi
+		fi
+
+		print_phase_header ${phase}
+		injail env ${PKGENV} ${PORT_FLAGS} make -C ${portdir} ${phase} || return 1
+		print_phase_footer
+
+		if [ "${phase}" = "checksum" ]; then
+			jail_soft_stop ${JAILNAME}
+			jrun 0
+		fi
+		if [ "${phase}" = "deinstall" ]; then
+			msg "Checking for extra files and directories"
+			PREFIX=`injail make -C ${portdir} -VPREFIX`
+			zset status "leftovers:${port}"
+			local portname=$(injail make -C ${portdir} -VPORTNAME)
+			local add=$(mktemp ${jailbase}/tmp/add.XXXXXX)
+			local add1=$(mktemp ${jailbase}/tmp/add1.XXXXXX)
+			local del=$(mktemp ${jailbase}/tmp/del.XXXXXX)
+			local del1=$(mktemp ${jailbase}/tmp/del1.XXXXXX)
+			local mod=$(mktemp ${jailbase}/tmp/mod.XXXXXX)
+			local mod1=$(mktemp ${jailbase}/tmp/mod1.XXXXXX)
+			local die=0
+			differential "${MASTERMNT}" "${JAILMNT}" "${MY_JOBID}" | \
+				while read mod type path; do
+				local ppath
+				ppath=`echo "$path" | sed -e "s,^${JAILMNT},," -e "s,^${PREFIX}/,," -e "s,^share/${portname},%%DATADIR%%," -e "s,^etc/${portname},%%ETCDIR%%,"`
+				case $mod$type in
+				+*) echo "${ppath}" >> ${add};;
+				-*) echo "${ppath}" >> ${del};;
+				M/) continue;;
+				M*) echo "${ppath}" >> ${mod};;
+				esac
+			done
+			sort ${add} > ${add1}
+			sort ${del} > ${del1}
+			sort ${mod} > ${mod1}
+			comm -12 ${add1} ${del1} >> ${mod1}
+			comm -23 ${add1} ${del1} > ${add}
+			comm -13 ${add1} ${del1} > ${del}
+			if [ -s "${add}" ]; then
+				msg "Files or directories left over:"
+				die=1
+				cat ${add}
+			fi
+			if [ -s "${del}" ]; then
+				msg "Files or directories removed:"
+				die=1
+				cat ${del}
+			fi
+			if [ -s "${mod}" ]; then
+				msg "Files or directories modified:"
+				die=1
+				cat ${mod1}
+			fi
+			rm -f ${add} ${add1} ${del} ${del1} ${mod} ${mod1}
+			[ $die -eq 0 ] || return 1
+		fi
+	done
+	jail_soft_stop ${JAILNAME}
+	jrun 0
+	zset status "idle:"
+	return 0
+}
