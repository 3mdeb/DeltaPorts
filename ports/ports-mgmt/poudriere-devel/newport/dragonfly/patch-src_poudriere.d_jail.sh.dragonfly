--- src/poudriere.d/jail.sh.dragonfly.orig	2013-04-01 15:07:37.000000000 +0000
+++ src/poudriere.d/jail.sh.dragonfly
@@ -0,0 +1,265 @@
+#!/bin/sh
+#
+# DragonFly specific
+
+jail_runs() {
+	[ $# -ne 0 ] && eargs
+	local check=$(zget status)
+	[ "${check}" = "idle:" ] && return 0
+	return 1
+}
+
+establish_jail() {
+	[ $# -ne 5 ] && eargs name version arch mountpoint filesys
+	local name=$1
+	local version=$2
+	local arch=$3
+	local mnt=$( echo $4 | sed -e "s,//,/,g")
+	local filesys=$5
+	local confdir="${POUDRIERE_DATA}/meta/jail/${name}"
+	local memdir="${BASEFS}/memory/${name}"
+	local numcpu=$(sysctl -n hw.ncpu)
+	local JOBX="$(jot -w %02d ${numcpu})"
+	msg_n "Creating ${name} fs..."
+
+	mkdir -p ${mnt}
+	mkdir -p ${confdir}
+	mkdir -p ${memdir}
+	mkdir -p ${filesys}
+
+	echo "rootfs"     > ${confdir}/type
+	echo "${name}"    > ${confdir}/name
+	echo "${version}" > ${confdir}/version
+	echo "${arch}"    > ${confdir}/arch
+	echo "${mnt}"     > ${confdir}/mountpoint
+	echo "${filesys}" > ${confdir}/filesys
+	echo "${numcpu}"  > ${confdir}/slaves
+	echo " done"
+}
+
+update_jail() {
+	[ $# -ne 1 ] && eargs quick
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	jail_runs && \
+		err 1 "Unable to remove jail ${JAILNAME}: it is running"
+
+	METHOD=`zget method`
+	if [ "${METHOD}" = "-" ]; then
+		METHOD="git"
+		zset method "${METHOD}"
+	fi
+	msg "Upgrading using ${METHOD}"
+	case ${METHOD} in
+	git)
+		install_from_git ${1}
+		;;
+	*)
+		err 1 "Unsupported method"
+		;;
+	esac
+}
+
+build_and_install_world() {
+	[ $# -ne 1 ] && eargs quick
+	local JLOGBASE=${POUDRIERE_DATA}/jailbuild/${JAILNAME}
+	local factor=${PARALLEL_JOBS}
+	local options="-DNO_GAMES -DNOPROFILE -DNO_BINUTILS221"
+	local directive
+	mkdir -p ${JLOGBASE}
+
+	export TARGET_ARCH=${ARCH}
+	export __MAKE_CONF=/dev/null
+	export DESTDIR=${JAILMNT}
+
+	if [ ${1} -eq 1 ]; then
+	   directive=quickworld
+	else
+	   directive=buildworld
+	fi
+	msg "${JAILNAME}: making ${directive} with ${factor} jobs"
+	make -C ${JAILMNT}/usr/src -j${factor} ${options} ${directive} > \
+	  ${JLOGBASE}/build.log 2>&1 || err 1 "Fail to ${directive}"
+
+	msg "${JAILNAME}: making installworld"
+	make -C ${JAILMNT}/usr/src ${options} installworld > \
+	  ${JLOGBASE}/install.log 2>&1 || err 1 "Fail to install world"
+
+	msg "${JAILNAME}: making distribution"
+	make -C ${JAILMNT}/usr/src/etc distribution > \
+	  ${JLOGBASE}/distrib.log 2>&1 || err 1 "Fail to make distribution"
+
+	# make upgrade required to link device drives (e.g. </dev/video/...)
+     	msg "${JAILNAME}: making world upgrade"
+	make -C ${JAILMNT}/usr/src upgrade > \
+	  ${JLOGBASE}/upgrade.log 2>&1 || err 1 "Fail to make world upgrade"
+
+	# make sure world can be dismounted
+	cd /
+}
+
+convert_property_version () {
+	local GREPPAT='^[0-9]\.[0-9]+$'
+	local FILTER=`echo "${1}" | grep -E "${GREPPAT}"`
+	if [ -n "${FILTER}" ]; then
+	   echo RELEASE-${1}
+	else
+	   echo master
+	fi
+}
+
+convert_version () {
+	# $1 can be empty; "master" will be returned
+	local GREPPAT='^[0-9]\.[0-9]+$'
+	local FILTER=`echo "${1}" | grep -E "${GREPPAT}"`
+	if [ -n "${FILTER}" ]; then
+	   echo DragonFly_RELEASE_`echo ${FILTER} | sed 's|\.|_|'`
+	else
+	   echo master
+	fi
+}
+
+install_from_git() {
+	[ $# -ne 1 ] && eargs quick
+	local UPDATE=0
+	local proto
+	local bver
+	local bverz
+	local bhack
+	local mounted=$(check_mount "${JAILFS}")
+
+	[ -n "${mounted}" ] && err 1 "Already mounted: ${JAILFS}"
+	${NULLMOUNT} ${JAILFS} "${JAILMNT}" || err 1 "Failed to mount JAILFS"
+	[ -d ${JAILMNT}/usr/src ] && UPDATE=1
+	mkdir -p ${JAILMNT}/usr/src
+	cd ${JAILMNT}/usr/src
+	if [ ${UPDATE} -eq 0 ]; then
+		msg "Checking out the sources via git..."
+		bver=$(convert_version ${VERSION})
+		git init
+		git remote add origin git://${GIT_HOST}/dragonfly.git
+		git fetch --depth=1 origin
+		git branch ${bver} origin/${bver}
+		git checkout ${bver}
+		git pull || err 1 "Fail "
+		echo " done"
+	else
+		msg "Updating the sources via git..."
+		if [ -n "${TORELEASE}" ]; then
+			bver=$(convert_version "${TORELEASE}")
+			bverz=$(convert_property_version "${TORELEASE}")
+			BAE=`git branch -l | grep ${bver}`
+			if [ -z "${BAE}" ]; then
+				git branch ${bver} origin/${bver}
+			fi
+			git checkout ${bver}
+			zset version ${bverz}
+		fi
+		git pull || err 1 "Fail "
+		echo " done"
+	fi
+	mount -t devfs devfs ${JAILMNT}/dev
+	build_and_install_world ${1}
+	umount ${JAILMNT}/dev
+	umount ${JAILMNT}
+	bhack="$(date '+%Y-%m-%d %H:%M:%S')"
+	zset timestamp "${bhack}"
+}
+
+create_jail() {
+	jail_exists ${JAILNAME} && err 2 "The jail ${JAILNAME} already exists"
+
+	[ -z ${VERSION} ] && VERSION=master
+	[ -z ${JAILMNT} ] && JAILMNT=${BASEFS}/jails/${JAILNAME}
+	[ -z ${JAILFS} ] && JAILFS=${BASEFS}/worlds/${JAILNAME}
+
+	case ${METHOD} in
+	git)
+		GIT=`which git`
+		test -z ${GIT} && \
+		  err 1 "You need git on your host to use this method"
+		FCT="install_from_git 0"
+		;;
+	*)
+		err 2 "Unknown method to create the jail"
+		;;
+	esac
+
+	local bverz=$(convert_property_version "${VERSION}")
+	establish_jail ${JAILNAME} ${bverz} ${ARCH} ${JAILMNT} ${JAILFS}
+	mkdir -p ${POUDRIERE_DATA}/logs
+	# Wrap the jail creation in a special cleanup hook that will remove
+	# the jail if any error is encountered
+	CLEANUP_HOOK=cleanup_new_jail
+	zset method "${METHOD}"
+	${FCT}
+
+	eval `grep -E "^(RELEASE|BRANCH|REVISION)=" ${JAILMNT}/usr/src/sys/conf/newvers.sh `
+	update_version ${RELEASE}
+	zset version ${bverz}
+
+	pwd_mkdb -d ${JAILMNT}/etc/ -p ${JAILMNT}/etc/master.passwd
+
+	cat > ${JAILMNT}/etc/make.conf << EOF
+USE_PACKAGE_DEPENDS=yes
+BATCH=yes
+WRKDIRPREFIX=/wrkdirs
+EOF
+	# At least one daemon has to run otherwise jail will exits immediately
+	# Let cron run over syslogd (remove "cron_enable=NO")
+	cat > ${JAILMNT}/etc/rc.conf << EOF
+sendmail_enable=NONE
+syslogd_enable=NO
+update_motd=NO
+EOF
+	echo "# dummy" 	            > ${JAILMNT}/etc/fstab
+	echo "src"                  > ${JAILMNT}/usr/.cpignore
+	echo "local"               >> ${JAILMNT}/usr/.cpignore
+	echo "etc"                  > ${JAILMNT}/.cpignore
+	echo "sys"                 >> ${JAILMNT}/.cpignore
+	echo "var"                 >> ${JAILMNT}/.cpignore
+
+	mkdir -p ${JAILMNT}/${PORTSRC}
+	mkdir -p ${JAILMNT}/${STD_PACKAGES}
+	mkdir -p ${JAILMNT}/${STD_DISTFILES}
+	mkdir -p ${JAILMNT}/wrkdirs
+	mkdir -p ${JAILMNT}/var/db/pkg
+
+	unset CLEANUP_HOOK
+
+	msg "Jail ${JAILNAME} ${VERSION} ${ARCH} is ready to be used"
+	umount ${JAILMNT}/dev
+	umount ${JAILMNT}
+}
+
+delete_jail() {
+	test -z ${JAILNAME} && usage
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	jail_runs && \
+		err 1 "Unable to remove jail ${JAILNAME}: it is running"
+
+	local numcpu=$(zget slaves)
+	local JOBX="$(jot -w %02d ${numcpu})"
+
+	msg_n "Removing ${JAILNAME} jail..."
+	zkillfs ${JAILFS} jails/${JAILNAME}
+
+	rmdir ${JAILMNT}
+	rm -rf ${POUDRIERE_DATA}/packages/${JAILNAME}
+	rm -rf ${POUDRIERE_DATA}/cache/${JAILNAME}
+	rm -f ${POUDRIERE_DATA}/logs/*-${JAILNAME}.*.log
+	rm -f ${POUDRIERE_DATA}/logs/bulk-${JAILNAME}.log
+	rm -rf ${POUDRIERE_DATA}/logs/*/${JAILNAME}
+	rm -rf ${POUDRIERE_DATA}/jailbuild/${JAILNAME}
+	echo "done"
+}
+
+update_version() {
+	local release="$1"
+	local login_env osversion
+
+	osversion=`awk '/\#define __DragonFly_version/ { print $3 }' ${JAILMNT}/usr/include/sys/param.h`
+	login_env=",UNAME_r=${release},UNAME_v=DragonFly ${release},OSVERSION=${osversion}"
+
+	sed -i "" -e "s/:\(setenv.*\):/:\1${login_env}:/" ${JAILMNT}/etc/login.conf
+	cap_mkdb ${JAILMNT}/etc/login.conf
+}
