--- src/poudriere.d/jail.sh.freebsd.orig	2013-03-07 15:24:40.000000000 +0000
+++ src/poudriere.d/jail.sh.freebsd
@@ -0,0 +1,331 @@
+#!/bin/sh
+#
+# FreeBSD specific
+
+update_jail() {
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	jail_runs && \
+		err 1 "Unable to remove jail ${JAILNAME}: it is running"
+
+	METHOD=`zget method`
+	if [ "${METHOD}" = "-" ]; then
+		METHOD="ftp"
+		zset method "${METHOD}"
+	fi
+	msg "Upgrading using ${METHOD}"
+	case ${METHOD} in
+	ftp)
+		JAILMNT=`jail_get_base ${JAILNAME}`
+		jail_start
+		jail_soft_stop ${JAILNAME}
+		jrun 1
+		if [ -z "${TORELEASE}" ]; then
+			injail /usr/sbin/freebsd-update fetch install
+		else
+			yes | injail env PAGER=/bin/cat /usr/sbin/freebsd-update -r ${TORELEASE} upgrade install || err 1 "Fail to upgrade system"
+			yes | injail env PAGER=/bin/cat /usr/sbin/freebsd-update install || err 1 "Fail to upgrade system"
+			zset version "${TORELEASE}"
+		fi
+		zkill ${JAILFS}@clean
+		zsnap ${JAILFS}@clean
+		jail_stop
+		;;
+	csup)
+		install_from_csup
+		update_version $(zget version)
+		yes | make -C ${JAILMNT}/usr/src delete-old delete-old-libs DESTDIR=${JAILMNT}
+		zkill ${JAILFS}@clean
+		zsnap ${JAILFS}@clean
+		;;
+	svn*)
+		install_from_svn
+		update_version $(zget version)
+		yes | make -C ${JAILMNT} delete-old delete-old-libs DESTDIR=${JAILMNT}
+		zkill ${JAILFS}@clean
+		zsnap ${JAILFS}@clean
+		;;
+	allbsd)
+		err 1 "Upgrade is not supported with allbsd, to upgrade, please delete and recreate the jail"
+		;;
+	*)
+		err 1 "Unsupported method"
+		;;
+	esac
+
+}
+
+build_and_install_world() {
+	export TARGET_ARCH=${ARCH}
+	export SRC_BASE=${JAILMNT}/usr/src
+	mkdir -p ${JAILMNT}/etc
+	[ -f ${JAILMNT}/etc/src.conf ] && rm -f ${JAILMNT}/etc/src.conf
+	[ -f ${POUDRIERED}/src.conf ] && cat ${POUDRIERED}/src.conf > ${JAILMNT}/etc/src.conf
+	[ -f ${POUDRIERED}/${JAILNAME}-src.conf ] && cat ${POUDRIERED}/${JAILNAME}-src.conf >> ${JAILMNT}/etc/src.conf
+	unset MAKEOBJPREFIX
+	export __MAKE_CONF=/dev/null
+	export SRCCONF=${JAILMNT}/etc/src.conf
+	MAKE_JOBS="-j${PARALLEL_JOBS}"
+
+	: ${CCACHE_PATH:="/usr/local/libexec/ccache"}
+	if [ -n "${CCACHE_DIR}" -a -d ${CCACHE_PATH}/world ]; then
+		export CCACHE_DIR
+		# Fix building world when CC is clang
+		export CCACHE_CPP2=yes
+		export CC="${CCACHE_PATH}/world/cc"
+		export CXX="${CCACHE_PATH}/world/c++"
+	fi
+
+	msg "Starting make buildworld with ${PARALLEL_JOBS} jobs"
+	make -C ${JAILMNT}/usr/src buildworld ${MAKE_JOBS} ${MAKEWORLDARGS} || err 1 "Fail to build world"
+	msg "Starting make installworld"
+	make -C ${JAILMNT}/usr/src installworld DESTDIR=${JAILMNT} || err 1 "Fail to install world"
+	make -C ${JAILMNT}/usr/src DESTDIR=${JAILMNT} distrib-dirs && \
+	make -C ${JAILMNT}/usr/src DESTDIR=${JAILMNT} distribution
+}
+
+install_from_svn() {
+	local UPDATE=0
+	local proto
+	[ -d ${JAILMNT}/usr/src ] && UPDATE=1
+	mkdir -p ${JAILMNT}/usr/src
+	case ${METHOD} in
+	svn+http) proto="http" ;;
+	svn+ssh) proto="svn+ssh" ;;
+	svn) proto="svn" ;;
+	esac
+	if [ ${UPDATE} -eq 0 ]; then
+		msg_n "Checking out the sources from svn..."
+		svn -q co ${proto}://${SVN_HOST}/base/${VERSION} ${JAILMNT}/usr/src || err 1 "Fail "
+		echo " done"
+	else
+		msg_n "Updating the sources from svn..."
+		svn -q update ${JAILMNT}/usr/src || err 1 "Fail "
+		echo " done"
+	fi
+	build_and_install_world
+}
+
+install_from_csup() {
+	local UPDATE=0
+	[ -d ${JAILMNT}/usr/src ] && UPDATE=1
+	mkdir -p ${JAILMNT}/etc
+	mkdir -p ${JAILMNT}/var/db
+	mkdir -p ${JAILMNT}/usr
+	[ -z ${CSUP_HOST} ] && err 2 "CSUP_HOST has to be defined in the configuration to use csup"
+	if [ "${UPDATE}" -eq 0 ]; then
+		echo "*default base=${JAILMNT}/var/db
+*default prefix=${JAILMNT}/usr
+*default release=cvs tag=${VERSION}
+*default delete use-rel-suffix
+src-all" > ${JAILMNT}/etc/supfile
+	fi
+	csup -z -h ${CSUP_HOST} ${JAILMNT}/etc/supfile || err 1 "Fail to fetch sources"
+	build_and_install_world
+}
+
+install_from_ftp() {
+	mkdir ${JAILMNT}/fromftp
+	local URL V
+
+	V=${ALLBSDVER:-${VERSION}}
+	if [ ${V%%.*} -lt 9 ]; then
+		msg "Fetching sets for FreeBSD ${V} ${ARCH}"
+		case ${METHOD} in
+		ftp) URL="${FREEBSD_HOST}/pub/FreeBSD/releases/${ARCH}/${V}" ;;
+		allbsd) URL="https://pub.allbsd.org/FreeBSD-snapshots/${ARCH}-${ARCH}/${V}-JPSNAP/ftp" ;;
+		esac
+		DISTS="base dict src games"
+		[ ${ARCH} = "amd64" ] && DISTS="${DISTS} lib32"
+		for dist in ${DISTS}; do
+			fetch_file ${JAILMNT}/fromftp/ ${URL}/$dist/CHECKSUM.SHA256 || \
+				err 1 "Fail to fetch checksum file"
+			sed -n "s/.*(\(.*\...\)).*/\1/p" \
+				${JAILMNT}/fromftp/CHECKSUM.SHA256 | \
+				while read pkg; do
+				[ ${pkg} = "install.sh" ] && continue
+				# Let's retry at least one time
+				fetch_file ${JAILMNT}/fromftp/ ${URL}/${dist}/${pkg}
+			done
+		done
+
+		msg "Extracting sets:"
+		for SETS in ${JAILMNT}/fromftp/*.aa; do
+			SET=`basename $SETS .aa`
+			echo -e "\t- $SET...\c"
+			case ${SET} in
+				s*)
+					APPEND="usr/src"
+					;;
+				*)
+					APPEND=""
+					;;
+			esac
+			cat ${JAILMNT}/fromftp/${SET}.* | \
+				tar --unlink -xpf - -C ${JAILMNT}/${APPEND} || err 1 " Fail" && echo " done"
+		done
+	else
+		case ${METHOD} in
+		ftp) URL="${FREEBSD_HOST}/pub/FreeBSD/releases/${ARCH}/${ARCH}/${V}" ;;
+		allbsd) URL="https://pub.allbsd.org/FreeBSD-snapshots/${ARCH}-${ARCH}/${V}-JPSNAP/ftp" ;;
+		esac
+		DISTS="base.txz src.txz games.txz"
+		[ ${ARCH} = "amd64" ] && DISTS="${DISTS} lib32.txz"
+		for dist in ${DISTS}; do
+			msg "Fetching ${dist} for FreeBSD ${V} ${ARCH}"
+			fetch_file ${JAILMNT}/fromftp/${dist} ${URL}/${dist}
+			msg_n "Extracting ${dist}..."
+			tar -xpf ${JAILMNT}/fromftp/${dist} -C  ${JAILMNT}/ || err 1 " fail" && echo " done"
+		done
+	fi
+
+	msg_n "Cleaning up..."
+	rm -rf ${JAILMNT}/fromftp/
+	echo " done"
+}
+
+create_jail() {
+	jail_exists ${JAILNAME} && err 2 "The jail ${JAILNAME} already exists"
+
+	test -z ${VERSION} && usage
+
+	if [ -z ${JAILMNT} ]; then
+		JAILMNT=${BASEFS}/jails/${JAILNAME}
+	fi
+
+	if [ -z ${JAILFS} ] ; then
+		JAILFS=${ZPOOL}${ZROOTFS}/jails/${JAILNAME}
+	fi
+
+	case ${METHOD} in
+	ftp)
+		FCT=install_from_ftp
+		;;
+	allbsd)
+		FCT=install_from_ftp
+		ALLBSDVER=`fetch -qo - \
+			https://pub.allbsd.org/FreeBSD-snapshots/${ARCH}-${ARCH}/ | \
+			sed -n "s,.*href=\"\(.*${VERSION}.*\)-JPSNAP/\".*,\1,p" | \
+			sort -k 3 -t - -r | head -n 1 `
+		if [ -z ${ALLBSDVER} ]; then
+			err 1 "Unknown version $VERSION"
+		fi
+
+		OIFS=${IFS}
+		IFS=-
+		set -- ${ALLBSDVER}
+		IFS=${OIFS}
+		RELEASE="${ALLBSDVER}-JPSNAP/ftp"
+		;;
+	svn*)
+		SVN=`which svn`
+		test -z ${SVN} && err 1 "You need svn on your host to use svn method"
+		case ${VERSION} in
+			stable/*![0-9]*)
+				err 1 "bad version number for stable version"
+				;;
+			release/*![0-9]*.[0-9].[0-9])
+				err 1 "bad version number for release version"
+				;;
+			releng/*![0-9]*.[0-9])
+				err 1 "bad version number for releng version"
+				;;
+			stable/*|head|release/*|releng/*.[0-9]) ;;
+			*)
+				err 1 "version with svn should be: head or stable/N or release/N or releng/N"
+				;;
+		esac
+		FCT=install_from_svn
+		;;
+	csup)
+		case ${VERSION} in
+			.)
+				;;
+			RELENG_*![0-9]*_[0-9])
+				err 1 "bad version number for RELENG"
+				;;
+			RELENG_*![0-9]*)
+				err 1 "bad version number for RELENG"
+				;;
+			RELENG_*|.) ;;
+			*)
+				err 1 "version with svn should be: head or stable/N or release/N or releng/N"
+				;;
+		esac
+		FCT=install_from_csup
+		;;
+	*)
+		err 2 "Unknown method to create the jail"
+		;;
+	esac
+
+	jail_create_zfs ${JAILNAME} ${VERSION} ${ARCH} ${JAILMNT} ${JAILFS}
+	# Wrap the jail creation in a special cleanup hook that will remove the jail
+	# if any error is encountered
+	CLEANUP_HOOK=cleanup_new_jail
+	zset method "${METHOD}"
+	${FCT}
+
+	eval `grep "^[RB][A-Z]*=" ${JAILMNT}/usr/src/sys/conf/newvers.sh `
+	RELEASE=${REVISION}-${BRANCH}
+	zset version "${RELEASE}"
+	update_version ${RELEASE}
+
+	if [ "${ARCH}" = "i386" -a "${REALARCH}" = "amd64" ];then
+		cat > ${JAILMNT}/etc/make.conf << EOF
+ARCH=i386
+MACHINE=i386
+MACHINE_ARCH=i386
+EOF
+
+	fi
+
+	pwd_mkdb -d ${JAILMNT}/etc/ -p ${JAILMNT}/etc/master.passwd
+
+	cat >> ${JAILMNT}/etc/make.conf << EOF
+USE_PACKAGE_DEPENDS=yes
+BATCH=yes
+WRKDIRPREFIX=/wrkdirs
+EOF
+
+	mkdir -p ${JAILMNT}/${PORTSRC}
+	mkdir -p ${JAILMNT}/wrkdirs
+	mkdir -p ${POUDRIERE_DATA}/logs
+
+	jail -U root -c path=${JAILMNT} command=/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat
+
+	zsnap ${JAILFS}@clean
+	unset CLEANUP_HOOK
+	msg "Jail ${JAILNAME} ${VERSION} ${ARCH} is ready to be used"
+}
+
+delete_jail() {
+	test -z ${JAILNAME} && usage
+	jail_exists ${JAILNAME} || err 1 "No such jail: ${JAILNAME}"
+	jail_runs && \
+		err 1 "Unable to remove jail ${JAILNAME}: it is running"
+
+	msg_n "Removing ${JAILNAME} jail..."
+	zkillfs ${JAILFS} jails/${JAILNAME}
+	rmdir ${JAILMNT}
+	rm -rf ${POUDRIERE_DATA}/packages/${JAILNAME}
+	rm -rf ${POUDRIERE_DATA}/cache/${JAILNAME}
+	rm -f ${POUDRIERE_DATA}/logs/*-${JAILNAME}.*.log
+	rm -f ${POUDRIERE_DATA}/logs/bulk-${JAILNAME}.log
+	rm -rf ${POUDRIERE_DATA}/logs/*/${JAILNAME}
+	echo done
+}
+
+update_version() {
+	local release="$1"
+	local login_env osversion
+
+	osversion=`awk '/\#define __FreeBSD_version/ { print $3 }' ${JAILMNT}/usr/include/sys/param.h`
+	login_env=",UNAME_r=${release},UNAME_v=FreeBSD ${release},OSVERSION=${osversion}"
+
+	if [ "${ARCH}" = "i386" -a "${REALARCH}" = "amd64" ];then
+		login_env="${login_env},UNAME_p=i386,UNAME_m=i386"
+	fi
+
+	sed -i "" -e "s/:\(setenv.*\):/:\1${login_env}:/" ${JAILMNT}/etc/login.conf
+	cap_mkdb ${JAILMNT}/etc/login.conf
+}
