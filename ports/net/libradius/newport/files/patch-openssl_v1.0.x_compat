--- radlib.c.orig	2019-08-03 17:07:04 UTC
+++ radlib.c
@@ -158,6 +158,29 @@ static void
 insert_message_authenticator(struct rad_handle *h, int resp)
 {
 #ifdef WITH_SSL
+#if OPENSSL_VERSION_NUMBER < 0x1010000fL
+	u_char md[EVP_MAX_MD_SIZE];
+	u_int md_len;
+	const struct rad_server *srvp;
+	HMAC_CTX ctx;
+	srvp = &h->servers[h->srv];
+
+	if (h->authentic_pos != 0) {
+		HMAC_CTX_init(&ctx);
+		HMAC_Init(&ctx, srvp->secret, strlen(srvp->secret), EVP_md5());
+		HMAC_Update(&ctx, &h->out[POS_CODE], POS_AUTH - POS_CODE);
+		if (resp)
+		    HMAC_Update(&ctx, &h->in[POS_AUTH], LEN_AUTH);
+		else
+		    HMAC_Update(&ctx, &h->out[POS_AUTH], LEN_AUTH);
+		HMAC_Update(&ctx, &h->out[POS_ATTRS],
+		    h->out_len - POS_ATTRS);
+		HMAC_Final(&ctx, md, &md_len);
+		HMAC_CTX_cleanup(&ctx);
+		HMAC_cleanup(&ctx);
+		memcpy(&h->out[h->authentic_pos + 2], md, md_len);
+	}
+#else
 	u_char md[EVP_MAX_MD_SIZE];
 	u_int md_len;
 	const struct rad_server *srvp;
@@ -179,6 +202,7 @@ insert_message_authenticator(struct rad_
 		memcpy(&h->out[h->authentic_pos + 2], md, md_len);
 	}
 #endif
+#endif
 }
 
 /*
@@ -194,7 +218,11 @@ is_valid_response(struct rad_handle *h,
 	const struct rad_server *srvp;
 	int len;
 #ifdef WITH_SSL
+#if OPENSSL_VERSION_NUMBER < 0x1010000fL
+	HMAC_CTX hctx;
+#else
 	HMAC_CTX *hctx;
+#endif
 	u_char resp[MSGSIZE], md[EVP_MAX_MD_SIZE];
 	u_int md_len;
 	int pos;
@@ -230,6 +258,40 @@ is_valid_response(struct rad_handle *h,
 	 * For non accounting responses check the message authenticator,
 	 * if any.
 	 */
+#if OPENSSL_VERSION_NUMBER < 0x1010000fL
+	if (h->in[POS_CODE] != RAD_ACCOUNTING_RESPONSE) {
+
+		memcpy(resp, h->in, MSGSIZE);
+		pos = POS_ATTRS;
+
+		/* Search and verify the Message-Authenticator */
+		while (pos < len - 2) {
+
+			if (h->in[pos] == RAD_MESSAGE_AUTHENTIC) {
+				/* zero fill the Message-Authenticator */
+				memset(&resp[pos + 2], 0, MD5_DIGEST_LENGTH);
+
+				HMAC_CTX_init(&hctx);
+				HMAC_Init(&hctx, srvp->secret,
+				    strlen(srvp->secret), EVP_md5());
+				HMAC_Update(&hctx, &h->in[POS_CODE],
+				    POS_AUTH - POS_CODE);
+				HMAC_Update(&hctx, &h->out[POS_AUTH],
+				    LEN_AUTH);
+				HMAC_Update(&hctx, &resp[POS_ATTRS],
+				    h->in_len - POS_ATTRS);
+				HMAC_Final(&hctx, md, &md_len);
+				HMAC_CTX_cleanup(&hctx);
+				HMAC_cleanup(&hctx);
+				if (memcmp(md, &h->in[pos + 2],
+				    MD5_DIGEST_LENGTH) != 0)
+					return 0;
+				break;
+			}
+			pos += h->in[pos + 1];
+		}
+	}
+#else
 	if (h->in[POS_CODE] != RAD_ACCOUNTING_RESPONSE) {
 
 		memcpy(resp, h->in, MSGSIZE);
@@ -265,6 +327,7 @@ is_valid_response(struct rad_handle *h,
 		HMAC_CTX_free(hctx);
 	}
 #endif
+#endif
 	return 1;
 }
 
@@ -279,7 +342,11 @@ is_valid_request(struct rad_handle *h)
 	const struct rad_server *srvp;
 	int len;
 #ifdef WITH_SSL
+#if OPENSSL_VERSION_NUMBER < 0x1010000fL
+	HMAC_CTX hctx;
+#else
 	HMAC_CTX *hctx;
+#endif
 	u_char resp[MSGSIZE], md[EVP_MAX_MD_SIZE];
 	u_int md_len;
 	int pos;
@@ -309,6 +376,32 @@ is_valid_request(struct rad_handle *h)
 
 #ifdef WITH_SSL
 	/* Search and verify the Message-Authenticator */
+#if OPENSSL_VERSION_NUMBER < 0x1010000fL
+	pos = POS_ATTRS;
+	while (pos < len - 2) {
+		if (h->in[pos] == RAD_MESSAGE_AUTHENTIC) {
+			memcpy(resp, h->in, MSGSIZE);
+			/* zero fill the Request-Authenticator */
+			if (h->in[POS_CODE] != RAD_ACCESS_REQUEST)
+				memset(&resp[POS_AUTH], 0, LEN_AUTH);
+			/* zero fill the Message-Authenticator */
+			memset(&resp[pos + 2], 0, MD5_DIGEST_LENGTH);
+
+			HMAC_CTX_init(&hctx);
+			HMAC_Init(&hctx, srvp->secret,
+			    strlen(srvp->secret), EVP_md5());
+			HMAC_Update(&hctx, resp, h->in_len);
+			HMAC_Final(&hctx, md, &md_len);
+			HMAC_CTX_cleanup(&hctx);
+			HMAC_cleanup(&hctx);
+			if (memcmp(md, &h->in[pos + 2],
+			    MD5_DIGEST_LENGTH) != 0)
+				return (0);
+			break;
+		}
+		pos += h->in[pos + 1];
+	}
+#else
 	pos = POS_ATTRS;
 	hctx = HMAC_CTX_new();
 	while (pos < len - 2) {
@@ -336,6 +429,7 @@ is_valid_request(struct rad_handle *h)
 	}
 	HMAC_CTX_free(hctx);
 #endif
+#endif
 	return (1);
 }
 
