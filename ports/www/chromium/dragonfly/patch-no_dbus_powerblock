--- device/power_save_blocker/BUILD.gn.orig	2016-11-10 22:02:14.000000000 +0200
+++ device/power_save_blocker/BUILD.gn
@@ -44,10 +44,15 @@ component("power_save_blocker") {
   if (is_chromeos || !use_ozone) {
     sources -= [ "power_save_blocker_ozone.cc" ]
   }
-  if (is_chromeos || !use_x11 || !use_dbus) {
+  if ((is_chromeos || !use_x11 || !use_dbus) && !(is_bsd && !use_dbus)) {
     sources -= [ "power_save_blocker_x11.cc" ]
   }
 
+  # Provide a dummy NO_API for linkage.
+  if (is_bsd && !use_dbus) {
+    defines += [ "DEVICE_POWER_SAVE_BLOCKER_DUMMY" ]
+  }
+
   if (is_android) {
     deps += [
       ":jni_headers",
--- device/power_save_blocker/power_save_blocker_x11.cc.orig	2016-11-10 22:02:14.000000000 +0200
+++ device/power_save_blocker/power_save_blocker_x11.cc
@@ -28,20 +28,25 @@
 #include "base/memory/singleton.h"
 #include "base/nix/xdg_util.h"
 #include "base/synchronization/lock.h"
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
 #include "dbus/bus.h"
 #include "dbus/message.h"
 #include "dbus/object_path.h"
 #include "dbus/object_proxy.h"
+#endif
 #include "ui/gfx/x/x11_types.h"
 
 namespace {
 
 enum DBusAPI {
   NO_API,           // Disable. No supported API available.
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
   GNOME_API,        // Use the GNOME API. (Supports more features.)
   FREEDESKTOP_API,  // Use the FreeDesktop API, for KDE4, KDE5, and XFCE.
+#endif
 };
 
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
 // Inhibit flags defined in the org.gnome.SessionManager interface.
 // Can be OR'd together and passed as argument to the Inhibit() method
 // to specify which power management features we want to suspend.
@@ -66,6 +71,7 @@ const char kFreeDesktopAPIPowerObjectPat
 const char kFreeDesktopAPIScreenServiceName[] = "org.freedesktop.ScreenSaver";
 const char kFreeDesktopAPIScreenInterfaceName[] = "org.freedesktop.ScreenSaver";
 const char kFreeDesktopAPIScreenObjectPath[] = "/org/freedesktop/ScreenSaver";
+#endif
 
 }  // namespace
 
@@ -108,10 +114,12 @@ class PowerSaveBlocker::Delegate
   void ApplyBlock();
   void RemoveBlock();
 
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
   // Asynchronous callback functions for ApplyBlock and RemoveBlock.
   // Functions do not receive ownership of |response|.
   void ApplyBlockFinished(dbus::Response* response);
   void RemoveBlockFinished(dbus::Response* response);
+#endif
 
   // Wrapper for XScreenSaverSuspend. Checks whether the X11 Screen Saver
   // Extension is available first. If it isn't, this is a no-op.
@@ -155,7 +163,9 @@ class PowerSaveBlocker::Delegate
   // after ApplyBlock() has finished.
   bool enqueue_unblock_;
 
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
   scoped_refptr<dbus::Bus> bus_;
+#endif
 
   // The cookie that identifies our inhibit request,
   // or 0 if there is no active inhibit request.
@@ -234,9 +244,14 @@ void PowerSaveBlocker::Delegate::InitOnU
 }
 
 bool PowerSaveBlocker::Delegate::ShouldBlock() const {
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
   return freedesktop_only_ ? api_ == FREEDESKTOP_API : api_ != NO_API;
+#else
+  return false;
+#endif
 }
 
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
 void PowerSaveBlocker::Delegate::ApplyBlock() {
   DCHECK(blocking_task_runner_->RunsTasksOnCurrentThread());
   DCHECK(!bus_);  // ApplyBlock() should only be called once.
@@ -411,6 +426,7 @@ void PowerSaveBlocker::Delegate::RemoveB
   bus_->ShutdownAndBlock();
   bus_ = nullptr;
 }
+#endif
 
 void PowerSaveBlocker::Delegate::XSSSuspendSet(bool suspend) {
   DCHECK(ui_task_runner_->RunsTasksOnCurrentThread());
@@ -452,6 +468,7 @@ bool PowerSaveBlocker::Delegate::XSSAvai
 
 DBusAPI PowerSaveBlocker::Delegate::SelectAPI() {
   DCHECK(ui_task_runner_->RunsTasksOnCurrentThread());
+#ifndef DEVICE_POWER_SAVE_BLOCKER_DUMMY
   std::unique_ptr<base::Environment> env(base::Environment::Create());
   switch (base::nix::GetDesktopEnvironment(env.get())) {
     case base::nix::DESKTOP_ENVIRONMENT_GNOME:
@@ -470,6 +487,7 @@ DBusAPI PowerSaveBlocker::Delegate::Sele
       // Not supported.
       break;
   }
+#endif
   return NO_API;
 }
 
