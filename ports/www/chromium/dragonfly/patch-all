diff --git PRESUBMIT.py PRESUBMIT.py
index 06f525f4582..a8cf8b152d1 100644
--- PRESUBMIT.py
+++ PRESUBMIT.py
@@ -1257,6 +1257,7 @@ _VALID_OS_MACROS = (
     'OS_CAT',       # For testing.
     'OS_CHROMEOS',
     'OS_CYGWIN',    # third_party code.
+    'OS_DRAGONFLY', 
     'OS_FREEBSD',
     'OS_FUCHSIA',
     'OS_IOS',
@@ -4277,6 +4278,7 @@ def _DidYouMeanOSMacro(bad_macro):
     return {'A': 'OS_ANDROID',
             'B': 'OS_BSD',
             'C': 'OS_CHROMEOS',
+            'D': 'OS_DRAGONFLY',
             'F': 'OS_FREEBSD',
             'L': 'OS_LINUX',
             'M': 'OS_MACOSX',
diff --git base/base_paths_posix.cc base/base_paths_posix.cc
index 00a15696cac..a16ceb7ee21 100644
--- base/base_paths_posix.cc
+++ base/base_paths_posix.cc
@@ -24,7 +24,7 @@
 #include "base/process/process_metrics.h"
 #include "build/build_config.h"
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/param.h>
 #include <sys/sysctl.h>
 #elif defined(OS_SOLARIS) || defined(OS_AIX)
@@ -45,7 +45,7 @@ bool PathProviderPosix(int key, FilePath* result) {
       }
       *result = bin_dir;
       return true;
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
       int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1 };
       char bin_dir[PATH_MAX + 1];
       size_t length = sizeof(bin_dir);
diff --git base/debug/debugger_posix.cc base/debug/debugger_posix.cc
index bd39c20a7f4..0b92d9ed48a 100644
--- base/debug/debugger_posix.cc
+++ base/debug/debugger_posix.cc
@@ -35,7 +35,7 @@
 #include <sys/sysctl.h>
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/user.h>
 #endif
 
@@ -119,6 +119,8 @@ bool BeingDebugged() {
   is_set = true;
 #if defined(OS_FREEBSD)
   being_debugged = (info->ki_flag & P_TRACED) != 0;
+#elif defined(OS_DRAGONFLY)
+  being_debugged = (info->kp_flags & P_TRACED) != 0;
 #elif defined(OS_BSD)
   being_debugged = (info->p_flag & P_TRACED) != 0;
 #else
diff --git base/debug/proc_maps_linux.cc base/debug/proc_maps_linux.cc
index ef59ef1e57e..8281ea7edad 100644
--- base/debug/proc_maps_linux.cc
+++ base/debug/proc_maps_linux.cc
@@ -54,6 +54,11 @@ bool ReadProcMaps(std::string* proc_maps) {
   // seq_file only writes out a page-sized amount on each call. Refer to header
   // file for details.
   const long kReadSize = sysconf(_SC_PAGESIZE);
+#if defined(OS_BSD)
+  const char *MapPath = "/proc/curproc/map";
+#else
+  const char *MapPath = "/proc/self/maps";
+#endif
 
   base::ScopedFD fd(HANDLE_EINTR(open(kProcSelfMapsPath, O_RDONLY)));
   if (!fd.is_valid()) {
@@ -157,9 +162,16 @@ bool ParseProcMaps(const std::string& input,
     // The final %n term captures the offset in the input string, which is used
     // to determine the path name. It *does not* increment the return value.
     // Refer to man 3 sscanf for details.
+#if defined(OS_BSD)
+    if (sscanf(line, "%p %p %d %d %p %s %d %d 0x%04x %s %s %s %n",
+       &region.start, &region.end, &resident, &privateresident, &obj,
+       permissions, &ref_count, &shadow_count, &flags, e_eflags1,
+       e_eflags2, type, &path_index) < 12) {
+#else
     if (sscanf(line, "%" SCNxPTR "-%" SCNxPTR " %4c %llx %hhx:%hhx %ld %n",
                &region.start, &region.end, permissions, &region.offset,
                &dev_major, &dev_minor, &inode, &path_index) < 7) {
+#endif
       DPLOG(WARNING) << "sscanf failed for line: " << line;
       return false;
     }
diff --git base/debug/stack_trace_posix.cc base/debug/stack_trace_posix.cc
index 6facc40099a..58c31322fe7 100644
--- base/debug/stack_trace_posix.cc
+++ base/debug/stack_trace_posix.cc
@@ -603,7 +603,12 @@ class SandboxSymbolizeHelper {
   // process memory.
   void SetBaseAddressesForMemoryRegions() {
     base::ScopedFD mem_fd(
+#if defined(OS_BSD)
+        HANDLE_EINTR(open("/proc/curproc/mem", O_RDONLY | O_CLOEXEC)));
+#else
         HANDLE_EINTR(open("/proc/self/mem", O_RDONLY | O_CLOEXEC)));
+#endif
+
     if (!mem_fd.is_valid())
       return;
 
@@ -656,17 +661,26 @@ class SandboxSymbolizeHelper {
   // Parses /proc/self/maps in order to compile a list of all object file names
   // for the modules that are loaded in the current process.
   // Returns true on success.
+  // XXX (tuxillo) needs review, not complete?
   bool CacheMemoryRegions() {
     // Reads /proc/self/maps.
     std::string contents;
     if (!ReadProcMaps(&contents)) {
+#if defined(OS_BSD)
+      LOG(ERROR) << "Failed to read /proc/curproc/map";
+#else
       LOG(ERROR) << "Failed to read /proc/self/maps";
+#endif
       return false;
     }
 
     // Parses /proc/self/maps.
     if (!ParseProcMaps(contents, &regions_)) {
+#if defined(OS_BSD)
+      LOG(ERROR) << "Failed to parse the contents of /proc/curproc/map";
+#else
       LOG(ERROR) << "Failed to parse the contents of /proc/self/maps";
+#endif
       return false;
     }
 
diff --git base/files/file_path_watcher_kqueue.h base/files/file_path_watcher_kqueue.h
index 0edee3f0f1b..51239ca6f4b 100644
--- base/files/file_path_watcher_kqueue.h
+++ base/files/file_path_watcher_kqueue.h
@@ -5,12 +5,19 @@
 #ifndef BASE_FILES_FILE_PATH_WATCHER_KQUEUE_H_
 #define BASE_FILES_FILE_PATH_WATCHER_KQUEUE_H_
 
-#ifdef __FreeBSD__
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/stdint.h>
 #include <sys/types.h>
 #endif
+
+#ifdef __DragonFly__
+// XXX for struct klist visibility in process_handle_dragonfly.cc through <sys/eventvar.h>
+#define _KERNEL_STRUCTURES // for later inclusion for <sys/user.h> in gen/foo*jumbo*.cc
+#endif
+
 #include <sys/event.h>
 
+
 #include <memory>
 #include <vector>
 
diff --git base/message_loop/message_loop_task_runner.cc base/message_loop/message_loop_task_runner.cc
new file mode 100644
index 00000000000..72989b078cb
--- /dev/null
+++ base/message_loop/message_loop_task_runner.cc
@@ -0,0 +1,185 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/message_loop/message_loop_task_runner.h"
+
+#include <utility>
+
+#include "base/location.h"
+#include "base/logging.h"
+#include "base/metrics/histogram_macros.h"
+#include "build/build_config.h"
+
+namespace base {
+namespace internal {
+
+namespace {
+
+#if DCHECK_IS_ON()
+// Delays larger than this are often bogus, and a warning should be emitted in
+// debug builds to warn developers.  http://crbug.com/450045
+constexpr TimeDelta kTaskDelayWarningThreshold = TimeDelta::FromDays(14);
+#endif
+
+TimeTicks CalculateDelayedRuntime(const Location& from_here, TimeDelta delay) {
+  DLOG_IF(WARNING, delay > kTaskDelayWarningThreshold)
+      << "Requesting super-long task delay period of " << delay.InSeconds()
+      << " seconds from here: " << from_here.ToString();
+
+  DCHECK_GE(delay, TimeDelta()) << "delay should not be negative";
+
+  return delay > TimeDelta() ? TimeTicks::Now() + delay : TimeTicks();
+}
+
+}  // namespace
+
+MessageLoopTaskRunner::MessageLoopTaskRunner(
+    std::unique_ptr<SequencedTaskSource::Observer> task_source_observer)
+    : task_source_observer_(std::move(task_source_observer)) {}
+
+void MessageLoopTaskRunner::BindToCurrentThread() {
+  AutoLock lock(valid_thread_id_lock_);
+  DCHECK_EQ(kInvalidThreadId, valid_thread_id_);
+  valid_thread_id_ = PlatformThread::CurrentId();
+}
+
+void MessageLoopTaskRunner::Shutdown() {
+  AutoLock lock(incoming_queue_lock_);
+  accept_new_tasks_ = false;
+}
+
+bool MessageLoopTaskRunner::PostDelayedTask(const Location& from_here,
+                                            OnceClosure task,
+                                            base::TimeDelta delay) {
+  return AddToIncomingQueue(from_here, std::move(task), delay,
+                            Nestable::kNestable);
+}
+
+bool MessageLoopTaskRunner::PostNonNestableDelayedTask(
+    const Location& from_here,
+    OnceClosure task,
+    base::TimeDelta delay) {
+  return AddToIncomingQueue(from_here, std::move(task), delay,
+                            Nestable::kNonNestable);
+}
+
+bool MessageLoopTaskRunner::RunsTasksInCurrentSequence() const {
+  AutoLock lock(valid_thread_id_lock_);
+  return valid_thread_id_ == PlatformThread::CurrentId();
+}
+
+PendingTask MessageLoopTaskRunner::TakeTask() {
+  // Must be called on execution sequence, unless clearing tasks from an unbound
+  // MessageLoop.
+  DCHECK(RunsTasksInCurrentSequence() || valid_thread_id_ == kInvalidThreadId);
+
+  // HasTasks() will reload the queue if necessary (there should always be
+  // pending tasks by contract).
+  const bool has_tasks = HasTasks();
+  DCHECK(has_tasks);
+
+  PendingTask pending_task = std::move(outgoing_queue_.front());
+  outgoing_queue_.pop();
+  return pending_task;
+}
+
+bool MessageLoopTaskRunner::HasTasks() {
+  // Must be called on execution sequence, unless clearing tasks from an unbound
+  // MessageLoop.
+  DCHECK(RunsTasksInCurrentSequence() || valid_thread_id_ == kInvalidThreadId);
+
+  if (outgoing_queue_.empty()) {
+    AutoLock lock(incoming_queue_lock_);
+    incoming_queue_.swap(outgoing_queue_);
+    outgoing_queue_empty_ = outgoing_queue_.empty();
+  }
+
+  return !outgoing_queue_.empty();
+}
+
+void MessageLoopTaskRunner::InjectTask(OnceClosure task) {
+  // Must be called on execution sequence, unless clearing tasks from an unbound
+  // MessageLoop.
+  DCHECK(RunsTasksInCurrentSequence() || valid_thread_id_ == kInvalidThreadId);
+
+  bool success = this->PostTask(FROM_HERE, std::move(task));
+  DCHECK(success) << "Injected a task in a dead task runner.";
+}
+
+void MessageLoopTaskRunner::SetAddQueueTimeToTasks(bool enable) {
+  base::subtle::NoBarrier_Store(&add_queue_time_to_tasks_, enable ? 1 : 0);
+}
+
+MessageLoopTaskRunner::~MessageLoopTaskRunner() = default;
+
+bool MessageLoopTaskRunner::AddToIncomingQueue(const Location& from_here,
+                                               OnceClosure task,
+                                               TimeDelta delay,
+                                               Nestable nestable) {
+  DCHECK(task_source_observer_)
+      << "SetObserver() must be called before posting tasks";
+
+  // Use CHECK instead of DCHECK to crash earlier. See http://crbug.com/711167
+  // for details.
+  CHECK(task);
+
+  PendingTask pending_task(from_here, std::move(task),
+                           CalculateDelayedRuntime(from_here, delay), nestable);
+
+  if (base::subtle::NoBarrier_Load(&add_queue_time_to_tasks_)) {
+    if (pending_task.delayed_run_time.is_null()) {
+      pending_task.queue_time = base::TimeTicks::Now();
+    } else {
+      pending_task.queue_time = pending_task.delayed_run_time - delay;
+    }
+  }
+
+#if defined(OS_WIN) || defined(OS_DRAGONFLY)
+  // We consider the task needs a high resolution timer if the delay is
+  // more than 0 and less than 32ms. This caps the relative error to
+  // less than 50% : a 33ms wait can wake at 48ms since the default
+  // resolution on Windows is between 10 and 15ms.
+  if (delay > TimeDelta() &&
+      delay.InMilliseconds() < (2 * Time::kMinLowResolutionThresholdMs)) {
+    pending_task.is_high_res = true;
+  }
+#endif
+
+  bool did_queue_task = false;
+  bool was_empty;
+  {
+    AutoLock auto_lock(incoming_queue_lock_);
+    if (accept_new_tasks_) {
+      // Initialize the sequence number. The sequence number is used for delayed
+      // tasks (to facilitate FIFO sorting when two tasks have the same
+      // delayed_run_time value) and for identifying the task in about:tracing.
+      pending_task.sequence_num = next_sequence_num_++;
+
+      task_source_observer_->WillQueueTask(&pending_task);
+
+      was_empty = outgoing_queue_empty_ && incoming_queue_.empty();
+      incoming_queue_.push(std::move(pending_task));
+
+      did_queue_task = true;
+    }
+  }
+
+  if (!did_queue_task) {
+    // Clear the pending task outside of |incoming_queue_lock_| to prevent any
+    // chance of self-deadlock if destroying a task also posts a task to this
+    // queue.
+    pending_task.task.Reset();
+    return false;
+  }
+
+  // Let |task_source_observer_| know about the task just queued. It's important
+  // to do this outside of |incoming_queue_lock_| to avoid blocking tasks
+  // incoming from other threads on the resolution of DidQueueTask().
+  task_source_observer_->DidQueueTask(was_empty);
+  return true;
+}
+
+}  // namespace internal
+
+}  // namespace base
diff --git base/message_loop/message_pump.h base/message_loop/message_pump.h
index b8dc052a170..46da18e7eee 100644
--- base/message_loop/message_pump.h
+++ base/message_loop/message_pump.h
@@ -195,6 +195,13 @@ class BASE_EXPORT MessagePump {
 
   // Sets the timer slack to the specified value.
   virtual void SetTimerSlack(TimerSlack timer_slack);
+
+#if defined(OS_DRAGONFLY)
+  bool high_res_mode_ = false;
+  void ActivateHighResolutionTimer(bool high_res) {
+    high_res_mode_ = high_res;
+  }
+#endif
 };
 
 }  // namespace base
diff --git base/message_loop/message_pump_glib.cc base/message_loop/message_pump_glib.cc
index 0429b4e0615..a6bf2618729 100644
--- base/message_loop/message_pump_glib.cc
+++ base/message_loop/message_pump_glib.cc
@@ -6,6 +6,7 @@
 
 #include <fcntl.h>
 #include <math.h>
+#include <poll.h>
 
 #include <glib.h>
 
@@ -409,6 +410,14 @@ void MessagePumpGlib::HandleDispatch() {
   state_->next_work_info = state_->delegate->DoSomeWork();
 }
 
+_Static_assert(sizeof(GPollFD) == sizeof(pollfd),
+    "GPollFD struct size is different from pollfd struct size");
+
+static gint ppoll_wrapper(GPollFD *ufds, guint nfsd, gint timeout_) {
+  struct timespec ts = {timeout_ / 1000, (timeout_ % 1000) * 1000 * 1000};
+  return ppoll((pollfd *)ufds, nfsd, &ts, NULL);
+}
+
 void MessagePumpGlib::Run(Delegate* delegate) {
 #ifndef NDEBUG
   CheckThread(this);
@@ -436,7 +445,15 @@ void MessagePumpGlib::Run(Delegate* delegate) {
     // Don't block if we think we have more work to do.
     bool block = !more_work_is_plausible;
 
+    GPollFunc poll_func = NULL;
+    if (high_res_mode_) {
+      poll_func = g_main_context_get_poll_func(context_);
+      g_main_context_set_poll_func(context_, ppoll_wrapper);
+    }
+
     more_work_is_plausible = g_main_context_iteration(context_, block);
+    if (poll_func != NULL)
+      g_main_context_set_poll_func(context_, poll_func);
     if (state_->should_quit)
       break;
 
diff --git base/message_loop/message_pump_libevent.cc base/message_loop/message_pump_libevent.cc
index 6636e4fe7f7..dee1caccac2 100644
--- base/message_loop/message_pump_libevent.cc
+++ base/message_loop/message_pump_libevent.cc
@@ -239,7 +239,13 @@ void MessagePumpLibevent::Run(Delegate* delegate) {
         event_set(timer_event.get(), -1, 0, timer_callback, event_base_);
         event_base_set(event_base_, timer_event.get());
         event_add(timer_event.get(), &poll_tv);
-        event_base_loop(event_base_, EVLOOP_ONCE);
+        if (high_res_mode_) {
+          // XXX When high-precision kqueue event is available, this should
+          //     instead be setting a flag for the libevent2 timer-event.
+          event_base_loop(event_base_, EVLOOP_ONCE | EVLOOP_PRECISE);
+        } else {
+          event_base_loop(event_base_, EVLOOP_ONCE);
+        }
         event_del(timer_event.get());
       }
     }
diff --git base/process/launch_posix.cc base/process/launch_posix.cc
index ab15a23c928..89ff5182718 100644
--- base/process/launch_posix.cc
+++ base/process/launch_posix.cc
@@ -56,7 +56,7 @@
 #include <sys/ioctl.h>
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_BSD)
 #include <sys/event.h>
 #include <sys/ucontext.h>
 #endif
@@ -211,6 +211,8 @@ typedef std::unique_ptr<DIR, ScopedDIRClose> ScopedDIR;
 static const char kFDDir[] = "/proc/self/fd";
 #elif defined(OS_SOLARIS)
 static const char kFDDir[] = "/dev/fd";
+#elif defined(OS_DRAGONFLY)
+static const char kFDDir[] = "/dev/fd";
 #elif defined(OS_FREEBSD)
 static const char kFDDir[] = "/dev/fd";
 #elif defined(OS_OPENBSD)
diff --git base/process/process_handle_freebsd.cc base/process/process_handle_freebsd.cc
index f466c016758..8bba99e6054 100644
--- base/process/process_handle_freebsd.cc
+++ base/process/process_handle_freebsd.cc
@@ -25,7 +25,11 @@ ProcessId GetParentProcessId(ProcessHandle process) {
   if (length < sizeof(struct kinfo_proc))
     return -1;
 
+#if defined(OS_DRAGONFLY)
+  return info.kp_ppid;
+#else
   return info.ki_ppid;
+#endif
 }
 
 FilePath GetProcessExecutablePath(ProcessHandle process) {
diff --git base/process/process_iterator.h base/process/process_iterator.h
index 5519bb010f7..020abd3920d 100644
--- base/process/process_iterator.h
+++ base/process/process_iterator.h
@@ -26,7 +26,7 @@
 #include <tlhelp32.h>
 #elif defined(OS_MACOSX) || defined(OS_OPENBSD)
 #include <sys/sysctl.h>
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/user.h>
 #elif defined(OS_POSIX) || defined(OS_FUCHSIA)
 #include <dirent.h>
diff --git base/process/process_iterator_freebsd.cc base/process/process_iterator_freebsd.cc
index 2cae86ce5c0..67390708c46 100644
--- base/process/process_iterator_freebsd.cc
+++ base/process/process_iterator_freebsd.cc
@@ -30,6 +30,7 @@ ProcessIterator::ProcessIterator(const ProcessFilter* filter)
   bool done = false;
   int try_num = 1;
   const int max_tries = 10;
+  size_t num_of_kinfo_proc;
 
   do {
     size_t len = 0;
@@ -38,7 +39,7 @@ ProcessIterator::ProcessIterator(const ProcessFilter* filter)
       kinfo_procs_.resize(0);
       done = true;
     } else {
-      size_t num_of_kinfo_proc = len / sizeof(struct kinfo_proc);
+      num_of_kinfo_proc = len / sizeof(struct kinfo_proc);
       // Leave some spare room for process table growth (more could show up
       // between when we check and now)
       num_of_kinfo_proc += 16;
@@ -54,7 +55,7 @@ ProcessIterator::ProcessIterator(const ProcessFilter* filter)
         }
       } else {
         // Got the list, just make sure we're sized exactly right
-        size_t num_of_kinfo_proc = len / sizeof(struct kinfo_proc);
+        num_of_kinfo_proc = len / sizeof(struct kinfo_proc);
         kinfo_procs_.resize(num_of_kinfo_proc);
         done = true;
       }
@@ -76,11 +77,17 @@ bool ProcessIterator::CheckForNextProcess() {
   for (; index_of_kinfo_proc_ < kinfo_procs_.size(); ++index_of_kinfo_proc_) {
     size_t length;
     struct kinfo_proc kinfo = kinfo_procs_[index_of_kinfo_proc_];
+#if defined(OS_DRAGONFLY)
+    int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ARGS, kinfo.kp_pid };
+
+    if ((kinfo.kp_pid > 0) && (kinfo.kp_stat == SZOMB))
+      continue;
+#else
     int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ARGS, kinfo.ki_pid };
 
     if ((kinfo.ki_pid > 0) && (kinfo.ki_stat == SZOMB))
       continue;
-
+#endif
     data.resize(ARG_MAX);
     length = ARG_MAX;
 
@@ -100,9 +107,15 @@ bool ProcessIterator::CheckForNextProcess() {
       continue;
     }
 
+#if defined(OS_DRAGONFLY)
+    entry_.pid_ = kinfo.kp_pid;
+    entry_.ppid_ = kinfo.kp_ppid;
+    entry_.gid_ = kinfo.kp_pgid;
+#else
     entry_.pid_ = kinfo.ki_pid;
     entry_.ppid_ = kinfo.ki_ppid;
     entry_.gid_ = kinfo.ki_pgid;
+#endif
 
     size_t last_slash = data.rfind('/', exec_name_end);
     if (last_slash == std::string::npos) {
diff --git base/process/process_metrics.cc base/process/process_metrics.cc
index 429d4122ad1..02d5d21c7ff 100644
--- base/process/process_metrics.cc
+++ base/process/process_metrics.cc
@@ -100,7 +100,7 @@ std::unique_ptr<ProcessMetrics> ProcessMetrics::CreateCurrentProcessMetrics() {
 #endif  // !defined(OS_MACOSX) || defined(OS_IOS)
 }
 
-#if !defined(OS_FREEBSD) || !defined(OS_POSIX)
+#if (!defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)) || !defined(OS_POSIX)
 double ProcessMetrics::GetPlatformIndependentCPUUsage() {
   TimeDelta cumulative_cpu = GetCumulativeCPUUsage();
   TimeTicks time = TimeTicks::Now();
diff --git base/process/process_metrics.h base/process/process_metrics.h
index 8c2c3d8fb0e..932f3c1544c 100644
--- base/process/process_metrics.h
+++ base/process/process_metrics.h
@@ -244,6 +244,10 @@ class BASE_EXPORT ProcessMetrics {
 #endif  // defined(OS_MACOSX)
 #endif  // !defined(OS_IOS)
 
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
+  int fscale_;
+#endif
+
   DISALLOW_COPY_AND_ASSIGN(ProcessMetrics);
 };
 
diff --git base/process/process_metrics_freebsd.cc base/process/process_metrics_freebsd.cc
index 303d9781c32..a4ca440e380 100644
--- base/process/process_metrics_freebsd.cc
+++ base/process/process_metrics_freebsd.cc
@@ -37,7 +37,19 @@ int GetPageShift() {
 }
 
 ProcessMetrics::ProcessMetrics(ProcessHandle process)
-    : process_(process) {}
+    : process_(process) {
+#if defined(OS_DRAGONFLY)
+  size_t len = sizeof(int);
+  int val;
+
+  if (sysctlbyname("kern.fscale", &val, &len, NULL, 0) == 0) {
+    fscale_ = val;
+    return;
+  }
+#else
+  fscale_ = FSCALE;
+#endif
+}
 
 // static
 std::unique_ptr<ProcessMetrics> ProcessMetrics::CreateProcessMetrics(
@@ -46,14 +58,48 @@ std::unique_ptr<ProcessMetrics> ProcessMetrics::CreateProcessMetrics(
 }
 
 double ProcessMetrics::GetPlatformIndependentCPUUsage() {
+#if defined(__DragonFly__)
+  std::vector<kinfo_proc> kinfo_procs;
+  int mib[] = {
+    CTL_KERN, KERN_PROC, KERN_PROC_PID + KERN_PROC_FLAG_LWP, process_
+  };
+  size_t length = 0;
+  int sum, st;
+  unsigned int i;
+#else
   struct kinfo_proc info;
   int mib[] = {CTL_KERN, KERN_PROC, KERN_PROC_PID, process_};
   size_t length = sizeof(info);
+#endif
+
+#if defined(__DragonFly__)
+  if (sysctl(mib, base::size(mib), NULL, &length, NULL, 0) < 0 || length == 0)
+    return 0;
 
-  if (sysctl(mib, base::size(mib), &info, &length, NULL, 0) < 0)
+  kinfo_procs.resize(length / sizeof(struct kinfo_proc) + 1);
+  do {
+    length = kinfo_procs.size() * sizeof(struct kinfo_proc);
+    st = sysctl(mib, base::size(mib), kinfo_procs.data(), &length, NULL, 0);
+    if (st < 0) {
+      if (errno == ENOMEM) {
+        kinfo_procs.resize(length / sizeof(struct kinfo_proc) + 4);
+      } else {
+        return 0;
+      }
+    }
+  } while (st != 0);
+
+  kinfo_procs.resize(length / sizeof(struct kinfo_proc));
+  sum = 0;
+  for (i = 0; i < kinfo_procs.size(); i++)
+    sum += kinfo_procs[i].kp_lwp.kl_pctcpu;
+  return ((double)sum / fscale_) * 100.0;
+#else
+  if (sysctl(mib, base::size(mib), &info, &length, NULL, 0) < 0 || length == 0)
     return 0;
 
-  return (info.ki_pctcpu / FSCALE) * 100.0;
+  return ((double)info.ki_pctcpu / fscale_) * 100.0;
+#endif
 }
 
 TimeDelta ProcessMetrics::GetCumulativeCPUUsage() {
@@ -66,26 +112,30 @@ bool ProcessMetrics::GetIOCounters(IoCounters* io_counters) const {
 }
 
 size_t GetSystemCommitCharge() {
-  int mib[2], pagesize;
+  int pagesize;
+#if defined(OS_DRAGONFLY)
+  unsigned int mem_total, mem_free, mem_inactive;
+#else
   unsigned long mem_total, mem_free, mem_inactive;
+#endif
   size_t length = sizeof(mem_total);
 
-  if (sysctl(mib, base::size(mib), &mem_total, &length, NULL, 0) < 0)
+  if (sysctlbyname("vm.stats.vm.v_page_count", &mem_total, &length, NULL, 0) != 0)
     return 0;
 
   length = sizeof(mem_free);
-  if (sysctlbyname("vm.stats.vm.v_free_count", &mem_free, &length, NULL, 0) < 0)
+  if (sysctlbyname("vm.stats.vm.v_free_count", &mem_free, &length, NULL, 0) != 0)
     return 0;
 
   length = sizeof(mem_inactive);
   if (sysctlbyname("vm.stats.vm.v_inactive_count", &mem_inactive, &length,
-      NULL, 0) < 0) {
+      NULL, 0) != 0) {
     return 0;
   }
 
   pagesize = getpagesize();
 
-  return mem_total - (mem_free*pagesize) - (mem_inactive*pagesize);
+  return (mem_total - mem_free - mem_inactive) * pagesize;
 }
 
 int GetNumberOfThreads(ProcessHandle process) {
@@ -143,15 +193,20 @@ bool GetSystemMemoryInfo(SystemMemoryInfoKB *meminfo) {
 }
 
 int ProcessMetrics::GetOpenFdCount() const {
+#if defined(__DragonFly__)
+  return -1;
+#else
   struct kinfo_file * kif;
   int cnt;
 
+
   if ((kif = kinfo_getfile(process_, &cnt)) == NULL)
     return -1;
 
   free(kif);
 
   return cnt;
+#endif
 }
 
 int ProcessMetrics::GetOpenFdSoftLimit() const {
@@ -185,7 +240,11 @@ size_t ProcessMetrics::GetResidentSetSize() const {
   size_t rss;
 
   if (nproc > 0) {
+#if defined(__DragonFly__)
+    rss = pp->kp_vm_rssize << GetPageShift();
+#else
     rss = pp->ki_rssize << GetPageShift();
+#endif
   } else {
     rss = 0;
   }
@@ -211,9 +270,15 @@ uint64_t ProcessMetrics::GetVmSwapBytes() const {
   size_t swrss;
 
   if (nproc > 0) {
+#if defined(__DragonFly__)
+    swrss = pp->kp_vm_swrss > pp->kp_vm_rssize
+      ? (pp->kp_vm_swrss - pp->kp_vm_rssize) << GetPageShift()
+      : 0;
+#else
     swrss = pp->ki_swrss > pp->ki_rssize
       ? (pp->ki_swrss - pp->ki_rssize) << GetPageShift()
       : 0;
+#endif
   } else {
     swrss = 0;
   }
diff --git base/process/process_metrics_posix.cc base/process/process_metrics_posix.cc
index 37d5ffee238..76b7ab326b7 100644
--- base/process/process_metrics_posix.cc
+++ base/process/process_metrics_posix.cc
@@ -20,7 +20,7 @@
 
 #if defined(OS_MACOSX)
 #include <malloc/malloc.h>
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <stdlib.h>
 #else
 #include <malloc.h>
@@ -45,7 +45,7 @@ static const rlim_t kSystemDefaultMaxFds = 8192;
 static const rlim_t kSystemDefaultMaxFds = 256;
 #elif defined(OS_SOLARIS)
 static const rlim_t kSystemDefaultMaxFds = 8192;
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 static const rlim_t kSystemDefaultMaxFds = 8192;
 #elif defined(OS_NETBSD)
 static const rlim_t kSystemDefaultMaxFds = 1024;
diff --git base/profiler/register_context.h base/profiler/register_context.h
index ffb3987385e..3f256058f2f 100644
--- base/profiler/register_context.h
+++ base/profiler/register_context.h
@@ -166,7 +166,7 @@ inline uintptr_t& RegisterContextInstructionPointer(mcontext_t* context) {
 
 #endif  // #if defined(ARCH_CPU_ARM_FAMILY) && defined(ARCH_CPU_32_BITS)
 
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 
 using RegisterContext = mcontext_t;
 
diff --git base/profiler/thread_delegate_posix.cc base/profiler/thread_delegate_posix.cc
index 94f71801b5c..54bb6036b25 100644
--- base/profiler/thread_delegate_posix.cc
+++ base/profiler/thread_delegate_posix.cc
@@ -20,7 +20,7 @@ namespace {
 uintptr_t GetThreadStackBaseAddressImpl(
     SamplingProfilerThreadToken thread_token) {
   pthread_attr_t attr;
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   pthread_attr_init(&attr);
   pthread_attr_get_np(thread_token.pthread_id, &attr);
 #elif defined(OS_LINUX)
@@ -119,7 +119,7 @@ std::vector<uintptr_t*> ThreadDelegatePosix::GetRegistersToRewrite(
   return {
       // Return the set of callee-save registers per the x86-64 System V ABI
       // section 3.2.1, plus the stack pointer.
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
       reinterpret_cast<uintptr_t*>(&thread_context->mc_rbp),
       reinterpret_cast<uintptr_t*>(&thread_context->mc_rbx),
       reinterpret_cast<uintptr_t*>(&thread_context->mc_r12),
diff --git base/test/launcher/test_launcher.cc base/test/launcher/test_launcher.cc
index b1f29fc7c49..9aa2e67eada 100644
--- base/test/launcher/test_launcher.cc
+++ base/test/launcher/test_launcher.cc
@@ -1435,6 +1435,10 @@ bool TestLauncher::Init(CommandLine* command_line) {
   results_tracker_.AddGlobalTag("OS_BSD");
 #endif
 
+#if defined(OS_DRAGONFLY)
+  results_tracker_.AddGlobalTag("OS_DRAGONFLY");
+#endif
+
 #if defined(OS_FREEBSD)
   results_tracker_.AddGlobalTag("OS_FREEBSD");
 #endif
diff --git base/test/test_file_util_linux.cc base/test/test_file_util_linux.cc
index cf8b0562729..e783e10e0d0 100644
--- base/test/test_file_util_linux.cc
+++ base/test/test_file_util_linux.cc
@@ -49,7 +49,11 @@ bool EvictFileFromSystemCache(const FilePath& file) {
   ScopedFD fd(open(file.value().c_str(), O_RDONLY));
   if (!fd.is_valid())
     return false;
+#if (OS_DRAGONFLY)
+  if (fsync(fd.get()) != 0)
+#else
   if (fdatasync(fd.get()) != 0)
+#endif
     return false;
   if (posix_fadvise(fd.get(), 0, 0, POSIX_FADV_DONTNEED) != 0)
     return false;
diff --git base/third_party/cityhash/city.cc base/third_party/cityhash/city.cc
index b0d2294aabb..633df5c9007 100644
--- base/third_party/cityhash/city.cc
+++ base/third_party/cityhash/city.cc
@@ -54,7 +54,7 @@ using std::pair;
 #define bswap_32(x) BSWAP_32(x)
 #define bswap_64(x) BSWAP_64(x)
 
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 
 #include <sys/endian.h>
 #define bswap_32(x) bswap32(x)
diff --git base/third_party/libevent/event-config.h base/third_party/libevent/event-config.h
index bbd23f1d81b..3d9950cc1aa 100644
--- base/third_party/libevent/event-config.h
+++ base/third_party/libevent/event-config.h
@@ -13,7 +13,7 @@
 #include "base/third_party/libevent/android/event-config.h"
 #elif defined(__linux__)
 #include "base/third_party/libevent/linux/event-config.h"
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include "base/third_party/libevent/freebsd/event-config.h"
 #elif defined(__sun)
 #include "base/third_party/libevent/solaris/event-config.h"
diff --git base/third_party/libevent/event-internal.h base/third_party/libevent/event-internal.h
index b7f00402be5..64e07ba2f0d 100644
--- base/third_party/libevent/event-internal.h
+++ base/third_party/libevent/event-internal.h
@@ -68,6 +68,8 @@ struct event_base {
 	struct min_heap timeheap;
 
 	struct timeval tv_cache;
+
+	int is_precise;
 };
 
 /* Internal use only: Functions that might be missing from <sys/queue.h> */
diff --git base/third_party/libevent/event.c base/third_party/libevent/event.c
index 4aa326e0e46..f3d0db6adf0 100644
--- base/third_party/libevent/event.c
+++ base/third_party/libevent/event.c
@@ -165,6 +165,8 @@ event_base_new(void)
 		event_err(1, "%s: calloc", __func__);
 
 	gettime(base, &base->event_tv);
+
+	base->is_precise = 0;
 	
 	min_heap_ctor(&base->timeheap);
 	TAILQ_INIT(&base->eventqueue);
@@ -509,7 +511,11 @@ event_base_loop(struct event_base *base, int flags)
 		/* clear time cache */
 		base->tv_cache.tv_sec = 0;
 
+		if (flags & EVLOOP_PRECISE)
+			base->is_precise = 1;
 		res = evsel->dispatch(base, evbase, tv_p);
+		if (flags & EVLOOP_PRECISE)
+			base->is_precise = 0;
 
 		if (res == -1)
 			return (-1);
diff --git base/third_party/libevent/event.h base/third_party/libevent/event.h
index f0887b96163..7eb5388c145 100644
--- base/third_party/libevent/event.h
+++ base/third_party/libevent/event.h
@@ -364,6 +364,7 @@ int event_base_set(struct event_base *, struct event *);
 /*@{*/
 #define EVLOOP_ONCE	0x01	/**< Block at most once. */
 #define EVLOOP_NONBLOCK	0x02	/**< Do not block. */
+#define EVLOOP_PRECISE	0x08	/**< Try to implement more precise timeouts. */
 /*@}*/
 
 /**
diff --git base/third_party/libevent/kqueue.c base/third_party/libevent/kqueue.c
index 3c2ffd5524c..d0c4597125d 100644
--- base/third_party/libevent/kqueue.c
+++ base/third_party/libevent/kqueue.c
@@ -40,6 +40,7 @@
 #endif
 #include <sys/queue.h>
 #include <sys/event.h>
+#include <poll.h>
 #include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -54,7 +55,8 @@
 /* Some platforms apparently define the udata field of struct kevent as
  * intptr_t, whereas others define it as void*.  There doesn't seem to be an
  * easy way to tell them apart via autoconf, so we need to use OS macros. */
-#if defined(HAVE_INTTYPES_H) && !defined(__OpenBSD__) && !defined(__FreeBSD__) && !defined(__darwin__) && !defined(__APPLE__)
+#if defined(HAVE_INTTYPES_H) && !defined(__OpenBSD__) && !defined(__FreeBSD__) && !defined(__darwin__) && !defined(__APPLE__) && \
+    !defined(__DragonFly__)
 #define PTR_TO_UDATA(x)	((intptr_t)(x))
 #else
 #define PTR_TO_UDATA(x)	(x)
@@ -209,9 +211,23 @@ kq_dispatch(struct event_base *base, void *arg, struct timeval *tv)
 		ts_p = &ts;
 	}
 
-	res = kevent(kqop->kq, changes, kqop->nchanges,
-	    events, kqop->nevents, ts_p);
-	kqop->nchanges = 0;
+	if (base->is_precise && ts_p != NULL) {
+		struct timespec ts = {0, 0};
+		struct pollfd fds = {kqop->kq, POLLIN, 0};
+		res = kevent(kqop->kq, changes, kqop->nchanges, NULL, 0, &ts);
+		kqop->nchanges = 0;
+		if (res == 0) {
+			res = ppoll(&fds, 1, ts_p, NULL);
+			if (res >= 0) {
+				res = kevent(kqop->kq, NULL, 0,
+				    events, kqop->nevents, &ts);
+			}
+		}
+	} else {
+		res = kevent(kqop->kq, changes, kqop->nchanges,
+		    events, kqop->nevents, ts_p);
+		kqop->nchanges = 0;
+	}
 	if (res == -1) {
 		if (errno != EINTR) {
                         event_warn("kevent");
diff --git base/threading/platform_thread.h base/threading/platform_thread.h
index 207157d1154..eaa6fb40e54 100644
--- base/threading/platform_thread.h
+++ base/threading/platform_thread.h
@@ -38,6 +38,8 @@ typedef zx_handle_t PlatformThreadId;
 typedef mach_port_t PlatformThreadId;
 #elif defined(OS_POSIX)
 typedef pid_t PlatformThreadId;
+#elif defined(OS_DRAGONFLY)
+typedef lwpid_t PlatformThreadId;
 #endif
 
 // Used for thread checking and debugging.
diff --git base/threading/platform_thread_internal_posix.h base/threading/platform_thread_internal_posix.h
index d248fa9bfda..b6157482b2f 100644
--- base/threading/platform_thread_internal_posix.h
+++ base/threading/platform_thread_internal_posix.h
@@ -9,6 +9,9 @@
 #include "base/optional.h"
 #include "base/threading/platform_thread.h"
 #include "build/build_config.h"
+#if defined(OS_DRAGONFLY)
+#include <sys/rtprio.h>
+#endif
 
 namespace base {
 
diff --git base/threading/platform_thread_posix.cc base/threading/platform_thread_posix.cc
index 9dc6c42fff7..545e82f7e28 100644
--- base/threading/platform_thread_posix.cc
+++ base/threading/platform_thread_posix.cc
@@ -13,6 +13,10 @@
 #include <sys/types.h>
 #include <unistd.h>
 
+#if defined(OS_DRAGONFLY)
+#include <pthread_np.h>
+#endif
+
 #include <memory>
 
 #include "base/debug/activity_tracker.h"
@@ -197,6 +201,8 @@ PlatformThreadId PlatformThread::CurrentId() {
 #elif defined(OS_NACL) && !defined(__GLIBC__)
   // Pointers are 32-bits in NaCl.
   return reinterpret_cast<int32_t>(pthread_self());
+#elif defined(OS_DRAGONFLY)
+  return pthread_getthreadid_np();
 #elif defined(OS_POSIX) && defined(OS_AIX)
   return pthread_self();
 #elif defined(OS_POSIX) && !defined(OS_AIX)
diff --git base/time/time.h base/time/time.h
index 7214e000f07..6ee1e295d60 100644
--- base/time/time.h
+++ base/time/time.h
@@ -637,7 +637,9 @@ class BASE_EXPORT Time : public time_internal::TimeBase<Time> {
   CFAbsoluteTime ToCFAbsoluteTime() const;
 #endif
 
-#if defined(OS_WIN)
+#if defined(OS_DRAGONFLY)
+  static const int kMinLowResolutionThresholdMs = 20;
+#elif defined(OS_WIN)
   static Time FromFileTime(FILETIME ft);
   FILETIME ToFileTime() const;
 
diff --git build/build_config.h build/build_config.h
index d3cdd2db4a6..5c8947163e4 100644
--- build/build_config.h
+++ build/build_config.h
@@ -57,6 +57,8 @@
 #define OS_NETBSD 1
 #elif defined(__OpenBSD__)
 #define OS_OPENBSD 1
+#elif defined(__DragonFly__)
+#define OS_DRAGONFLY 1
 #elif defined(__sun)
 #define OS_SOLARIS 1
 #elif defined(__QNXNTO__)
@@ -73,7 +75,8 @@
 
 // For access to standard BSD features, use OS_BSD instead of a
 // more specific macro.
-#if defined(OS_FREEBSD) || defined(OS_NETBSD) || defined(OS_OPENBSD)
+#if defined(OS_FREEBSD) || defined(OS_NETBSD) || defined(OS_OPENBSD) || \
+    defined(OS_DRAGONFLY)
 #define OS_BSD 1
 #endif
 
@@ -82,7 +85,7 @@
 #if defined(OS_AIX) || defined(OS_ANDROID) || defined(OS_ASMJS) ||    \
     defined(OS_FREEBSD) || defined(OS_LINUX) || defined(OS_MACOSX) || \
     defined(OS_NACL) || defined(OS_NETBSD) || defined(OS_OPENBSD) ||  \
-    defined(OS_QNX) || defined(OS_SOLARIS)
+    defined(OS_QNX) || defined(OS_SOLARIS) || defined(OS_DRAGONFLY)
 #define OS_POSIX 1
 #endif
 
diff --git build/config/BUILDCONFIG.gn build/config/BUILDCONFIG.gn
index 0bf8370aefe..f8d4afaf655 100644
--- build/config/BUILDCONFIG.gn
+++ build/config/BUILDCONFIG.gn
@@ -131,10 +131,11 @@ declare_args() {
   is_official_build = false
 
   # Whether we're a traditional desktop unix.
-  is_desktop_linux = current_os == "linux" || current_os == "freebsd"
+  is_desktop_linux = current_os == "linux" || current_os == "freebsd" || current_os == "dragonfly"
 
   # Set to true when compiling with the Clang compiler.
   is_clang = current_os != "linux" || current_os == "freebsd" ||
+             current_os == "dragonfly" ||
              (current_cpu != "s390x" && current_cpu != "s390" &&
               current_cpu != "ppc64" && current_cpu != "ppc" &&
               current_cpu != "mips" && current_cpu != "mips64")
@@ -186,8 +187,8 @@ if (host_toolchain == "") {
   # TODO(dpranke): Add some sort of assert here that verifies that
   # no toolchain omitted host_toolchain from its toolchain_args().
 
-  if (host_os == "linux" || host_os == "freebsd") {
-    if (target_os != "linux" && target_os != "freebsd") {
+  if (host_os == "linux" || host_os == "freebsd" || host_os == "dragonfly") {
+    if (target_os != "linux" && target_os != "freebsd" && target_os != "dragonfly") {
       host_toolchain = "//build/toolchain/linux:clang_$host_cpu"
     } else if (is_clang) {
       host_toolchain = "//build/toolchain/linux:clang_$host_cpu"
@@ -224,7 +225,7 @@ if (target_os == "android") {
   assert(host_os == "linux" || host_os == "mac",
          "Android builds are only supported on Linux and Mac hosts.")
   _default_toolchain = "//build/toolchain/android:android_clang_$target_cpu"
-} else if (target_os == "chromeos" || target_os == "linux" || target_os == "freebsd") {
+} else if (target_os == "chromeos" || target_os == "linux" || target_os == "freebsd" || target_os == "dragonfly") {
   # See comments in build/toolchain/cros/BUILD.gn about board compiles.
   if (is_clang) {
     _default_toolchain = "//build/toolchain/linux:clang_$target_cpu"
@@ -288,11 +289,11 @@ is_android = current_os == "android"
 is_chromeos = current_os == "chromeos"
 is_fuchsia = current_os == "fuchsia"
 is_ios = current_os == "ios"
-is_linux = current_os == "chromeos" || current_os == "linux" || current_os == "freebsd"
+is_linux = current_os == "chromeos" || current_os == "linux" || current_os == "freebsd" || current_os == "dragonfly"
 is_mac = current_os == "mac"
 is_nacl = current_os == "nacl"
 is_win = current_os == "win" || current_os == "winuwp"
-is_bsd = current_os == "freebsd"
+is_bsd = current_os == "freebsd" || current_os == "dragonfly"
 
 is_posix = !is_win && !is_fuchsia
 
diff --git build/config/linux/pkg-config.py build/config/linux/pkg-config.py
index a3f313a2db6..28e6fcb1bd7 100755
--- build/config/linux/pkg-config.py
+++ build/config/linux/pkg-config.py
@@ -62,7 +62,7 @@ def SetConfigPath(options):
   if "linux" in sys.platform:
     libdir = sysroot + '/libdata/' + options.system_libdir + '/pkgconfig'
     libdir += ':' + sysroot + '/usr/share/pkgconfig'
-  elif "bsd" in sys.platform:
+  elif ("bsd" in sys.platform) or ("dragonfly" in sys.platform):
     libdir = sysroot + '/libdata/pkgconfig'
     libdir += ':' + '/usr/libdata/pkgconfig'
   os.environ['PKG_CONFIG_LIBDIR'] = libdir
@@ -113,7 +113,7 @@ def main():
   # If this is run on non-Linux platforms, just return nothing and indicate
   # success. This allows us to "kind of emulate" a Linux build from other
   # platforms.
-  if "bsd" not in sys.platform:
+  if ("bsd" not in sys.platform) and ("dragonfly" not in sys.platform):
     print("[[],[],[],[],[]]")
     return 0
 
diff --git build/landmine_utils.py build/landmine_utils.py
index a3f21ff1b83..1c9c8f5e01d 100644
--- build/landmine_utils.py
+++ build/landmine_utils.py
@@ -11,7 +11,7 @@ def IsWindows():
 
 
 def IsLinux():
-  return sys.platform.startswith(('linux', 'freebsd', 'netbsd', 'openbsd'))
+  return sys.platform.startswith(('linux', 'freebsd', 'netbsd', 'openbsd', 'dragonfly'))
 
 
 def IsMac():
diff --git build/toolchain/gcc_toolchain.gni build/toolchain/gcc_toolchain.gni
index f1f1fc23710..3f9d69741d8 100644
--- build/toolchain/gcc_toolchain.gni
+++ build/toolchain/gcc_toolchain.gni
@@ -325,7 +325,7 @@ template("gcc_toolchain") {
       } else {
         rspfile = "{{output}}.rsp"
         rspfile_content = "{{inputs}}"
-        command = "\"$ar\" {{arflags}} -r -c -s -D {{output}} @\"$rspfile\""
+        command = "\"$ar\" {{arflags}} rcsD {{output}} @\"$rspfile\""
       }
 
       # Remove the output file first so that ar doesn't try to modify the
@@ -583,13 +583,12 @@ template("clang_toolchain") {
 
   gcc_toolchain(target_name) {
     if (is_bsd) {
-      prefix = "/usr/local/bin"
-      cc = "cc"
-      cxx = "c++"
+      cc = "clang60"
+      cxx = "clang++60"
       ld = cxx
       readelf = "readelf"
-      ar = "${prefix}/ar"
-      nm = "${toolprefix}nm"
+      ar = "${toolprefix}llvm-ar60"
+      nm = "${toolprefix}llvm-nm60"
     } else {
       prefix = rebase_path("$clang_base_path/bin", root_build_dir)
       cc = "$prefix/clang"
diff --git build/toolchain/get_concurrent_links.py build/toolchain/get_concurrent_links.py
index d91e04d9447..59b381bacee 100644
--- build/toolchain/get_concurrent_links.py
+++ build/toolchain/get_concurrent_links.py
@@ -56,6 +56,14 @@ def _GetTotalMemoryInBytes():
       return max(1, avail_bytes / (1 * (2 ** 30)))  # total / 4GB
     except Exception:
       return 1
+  elif sys.platform.startswith('dragonfly'):
+    try:
+      avail_bytes = int(subprocess.check_output(['sysctl', '-n', 'hw.physmem']))
+      # With -fuse-lld it doesn't take a lot of ram, feel free to change that
+      # 1 * ... to needed amount
+      return max(1, avail_bytes / (1 * (2 ** 30)))  # total / 4GB
+    except Exception:
+      return 1
   # TODO(scottmg): Implement this for other platforms.
   return 0
 
diff --git buildtools/third_party/libc++/trunk/test/support/filesystem_dynamic_test_helper.py buildtools/third_party/libc++/trunk/test/support/filesystem_dynamic_test_helper.py
index 07895827497..42ffb4d5ccb 100644
--- buildtools/third_party/libc++/trunk/test/support/filesystem_dynamic_test_helper.py
+++ buildtools/third_party/libc++/trunk/test/support/filesystem_dynamic_test_helper.py
@@ -6,7 +6,7 @@ import stat
 # Ensure that this is being run on a specific platform
 assert sys.platform.startswith('linux') or sys.platform.startswith('darwin') \
     or sys.platform.startswith('cygwin') or sys.platform.startswith('freebsd') \
-    or sys.platform.startswith('netbsd')
+    or sys.platform.startswith('netbsd') or sys.platform.startswith('dragonfly')
 
 def env_path():
     ep = os.environ.get('LIBCXX_FILESYSTEM_DYNAMIC_TEST_ROOT')
diff --git buildtools/third_party/libc++/trunk/utils/google-benchmark/src/internal_macros.h buildtools/third_party/libc++/trunk/utils/google-benchmark/src/internal_macros.h
index 5dbf4fd2752..afb3aa15dba 100644
--- buildtools/third_party/libc++/trunk/utils/google-benchmark/src/internal_macros.h
+++ buildtools/third_party/libc++/trunk/utils/google-benchmark/src/internal_macros.h
@@ -52,6 +52,8 @@
       #define BENCHMARK_OS_IOS 1
     #endif
   #endif
+#elif defined(__DragonFly__)
+  #define BENCHMARK_OS_DRAGONFLY 1
 #elif defined(__FreeBSD__)
   #define BENCHMARK_OS_FREEBSD 1
 #elif defined(__NetBSD__)
diff --git buildtools/third_party/libc++/trunk/utils/google-benchmark/src/sysinfo.cc buildtools/third_party/libc++/trunk/utils/google-benchmark/src/sysinfo.cc
index c0c07e5e62a..551cd5662b3 100644
--- buildtools/third_party/libc++/trunk/utils/google-benchmark/src/sysinfo.cc
+++ buildtools/third_party/libc++/trunk/utils/google-benchmark/src/sysinfo.cc
@@ -29,7 +29,8 @@
 #include <sys/types.h>  // this header must be included before 'sys/sysctl.h' to avoid compilation error on FreeBSD
 #include <unistd.h>
 #if defined BENCHMARK_OS_FREEBSD || defined BENCHMARK_OS_MACOSX || \
-    defined BENCHMARK_OS_NETBSD || defined BENCHMARK_OS_OPENBSD
+    defined BENCHMARK_OS_NETBSD || defined BENCHMARK_OS_OPENBSD || \
+    defined BENCHMARK_OS_DRAGONFLY
 #define BENCHMARK_HAS_SYSCTL
 #include <sys/sysctl.h>
 #endif
@@ -546,6 +547,8 @@ double GetCPUCyclesPerSecond() {
   constexpr auto* FreqStr =
 #if defined(BENCHMARK_OS_FREEBSD) || defined(BENCHMARK_OS_NETBSD)
       "machdep.tsc_freq";
+#elif defined BENCHMARK_OS_DRAGONFLY
+      "hw.tsc_frequency";
 #elif defined BENCHMARK_OS_OPENBSD
       "hw.cpuspeed";
 #else
@@ -611,7 +614,7 @@ double GetCPUCyclesPerSecond() {
 std::vector<double> GetLoadAvg() {
 #if defined BENCHMARK_OS_FREEBSD || defined(BENCHMARK_OS_LINUX) || \
     defined BENCHMARK_OS_MACOSX || defined BENCHMARK_OS_NETBSD ||  \
-    defined BENCHMARK_OS_OPENBSD
+    defined BENCHMARK_OS_OPENBSD || defined BENCHMARK_OS_DRAGONFLY
   constexpr int kMaxSamples = 3;
   std::vector<double> res(kMaxSamples, 0.0);
   const int nelem = getloadavg(res.data(), kMaxSamples);
diff --git buildtools/third_party/libc++/trunk/utils/google-benchmark/src/timers.cc buildtools/third_party/libc++/trunk/utils/google-benchmark/src/timers.cc
index 7613ff92c6e..fc0e9fa3e8e 100644
--- buildtools/third_party/libc++/trunk/utils/google-benchmark/src/timers.cc
+++ buildtools/third_party/libc++/trunk/utils/google-benchmark/src/timers.cc
@@ -28,7 +28,7 @@
 #include <sys/time.h>
 #include <sys/types.h>  // this header must be included before 'sys/sysctl.h' to avoid compilation error on FreeBSD
 #include <unistd.h>
-#if defined BENCHMARK_OS_FREEBSD || defined BENCHMARK_OS_MACOSX
+#if defined BENCHMARK_OS_FREEBSD || defined BENCHMARK_OS_MACOSX || defined BENCHMARK_OS_DRAGONFLY
 #include <sys/sysctl.h>
 #endif
 #if defined(BENCHMARK_OS_MACOSX)
diff --git chrome/browser/apps/platform_apps/api/music_manager_private/device_id_linux.cc chrome/browser/apps/platform_apps/api/music_manager_private/device_id_linux.cc
index e051f2eb3c4..65118b81d35 100644
--- chrome/browser/apps/platform_apps/api/music_manager_private/device_id_linux.cc
+++ chrome/browser/apps/platform_apps/api/music_manager_private/device_id_linux.cc
@@ -4,7 +4,7 @@
 
 #include "chrome/browser/apps/platform_apps/api/music_manager_private/device_id.h"
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/types.h>
 #include <net/if_dl.h>
 #endif
@@ -111,7 +111,7 @@ class MacAddressProcessor {
                         const char* const prefixes[],
                         size_t prefixes_count) {
     const int MAC_LENGTH = 6;
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
     struct ifaddrs *ifap, *ifinfo;
 #else
     struct ifreq ifinfo;
@@ -119,7 +119,7 @@ class MacAddressProcessor {
 
     memset(&ifinfo, 0, sizeof(ifinfo));
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
     int result = getifaddrs(&ifap);
 
     if (result != 0)
@@ -157,7 +157,7 @@ class MacAddressProcessor {
     if (!is_valid_mac_address_.Run(mac_address, MAC_LENGTH))
       return true;
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
     if (!IsValidPrefix(ifinfo->ifa_name, prefixes, prefixes_count))
       return true;
 #else
diff --git chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.cc chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.cc
index 309dc7222ca..fdb481eb144 100644
--- chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.cc
+++ chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.cc
@@ -346,6 +346,8 @@ data_reduction_proxy::Client DataReductionProxyChromeSettings::GetClient() {
   return data_reduction_proxy::Client::CHROME_LINUX;
 #elif defined(OS_WIN)
   return data_reduction_proxy::Client::CHROME_WINDOWS;
+#elif defined(OS_DRAGONFLY)
+  return data_reduction_proxy::Client::CHROME_DRAGONFLY;
 #elif defined(OS_FREEBSD)
   return data_reduction_proxy::Client::CHROME_FREEBSD;
 #elif defined(OS_OPENBSD)
diff --git chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
index 43fa0c27e1c..43c21f75de8 100644
--- chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
+++ chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
@@ -301,6 +301,8 @@ bool ChromeRuntimeAPIDelegate::GetPlatformInfo(PlatformInfo* info) {
     info->os = extensions::api::runtime::PLATFORM_OS_LINUX;
   } else if (strcmp(os, "freebsd") == 0) {
     info->os = extensions::api::runtime::PLATFORM_OS_FREEBSD;
+  } else if (strcmp(os, "dragonfly") == 0) {
+    info->os = extensions::api::runtime::PLATFORM_OS_DRAGONFLY;
   } else if (strcmp(os, "openbsd") == 0) {
     info->os = extensions::api::runtime::PLATFORM_OS_OPENBSD;
   } else {
diff --git chrome/browser/media/webrtc/webrtc_log_uploader.cc chrome/browser/media/webrtc/webrtc_log_uploader.cc
index 123f7ac400d..e4b87b79f6a 100644
--- chrome/browser/media/webrtc/webrtc_log_uploader.cc
+++ chrome/browser/media/webrtc/webrtc_log_uploader.cc
@@ -360,6 +360,8 @@ void WebRtcLogUploader::SetupMultipart(
   const char product[] = "Chrome_ChromeOS";
 #elif defined(OS_FREEBSD)
   const char product[] = "Chrome_FreeBSD";
+#elif defined(OS_DRAGONFLY)
+  const char product[] = "Chrome_DragonFly";
 #else
 #error Platform not supported.
 #endif
diff --git chrome/browser/media_galleries/fileapi/mtp_device_map_service.cc chrome/browser/media_galleries/fileapi/mtp_device_map_service.cc
index 654fc7d9567..1a19aa7cf37 100644
--- chrome/browser/media_galleries/fileapi/mtp_device_map_service.cc
+++ chrome/browser/media_galleries/fileapi/mtp_device_map_service.cc
@@ -39,7 +39,7 @@ void MTPDeviceMapService::RegisterMTPFileSystem(
     // Note that this initializes the delegate asynchronously, but since
     // the delegate will only be used from the IO thread, it is guaranteed
     // to be created before use of it expects it to be there.
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
     CreateMTPDeviceAsyncDelegate(
         device_location, read_only,
         base::Bind(&MTPDeviceMapService::AddAsyncDelegate,
diff --git chrome/browser/policy/policy_prefs_browsertest.cc chrome/browser/policy/policy_prefs_browsertest.cc
index e3587fd3228..546ceb10935 100644
--- chrome/browser/policy/policy_prefs_browsertest.cc
+++ chrome/browser/policy/policy_prefs_browsertest.cc
@@ -252,6 +252,8 @@ class PolicyTestCase {
     const std::string os("linux");
 #elif defined(OS_FREEBSD)
     const std::string os("freebsd");
+#elif defined(OS_DRAGONFLY)
+    const std::string os("dragonfly");
 #else
 #error "Unknown platform"
 #endif
diff --git chrome/browser/tracing/crash_service_uploader.cc chrome/browser/tracing/crash_service_uploader.cc
index 9fff680b631..5d22391e689 100644
--- chrome/browser/tracing/crash_service_uploader.cc
+++ chrome/browser/tracing/crash_service_uploader.cc
@@ -162,6 +162,8 @@ void TraceCrashServiceUploader::DoCompressOnBackgroundThread(
   const char product[] = "Chrome_Android";
 #elif defined(OS_FREEBSD)
   const char product[] = "Chrome_FreeBSD";
+#elif defined(OS_DRAGONFLY)
+  const char product[] = "Chrome_DragonFly";
 #else
 #error Platform not supported.
 #endif
diff --git chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc
index 097fecdebc6..71aef0f1347 100644
--- chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc
+++ chrome/browser/ui/views/frame/opaque_browser_frame_view_platform_specific.cc
@@ -6,8 +6,7 @@
 
 #include "build/build_config.h"
 
-#if !defined(OS_LINUX) && !defined(OS_FREEBSD)
-
+#if !defined(OS_LINUX) && !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
 // static
 std::unique_ptr<OpaqueBrowserFrameViewPlatformSpecific>
 OpaqueBrowserFrameViewPlatformSpecific::Create(
diff --git chrome/test/base/in_process_browser_test.cc chrome/test/base/in_process_browser_test.cc
index 0f9d2b6b49c..30d38f845f7 100644
--- chrome/test/base/in_process_browser_test.cc
+++ chrome/test/base/in_process_browser_test.cc
@@ -77,7 +77,7 @@
 #include "chrome/test/base/scoped_bundle_swizzler_mac.h"
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <signal.h>
 #endif
 
diff --git chrome/test/base/testing_browser_process.h chrome/test/base/testing_browser_process.h
index b29042f50ec..4df4d72bfa5 100644
--- chrome/test/base/testing_browser_process.h
+++ chrome/test/base/testing_browser_process.h
@@ -116,7 +116,8 @@ class TestingBrowserProcess : public BrowserProcess {
   DownloadRequestLimiter* download_request_limiter() override;
   StartupData* startup_data() override;
 
-#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_FREEBSD)) && !defined(OS_CHROMEOS)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_FREEBSD) || \
+     defined(OS_DRAGONFLY)) && !defined(OS_CHROMEOS)
   void StartAutoupdateTimer() /*override*/ {}
 #endif
 
diff --git components/data_reduction_proxy/core/browser/data_reduction_proxy_request_options_unittest.cc components/data_reduction_proxy/core/browser/data_reduction_proxy_request_options_unittest.cc
index e57b6b3ff9a..bc94160468f 100644
--- components/data_reduction_proxy/core/browser/data_reduction_proxy_request_options_unittest.cc
+++ components/data_reduction_proxy/core/browser/data_reduction_proxy_request_options_unittest.cc
@@ -68,6 +68,9 @@ const char kClientStr[] = "linux";
 #elif defined(OS_WIN)
 const Client kClient = Client::CHROME_WINDOWS;
 const char kClientStr[] = "win";
+#elif defined(OS_DRAGONFLY)
+const Client kClient = Client::CHROME_DRAGONFLY;
+const char kClientStr[] = "dragonfly";
 #elif defined(OS_FREEBSD)
 const Client kClient = Client::CHROME_FREEBSD;
 const char kClientStr[] = "freebsd";
diff --git components/data_reduction_proxy/core/browser/data_reduction_proxy_util.cc components/data_reduction_proxy/core/browser/data_reduction_proxy_util.cc
index cb52a458725..6094c1883fa 100644
--- components/data_reduction_proxy/core/browser/data_reduction_proxy_util.cc
+++ components/data_reduction_proxy/core/browser/data_reduction_proxy_util.cc
@@ -96,6 +96,8 @@ const char* GetStringForClient(Client client) {
       return "linux";
     case Client::CHROME_WINDOWS:
       return "win";
+    case Client::CHROME_DRAGONFLY:
+      return "dragonfly";
     case Client::CHROME_FREEBSD:
       return "freebsd";
     case Client::CHROME_OPENBSD:
diff --git components/data_reduction_proxy/core/browser/data_reduction_proxy_util.h components/data_reduction_proxy/core/browser/data_reduction_proxy_util.h
index e513d0f9df7..bd17e3318b9 100644
--- components/data_reduction_proxy/core/browser/data_reduction_proxy_util.h
+++ components/data_reduction_proxy/core/browser/data_reduction_proxy_util.h
@@ -32,6 +32,7 @@ enum class Client {
   CHROME_CHROMEOS,
   CHROME_LINUX,
   CHROME_WINDOWS,
+  CHROME_DRAGONFLY,
   CHROME_FREEBSD,
   CHROME_OPENBSD,
   CHROME_SOLARIS,
diff --git components/flags_ui/flags_state.cc components/flags_ui/flags_state.cc
index 88980f6744e..3e4e4a5b3ff 100644
--- components/flags_ui/flags_state.cc
+++ components/flags_ui/flags_state.cc
@@ -693,7 +693,8 @@ int FlagsState::GetCurrentPlatform() {
   return kOsWin;
 #elif defined(OS_CHROMEOS)  // Needs to be before the OS_LINUX check.
   return kOsCrOS;
-#elif defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
+#elif defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD) || \
+  defined(OS_DRAGONFLY)
   return kOsLinux;
 #elif defined(OS_ANDROID)
   return kOsAndroid;
diff --git components/metrics/system_memory_stats_recorder_linux.cc components/metrics/system_memory_stats_recorder_linux.cc
index be00f226eb2..82b910a8337 100644
--- components/metrics/system_memory_stats_recorder_linux.cc
+++ components/metrics/system_memory_stats_recorder_linux.cc
@@ -30,7 +30,7 @@ namespace metrics {
   UMA_HISTOGRAM_LINEAR(name, sample, 2500, 50)
 
 void RecordMemoryStats(RecordMemoryStatsType type) {
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
   base::SystemMemoryInfoKB memory;
   if (!base::GetSystemMemoryInfo(&memory))
     return;
@@ -82,7 +82,7 @@ void RecordMemoryStats(RecordMemoryStatsType type) {
       break;
     }
   }
-#endif // !defined(OS_FREEBSD)
+#endif // !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
 }
 
 }  // namespace metrics
diff --git components/policy/core/common/schema.cc components/policy/core/common/schema.cc
index 8239edf8167..0a4fb32e594 100644
--- components/policy/core/common/schema.cc
+++ components/policy/core/common/schema.cc
@@ -23,7 +23,7 @@
 #include "base/strings/stringprintf.h"
 #include "components/policy/core/common/json_schema_constants.h"
 #include "components/policy/core/common/schema_internal.h"
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <re2/re2.h>
 #else
 #include "third_party/re2/src/re2/re2.h"
diff --git components/policy/tools/generate_policy_source.py components/policy/tools/generate_policy_source.py
index 492e37b31ac..40ec44aade1 100755
--- components/policy/tools/generate_policy_source.py
+++ components/policy/tools/generate_policy_source.py
@@ -120,7 +120,7 @@ class PolicyDetails:
       if platform.startswith('chrome.'):
         platform_sub = platform[7:]
         if platform_sub == '*':
-          self.platforms.extend(['win', 'mac', 'linux', 'fuchsia', 'freebsd'])
+          self.platforms.extend(['win', 'mac', 'linux', 'fuchsia', 'freebsd', 'dragonfly'])
         elif platform_sub == 'win7':
           self.platforms.append('win')
         else:
diff --git components/sync/driver/sync_util.cc components/sync/driver/sync_util.cc
index 68d590252d1..eb7ba6ec113 100644
--- components/sync/driver/sync_util.cc
+++ components/sync/driver/sync_util.cc
@@ -35,6 +35,8 @@ std::string GetSystemString() {
   system = "WIN ";
 #elif defined(OS_LINUX)
   system = "LINUX ";
+#elif defined(OS_DRAGONFLY)
+  system = "DRAGONFLY ";
 #elif defined(OS_FREEBSD)
   system = "FREEBSD ";
 #elif defined(OS_OPENBSD)
diff --git components/update_client/update_query_params.cc components/update_client/update_query_params.cc
index c984f1fb7c7..d7c4296817f 100644
--- components/update_client/update_query_params.cc
+++ components/update_client/update_query_params.cc
@@ -41,12 +41,14 @@ const char kOs[] =
     "openbsd";
 #elif defined(OS_FREEBSD)
     "freebsd";
+#elif defined(OS_DRAGONFLY)
+    "dragonfly";
 #else
 #error "unknown os"
 #endif
 
 const char kArch[] =
-#if defined(__amd64__) || defined(_WIN64)
+#if defined(__amd64__) || defined(__x86_64__) || defined(_WIN64)
     "x64";
 #elif defined(__i386__) || defined(_WIN32)
     "x86";
diff --git components/version_info/version_info.cc components/version_info/version_info.cc
index 57cf7a7fef9..8b04df413f6 100644
--- components/version_info/version_info.cc
+++ components/version_info/version_info.cc
@@ -62,6 +62,8 @@ std::string GetOSType() {
   return "Android";
 #elif defined(OS_LINUX)
   return "Linux";
+#elif defined(OS_DRAGONFLY)
+  return "DragonFly";
 #elif defined(OS_FREEBSD)
   return "FreeBSD";
 #elif defined(OS_OPENBSD)
diff --git content/browser/utility_process_host.cc content/browser/utility_process_host.cc
index 4b2418d907b..0acce1de81f 100644
--- content/browser/utility_process_host.cc
+++ content/browser/utility_process_host.cc
@@ -417,7 +417,8 @@ bool UtilityProcessHost::StartProcess() {
       switches::kMuteAudio,
       switches::kUseFileForFakeAudioCapture,
       switches::kAgcStartupMinVolume,
-#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS) || \
+    defined(OS_DRAGONFLY)
       switches::kAlsaInputDevice,
       switches::kAlsaOutputDevice,
 #endif
diff --git content/public/common/content_switches.cc content/public/common/content_switches.cc
index 2cbf5c9529e..b7f13839af1 100644
--- content/public/common/content_switches.cc
+++ content/public/common/content_switches.cc
@@ -997,7 +997,8 @@ const char kEnableAggressiveDOMStorageFlushing[] =
 // Enable indication that browser is controlled by automation.
 const char kEnableAutomation[] = "enable-automation";
 
-#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_FREEBSD)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || (defined(OS_FREEBSD) || \
+						     defined(OS_DRAGONFLY))
 // Allows sending text-to-speech requests to speech-dispatcher, a common
 // Linux speech service. Because it's buggy, the user must explicitly
 // enable it so that visiting a random webpage can't cause instability.
diff --git content/public/common/content_switches.h content/public/common/content_switches.h
index 6d24a45b244..0af44fb44b5 100644
--- content/public/common/content_switches.h
+++ content/public/common/content_switches.h
@@ -278,7 +278,8 @@ CONTENT_EXPORT extern const char kRemoteDebuggingSocketName[];
 CONTENT_EXPORT extern const char kRendererWaitForJavaDebugger[];
 #endif
 
-#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_FREEBSD)
+#if (defined(OS_LINUX) && !defined(OS_CHROMEOS)) || defined(OS_FREEBSD) || \
+  defined(OS_DRAGONFLY)
 CONTENT_EXPORT extern const char kEnableSpeechDispatcher[];
 #endif
 
diff --git content/public/test/browser_test_base.cc content/public/test/browser_test_base.cc
index 0a2166f6439..aac31d84746 100644
--- content/public/test/browser_test_base.cc
+++ content/public/test/browser_test_base.cc
@@ -98,7 +98,7 @@
 #include "ui/views/test/event_generator_delegate_mac.h"
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/signal.h>
 #endif
 
diff --git extensions/common/api/runtime.json extensions/common/api/runtime.json
index 07ba08172c7..92da02fbf64 100644
--- extensions/common/api/runtime.json
+++ extensions/common/api/runtime.json
@@ -68,7 +68,7 @@
         "id": "PlatformOs",
         "type": "string",
         "description": "The operating system chrome is running on.",
-        "enum": ["mac", "win", "android", "cros", "linux", "freebsd", "openbsd"]
+          "enum": ["mac", "win", "android", "cros", "linux", "freebsd", "dragonfly", "openbsd"]
       },
       {
         "id": "PlatformArch",
diff --git media/base/media_switches.cc media/base/media_switches.cc
index 3a7499a0f03..a4d73d228d0 100644
--- media/base/media_switches.cc
+++ media/base/media_switches.cc
@@ -37,7 +37,8 @@ const char kDisableMediaSuspend[] = "disable-media-suspend";
 const char kReportVp9AsAnUnsupportedMimeType[] =
     "report-vp9-as-an-unsupported-mime-type";
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS) || \
+    defined(OS_DRAGONFLY)
 // The Alsa device to use when opening an audio input stream.
 const char kAlsaInputDevice[] = "alsa-input-device";
 // The Alsa device to use when opening an audio stream.
diff --git media/base/media_switches.h media/base/media_switches.h
index 732d687d817..aaf03c4849b 100644
--- media/base/media_switches.h
+++ media/base/media_switches.h
@@ -37,7 +37,8 @@ MEDIA_EXPORT extern const char kDisableMediaSuspend[];
 
 MEDIA_EXPORT extern const char kReportVp9AsAnUnsupportedMimeType[];
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SOLARIS) || \
+    defined(OS_DRAGONFLY)
 MEDIA_EXPORT extern const char kAlsaInputDevice[];
 MEDIA_EXPORT extern const char kAlsaOutputDevice[];
 #endif
diff --git mojo/public/cpp/platform/socket_utils_posix.cc mojo/public/cpp/platform/socket_utils_posix.cc
index 6199a36a69e..58941c8994b 100644
--- mojo/public/cpp/platform/socket_utils_posix.cc
+++ mojo/public/cpp/platform/socket_utils_posix.cc
@@ -28,7 +28,8 @@ bool IsRecoverableError() {
 }
 
 bool GetPeerEuid(base::PlatformFile fd, uid_t* peer_euid) {
-#if defined(OS_MACOSX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
+#if defined(OS_MACOSX) || defined(OS_OPENBSD) || defined(OS_FREEBSD) || \
+  defined(OS_DRAGONFLY)
   uid_t socket_euid;
   gid_t socket_gid;
   if (getpeereid(fd, &socket_euid, &socket_gid) < 0) {
diff --git native_client/src/third_party/dlmalloc/malloc.c native_client/src/third_party/dlmalloc/malloc.c
index 17baa50a9a2..c412cab299e 100644
--- native_client/src/third_party/dlmalloc/malloc.c
+++ native_client/src/third_party/dlmalloc/malloc.c
@@ -1483,7 +1483,8 @@ DLMALLOC_EXPORT int mspace_mallopt(int, int);
 #ifndef LACKS_UNISTD_H
 #include <unistd.h>     /* for sbrk, sysconf */
 #else /* LACKS_UNISTD_H */
-#if !defined(__FreeBSD__) && !defined(__OpenBSD__) && !defined(__NetBSD__)
+#if !defined(__FreeBSD__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && \
+    !defined(__DragonFly__)
 extern void*     sbrk(ptrdiff_t);
 #endif /* FreeBSD etc */
 #endif /* LACKS_UNISTD_H */
diff --git net/base/address_tracker_linux.cc net/base/address_tracker_linux.cc
index ef6810e67b7..f6b2cf2e2ae 100644
--- net/base/address_tracker_linux.cc
+++ net/base/address_tracker_linux.cc
@@ -179,7 +179,7 @@ AddressTrackerLinux::AddressTrackerLinux(
 AddressTrackerLinux::~AddressTrackerLinux() = default;
 
 void AddressTrackerLinux::Init() {
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
   netlink_fd_.reset(socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE));
   if (!netlink_fd_.is_valid()) {
     PLOG(ERROR) << "Could not create NETLINK socket";
@@ -353,7 +353,7 @@ void AddressTrackerLinux::HandleMessage(const char* buffer,
                                         bool* address_changed,
                                         bool* link_changed,
                                         bool* tunnel_changed) {
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
   DCHECK(buffer);
   // Note that NLMSG_NEXT decrements |length| to reflect the number of bytes
   // remaining in |buffer|.
@@ -466,10 +466,10 @@ void AddressTrackerLinux::HandleMessage(const char* buffer,
         break;
     }
   }
-#else  // !OS_FREEBSD
+#else  // !OS_FREEBSD && !OS_DRAGONFLY
   NOTIMPLEMENTED();
   AbortAndForceOnline();
-#endif // !OS_FREEBSD
+#endif // !OS_FREEBSD && !OS_DRAGONFLY
 }
 
 void AddressTrackerLinux::OnFileCanReadWithoutBlocking() {
diff --git net/dns/address_info.cc net/dns/address_info.cc
index ec8016a33f3..cd89b88ca13 100644
--- net/dns/address_info.cc
+++ net/dns/address_info.cc
@@ -67,7 +67,7 @@ AddressInfo::AddressInfoAndResult AddressInfo::Get(
     // error.
     // http://crbug.com/134142
     err = ERR_NAME_NOT_RESOLVED;
-#elif defined(OS_POSIX) && !defined(OS_FREEBSD)
+#elif defined(OS_POSIX) && !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
     if (os_error != EAI_NONAME && os_error != EAI_NODATA)
       err = ERR_NAME_RESOLUTION_FAILED;
 #endif
diff --git net/dns/dns_config_service_posix.cc net/dns/dns_config_service_posix.cc
index 2e0f06b0c1e..cae399ff27a 100644
--- net/dns/dns_config_service_posix.cc
+++ net/dns/dns_config_service_posix.cc
@@ -168,11 +168,11 @@ ConfigParsePosixResult ReadDnsConfig(DnsConfig* dns_config) {
     result = CONFIG_PARSE_POSIX_RES_INIT_FAILED;
   }
   // Prefer res_ndestroy where available.
-#if defined(OS_MACOSX) || defined(OS_FREEBSD)
+#if defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   res_ndestroy(&res);
 #else
   res_nclose(&res);
-#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD)
+#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #endif  // defined(OS_OPENBSD)
 
 #if defined(OS_MACOSX) && !defined(OS_IOS)
@@ -477,7 +477,7 @@ ConfigParsePosixResult ConvertResStateToDnsConfig(const struct __res_state& res,
 
   dns_config->nameservers.clear();
 
-#if defined(OS_MACOSX) || defined(OS_FREEBSD)
+#if defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   union res_sockaddr_union addresses[MAXNS];
   int nscount = res_getservers(const_cast<res_state>(&res), addresses, MAXNS);
   DCHECK_GE(nscount, 0);
@@ -516,7 +516,7 @@ ConfigParsePosixResult ConvertResStateToDnsConfig(const struct __res_state& res,
       return CONFIG_PARSE_POSIX_BAD_ADDRESS;
     dns_config->nameservers.push_back(ipe);
   }
-#else  // !(defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_FREEBSD))
+#else  // !(defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_FREEBSD)) || defined(OS_DRAGONFLY)
   DCHECK_LE(res.nscount, MAXNS);
   for (int i = 0; i < res.nscount; ++i) {
     IPEndPoint ipe;
@@ -527,7 +527,7 @@ ConfigParsePosixResult ConvertResStateToDnsConfig(const struct __res_state& res,
     }
     dns_config->nameservers.push_back(ipe);
   }
-#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD)
+#endif  // defined(OS_MACOSX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 
   dns_config->search.clear();
   for (int i = 0; (i < MAXDNSRCH) && res.dnsrch[i]; ++i) {
diff --git net/dns/dns_reloader.cc net/dns/dns_reloader.cc
index 83a39ed8012..361aa30ddb7 100644
--- net/dns/dns_reloader.cc
+++ net/dns/dns_reloader.cc
@@ -7,7 +7,7 @@
 #if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_OPENBSD) && \
     !defined(OS_ANDROID) && !defined(OS_FUCHSIA)
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <netinet/in.h>
 #endif
 
diff --git net/http/http_auth_gssapi_posix.h net/http/http_auth_gssapi_posix.h
index 0aba030a684..a72b141ea19 100644
--- net/http/http_auth_gssapi_posix.h
+++ net/http/http_auth_gssapi_posix.h
@@ -19,7 +19,7 @@
 
 #if defined(OS_MACOSX)
 #include <GSS/gssapi.h>
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <gssapi/gssapi.h>
 #ifndef GSS_C_DELEG_POLICY_FLAG
 #define GSS_C_DELEG_POLICY_FLAG 32768
diff --git net/socket/udp_socket_posix.h net/socket/udp_socket_posix.h
index 203a1ac63c2..6560059600a 100644
--- net/socket/udp_socket_posix.h
+++ net/socket/udp_socket_posix.h
@@ -33,7 +33,7 @@
 
 #if defined(__ANDROID__) && defined(__aarch64__)
 #define HAVE_SENDMMSG 1
-#elif defined(OS_LINUX) || defined(OS_BSD)
+#elif defined(OS_LINUX) || defined(OS_BSD) && !defined(OS_DRAGONFLY)
 #define HAVE_SENDMMSG 1
 #else
 #define HAVE_SENDMMSG 0
diff --git ppapi/tests/test_utils.h ppapi/tests/test_utils.h
index afa8f2d5ec7..ebe58950da2 100644
--- ppapi/tests/test_utils.h
+++ ppapi/tests/test_utils.h
@@ -312,6 +312,8 @@ do { \
 #define PPAPI_OS_WIN 1
 #elif defined(__FreeBSD__)
 #define PPAPI_OS_FREEBSD 1
+#elif defined(__DragonFly__)
+#define PPAPI_OS_DRAGONFLY 1
 #elif defined(__OpenBSD__)
 #define PPAPI_OS_OPENBSD 1
 #elif defined(__sun)
@@ -322,7 +324,8 @@ do { \
 
 /* These are used to determine POSIX-like implementations vs Windows. */
 #if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
-    defined(__OpenBSD__) || defined(__sun) || defined(__native_client__)
+    defined(__OpenBSD__) || defined(__DragonFly__) || defined(__sun) || \
+    defined(__native_client__)
 #define PPAPI_POSIX 1
 #endif
 
diff --git services/device/hid/hid_connection_freebsd.cc services/device/hid/hid_connection_freebsd.cc
index 6b7623c1cee..823781d7aea 100644
--- services/device/hid/hid_connection_freebsd.cc
+++ services/device/hid/hid_connection_freebsd.cc
@@ -4,8 +4,13 @@
 
 #include "services/device/hid/hid_connection_freebsd.h"
 
+#if defined(OS_FREEBSD)
 #include <dev/usb/usbhid.h>
 #include <dev/usb/usb_ioctl.h>
+#else
+#include <bus/u4b/usbhid.h>
+#include <bus/u4b/usb_ioctl.h>
+#endif
 
 #include "base/bind.h"
 #include "base/files/file_descriptor_watcher_posix.h"
diff --git services/device/hid/hid_service_freebsd.cc services/device/hid/hid_service_freebsd.cc
index a082a24ad83..f806a95315b 100644
--- services/device/hid/hid_service_freebsd.cc
+++ services/device/hid/hid_service_freebsd.cc
@@ -4,7 +4,12 @@
 
 #include "services/device/hid/hid_service_freebsd.h"
 
+#if defined(OS_FREEBSD)
 #include <dev/usb/usb_ioctl.h>
+#else
+#include <bus/u4b/usb_ioctl.h>
+#endif
+
 #include <stdint.h>
 #include <sys/socket.h>
 #include <sys/un.h>
diff --git services/service_manager/embedder/set_process_title_linux.cc services/service_manager/embedder/set_process_title_linux.cc
index 9d47884f486..6ae00a24972 100644
--- services/service_manager/embedder/set_process_title_linux.cc
+++ services/service_manager/embedder/set_process_title_linux.cc
@@ -50,7 +50,7 @@ extern char** environ;
 
 static char** g_main_argv = NULL;
 
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
 static char* g_orig_argv0 = NULL;
 
 void setproctitle(const char* fmt, ...) {
diff --git services/service_manager/embedder/set_process_title_linux.h services/service_manager/embedder/set_process_title_linux.h
index 964532f5941..be556314718 100644
--- services/service_manager/embedder/set_process_title_linux.h
+++ services/service_manager/embedder/set_process_title_linux.h
@@ -7,7 +7,7 @@
 
 #include "build/build_config.h"
 
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_DRAGONFLY)
 // Set the process title that will show in "ps" and similar tools. Takes
 // printf-style format string and arguments. After calling setproctitle()
 // the original main() argv[] array should not be used. By default, the
diff --git skia/ext/platform_canvas.h skia/ext/platform_canvas.h
index c31e7c02141..553ed7a76ed 100644
--- skia/ext/platform_canvas.h
+++ skia/ext/platform_canvas.h
@@ -58,7 +58,7 @@ SK_API HDC GetNativeDrawingContext(SkCanvas* canvas);
 
 #elif defined(__linux__) || defined(__FreeBSD__) || defined(__OpenBSD__) || \
     defined(__sun) || defined(ANDROID) || defined(__APPLE__) ||             \
-    defined(__Fuchsia__)
+    defined(__Fuchsia__) || defined(__DragonFly__)
 // Construct a canvas from the given memory region. The memory is not cleared
 // first. @data must be, at least, @height * StrideForWidth(@width) bytes.
 SK_API std::unique_ptr<SkCanvas> CreatePlatformCanvasWithPixels(
diff --git third_party/abseil-cpp/absl/base/config.h third_party/abseil-cpp/absl/base/config.h
index 1c3cb08e746..067f89d03bc 100644
--- third_party/abseil-cpp/absl/base/config.h
+++ third_party/abseil-cpp/absl/base/config.h
@@ -280,7 +280,7 @@
 #elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) ||   \
     defined(__ros__) || defined(__native_client__) || defined(__asmjs__) || \
     defined(__wasm__) || defined(__Fuchsia__) || defined(__sun) || \
-    defined(__ASYLO__)
+    defined(__ASYLO__) || defined(__DragonFly__)
 #define ABSL_HAVE_MMAP 1
 #endif
 
@@ -291,7 +291,7 @@
 #ifdef ABSL_HAVE_PTHREAD_GETSCHEDPARAM
 #error ABSL_HAVE_PTHREAD_GETSCHEDPARAM cannot be directly set
 #elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
-    defined(__ros__)
+    defined(__ros__) || defined(__DragonFly__)
 #define ABSL_HAVE_PTHREAD_GETSCHEDPARAM 1
 #endif
 
diff --git third_party/abseil-cpp/absl/base/internal/endian.h third_party/abseil-cpp/absl/base/internal/endian.h
index 296e92d9e55..ff0b3d7298a 100644
--- third_party/abseil-cpp/absl/base/internal/endian.h
+++ third_party/abseil-cpp/absl/base/internal/endian.h
@@ -22,7 +22,7 @@
 #elif defined(__APPLE__)
 // macOS / Darwin features
 #include <libkern/OSByteOrder.h>
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/endian.h>
 #elif defined(__GLIBC__)
 #include <byteswap.h>  // IWYU pragma: export
diff --git third_party/abseil-cpp/absl/base/internal/raw_logging.cc third_party/abseil-cpp/absl/base/internal/raw_logging.cc
index 878fe6c6c2c..8afbbd58862 100644
--- third_party/abseil-cpp/absl/base/internal/raw_logging.cc
+++ third_party/abseil-cpp/absl/base/internal/raw_logging.cc
@@ -37,7 +37,7 @@
 // this, consider moving both to config.h instead.
 #if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
     defined(__Fuchsia__) || defined(__native_client__) || \
-    defined(__EMSCRIPTEN__)
+    defined(__EMSCRIPTEN__) || defined(__DragonFly__)
 #include <unistd.h>
 
 
@@ -50,7 +50,7 @@
 // ABSL_HAVE_SYSCALL_WRITE is defined when the platform provides the syscall
 //   syscall(SYS_write, /*int*/ fd, /*char* */ buf, /*size_t*/ len);
 // for low level operations that want to avoid libc.
-#if (defined(__linux__) || defined(__FreeBSD__)) && !defined(__ANDROID__)
+#if (defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)) && !defined(__ANDROID__)
 #include <sys/syscall.h>
 #define ABSL_HAVE_SYSCALL_WRITE 1
 #define ABSL_LOW_LEVEL_WRITE_SUPPORTED 1
diff --git third_party/abseil-cpp/absl/base/internal/sysinfo.cc third_party/abseil-cpp/absl/base/internal/sysinfo.cc
index e5e131f71d3..62bf58c550b 100644
--- third_party/abseil-cpp/absl/base/internal/sysinfo.cc
+++ third_party/abseil-cpp/absl/base/internal/sysinfo.cc
@@ -31,7 +31,7 @@
 #include <sys/syscall.h>
 #endif
 
-#if defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/sysctl.h>
 #endif
 
diff --git third_party/afl/src/afl-fuzz.c third_party/afl/src/afl-fuzz.c
index f0d564a3303..36ae23e6283 100644
--- third_party/afl/src/afl-fuzz.c
+++ third_party/afl/src/afl-fuzz.c
@@ -58,9 +58,10 @@
 #include <sys/ioctl.h>
 #include <sys/file.h>
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__) || \
+  defined(__DragonFly__)
 #  include <sys/sysctl.h>
-#endif /* __APPLE__ || __FreeBSD__ || __OpenBSD__ */
+#endif /* __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ */
 
 /* For systems that have sched_setaffinity; right now just Linux, but one
    can hope... */
@@ -3531,7 +3532,8 @@ static double get_runnable_processes(void) {
 
   static double res;
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__) || \
+  defined(__DragonFly__)
 
   /* I don't see any portable sysctl or so that would quickly give us the
      number of runnable processes; the 1-minute load average can be a
@@ -3571,7 +3573,7 @@ static double get_runnable_processes(void) {
 
   }
 
-#endif /* ^(__APPLE__ || __FreeBSD__ || __OpenBSD__) */
+#endif /* ^(__APPLE__ || __FreeBSD__ || __OpenBSD__) || __DragonFly__ */
 
   return res;
 
@@ -7347,7 +7349,8 @@ static void get_core_count(void) {
 
   u32 cur_runnable = 0;
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__) || \
+  defined(__DragonFly__)
 
   size_t s = sizeof(cpu_core_count);
 
@@ -7386,19 +7389,20 @@ static void get_core_count(void) {
 
 #endif /* ^HAVE_AFFINITY */
 
-#endif /* ^(__APPLE__ || __FreeBSD__ || __OpenBSD__) */
+#endif /* ^(__APPLE__ || __FreeBSD__ || __OpenBSD__) || __DragonFly__ */
 
   if (cpu_core_count > 0) {
 
     cur_runnable = (u32)get_runnable_processes();
 
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined (__OpenBSD__) || \
+  defined(__DragonFly__)
 
     /* Add ourselves, since the 1-minute average doesn't include that yet. */
 
     cur_runnable++;
 
-#endif /* __APPLE__ || __FreeBSD__ || __OpenBSD__ */
+#endif /* __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ */
 
     OKF("You have %u CPU core%s and %u runnable tasks (utilization: %0.0f%%).",
         cpu_core_count, cpu_core_count > 1 ? "s" : "",
diff --git third_party/angle/third_party/glmark2/src/waflib/Tools/c_config.py third_party/angle/third_party/glmark2/src/waflib/Tools/c_config.py
index 9c627c1cf6c..761f0fc8cc2 100644
--- third_party/angle/third_party/glmark2/src/waflib/Tools/c_config.py
+++ third_party/angle/third_party/glmark2/src/waflib/Tools/c_config.py
@@ -40,7 +40,7 @@ int main(int argc, char **argv) {
 	return (size_t) off < sizeof(%(type_name)s);
 }
 '''
-MACRO_TO_DESTOS={'__linux__':'linux','__GNU__':'gnu','__FreeBSD__':'freebsd','__NetBSD__':'netbsd','__OpenBSD__':'openbsd','__sun':'sunos','__hpux':'hpux','__sgi':'irix','_AIX':'aix','__CYGWIN__':'cygwin','__MSYS__':'cygwin','_UWIN':'uwin','_WIN64':'win32','_WIN32':'win32','__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__':'darwin','__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__':'darwin','__QNX__':'qnx','__native_client__':'nacl'}
+MACRO_TO_DESTOS={'__linux__':'linux','__GNU__':'gnu','__DragonFly__':'dragonfly','__FreeBSD__':'freebsd','__NetBSD__':'netbsd','__OpenBSD__':'openbsd','__sun':'sunos','__hpux':'hpux','__sgi':'irix','_AIX':'aix','__CYGWIN__':'cygwin','__MSYS__':'cygwin','_UWIN':'uwin','_WIN64':'win32','_WIN32':'win32','__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__':'darwin','__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__':'darwin','__QNX__':'qnx','__native_client__':'nacl'}
 MACRO_TO_DEST_CPU={'__x86_64__':'x86_64','__amd64__':'x86_64','__i386__':'x86','__ia64__':'ia','__mips__':'mips','__sparc__':'sparc','__alpha__':'alpha','__aarch64__':'aarch64','__thumb__':'thumb','__arm__':'arm','__hppa__':'hppa','__powerpc__':'powerpc','__ppc__':'powerpc','__convex__':'convex','__m68k__':'m68k','__s390x__':'s390x','__s390__':'s390','__sh__':'sh','__xtensa__':'xtensa',}
 @conf
 def parse_flags(self,line,uselib_store,env=None,force_static=False,posix=None):
diff --git third_party/angle/third_party/glmark2/src/waflib/Tools/javaw.py third_party/angle/third_party/glmark2/src/waflib/Tools/javaw.py
index a07c7c5d618..f95df5bd273 100644
--- third_party/angle/third_party/glmark2/src/waflib/Tools/javaw.py
+++ third_party/angle/third_party/glmark2/src/waflib/Tools/javaw.py
@@ -285,6 +285,8 @@ def check_jni_headers(conf):
 		libDirs=[[x,y.parent.abspath()]for x in libDirs for y in f]
 	if conf.env.DEST_OS=='freebsd':
 		conf.env.append_unique('LINKFLAGS_JAVA','-pthread')
+	if conf.env.DEST_OS=='dragonfly':
+		conf.env.append_unique('LINKFLAGS_JAVA','-pthread')
 	for d in libDirs:
 		try:
 			conf.check(header_name='jni.h',define_name='HAVE_JNI_H',lib='jvm',libpath=d,includes=incDirs,uselib_store='JAVA',uselib='JAVA')
diff --git third_party/angle/third_party/glmark2/src/waflib/Tools/qt5.py third_party/angle/third_party/glmark2/src/waflib/Tools/qt5.py
index 4cac93260e0..7b095117b19 100644
--- third_party/angle/third_party/glmark2/src/waflib/Tools/qt5.py
+++ third_party/angle/third_party/glmark2/src/waflib/Tools/qt5.py
@@ -281,6 +281,12 @@ def configure(self):
 			self.check(features='qt5 cxx cxxprogram',use=uses,fragment=frag,msg='Can we link Qt programs on FreeBSD directly?')
 		except self.errors.ConfigurationError:
 			self.check(features='qt5 cxx cxxprogram',use=uses,uselib_store='qt5',libpath='/usr/local/lib',fragment=frag,msg='Is /usr/local/lib required?')
+	if Utils.unversioned_sys_platform()=='dragonfly':
+		frag='#include <QApplication>\nint main(int argc, char **argv) { QApplication app(argc, argv); return NULL != (void*) (&app);}\n'
+		try:
+			self.check(features='qt5 cxx cxxprogram',use=uses,fragment=frag,msg='Can we link Qt programs on DragonFly directly?')
+		except self.errors.ConfigurationError:
+			self.check(features='qt5 cxx cxxprogram',use=uses,uselib_store='qt5',libpath='/usr/local/lib',fragment=frag,msg='Is /usr/local/lib required?')
 @conf
 def find_qt5_binaries(self):
 	env=self.env
diff --git third_party/angle/third_party/vulkan-loader/src/loader/loader.c third_party/angle/third_party/vulkan-loader/src/loader/loader.c
index a713af99d55..5f5ee9b1775 100644
--- third_party/angle/third_party/vulkan-loader/src/loader/loader.c
+++ third_party/angle/third_party/vulkan-loader/src/loader/loader.c
@@ -238,7 +238,8 @@ void *loader_device_heap_realloc(const struct loader_device *device, void *pMemo
 }
 
 // Environment variables
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+  defined(__DragonFly__)
 
 static inline bool IsHighIntegrity() {
     return geteuid() != getuid() || getegid() != getgid();
diff --git third_party/angle/third_party/vulkan-loader/src/loader/vk_loader_platform.h third_party/angle/third_party/vulkan-loader/src/loader/vk_loader_platform.h
index 84b39e4ec75..de9d59ddf2a 100644
--- third_party/angle/third_party/vulkan-loader/src/loader/vk_loader_platform.h
+++ third_party/angle/third_party/vulkan-loader/src/loader/vk_loader_platform.h
@@ -31,7 +31,8 @@
 #include "vulkan/vk_platform.h"
 #include "vulkan/vk_sdk_platform.h"
 
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+  defined(__DragonFly__)
 /* Linux-specific common code: */
 
 // Headers:
diff --git third_party/angle/third_party/vulkan-validation-layers/src/layers/vk_loader_platform.h third_party/angle/third_party/vulkan-validation-layers/src/layers/vk_loader_platform.h
index 269523d8e7a..606f5659ec7 100644
--- third_party/angle/third_party/vulkan-validation-layers/src/layers/vk_loader_platform.h
+++ third_party/angle/third_party/vulkan-validation-layers/src/layers/vk_loader_platform.h
@@ -31,7 +31,8 @@
 #include "vulkan/vk_platform.h"
 #include "vulkan/vk_sdk_platform.h"
 
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+  defined(__DragonFly__)
 /* Linux-specific common code: */
 
 // Headers:
diff --git third_party/blink/renderer/platform/heap/thread_state.cc third_party/blink/renderer/platform/heap/thread_state.cc
index d0f1ceaa851..d4376a8c0d8 100644
--- third_party/blink/renderer/platform/heap/thread_state.cc
+++ third_party/blink/renderer/platform/heap/thread_state.cc
@@ -87,7 +87,7 @@
 #include <sanitizer/msan_interface.h>
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <pthread_np.h>
 #endif
 
diff --git third_party/blink/renderer/platform/wtf/stack_util.cc third_party/blink/renderer/platform/wtf/stack_util.cc
index 17f310a2e85..50ebb71b6ff 100644
--- third_party/blink/renderer/platform/wtf/stack_util.cc
+++ third_party/blink/renderer/platform/wtf/stack_util.cc
@@ -17,7 +17,7 @@
 extern "C" void* __libc_stack_end;  // NOLINT
 #endif
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/signal.h>
 #include <pthread_np.h>
 #endif
@@ -35,14 +35,14 @@ size_t GetUnderestimatedStackSize() {
 // correctly for the main thread.
 
 #if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
-    defined(OS_FUCHSIA)
+    defined(OS_FUCHSIA) || defined(OS_DRAGONFLY)
   // pthread_getattr_np() can fail if the thread is not invoked by
   // pthread_create() (e.g., the main thread of blink_unittests).
   // If so, a conservative size estimate is returned.
 
   pthread_attr_t attr;
   int error;
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   pthread_attr_init(&attr);
   error = pthread_attr_get_np(pthread_self(), &attr);
 #else
@@ -56,7 +56,7 @@ size_t GetUnderestimatedStackSize() {
     pthread_attr_destroy(&attr);
     return size;
   }
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   pthread_attr_destroy(&attr);
 #endif
 
@@ -103,10 +103,10 @@ return Threading::ThreadStackSize();
 
 void* GetStackStart() {
 #if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
-    defined(OS_FUCHSIA)
+    defined(OS_FUCHSIA) || defined(OS_DRAGONFLY)
   pthread_attr_t attr;
   int error;
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   pthread_attr_init(&attr);
   error = pthread_attr_get_np(pthread_self(), &attr);
 #else
@@ -120,7 +120,7 @@ void* GetStackStart() {
     pthread_attr_destroy(&attr);
     return reinterpret_cast<uint8_t*>(base) + size;
   }
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
   pthread_attr_destroy(&attr);
 #endif
 #if defined(__GLIBC__)
diff --git third_party/blink/renderer/platform/wtf/thread_specific.h third_party/blink/renderer/platform/wtf/thread_specific.h
index d6912421614..a1ed2a8c624 100644
--- third_party/blink/renderer/platform/wtf/thread_specific.h
+++ third_party/blink/renderer/platform/wtf/thread_specific.h
@@ -105,7 +105,8 @@ inline bool ThreadSpecific<T>::IsSet() {
 template <typename T>
 inline ThreadSpecific<T>::operator T*() {
   T* off_thread_ptr;
-#if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD)
+#if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
+    defined(OS_DRAGONFLY)
   // TLS is fast on these platforms.
   // TODO(csharrison): Qualify this statement for Android.
   const bool kMainThreadAlwaysChecksTLS = true;
diff --git third_party/brotli/common/platform.h third_party/brotli/common/platform.h
index 84c448c4cf8..0c38775d735 100644
--- third_party/brotli/common/platform.h
+++ third_party/brotli/common/platform.h
@@ -31,7 +31,7 @@
 
 #if defined(OS_LINUX) || defined(OS_CYGWIN)
 #include <endian.h>
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <machine/endian.h>
 #elif defined(OS_MACOSX)
 #include <machine/endian.h>
diff --git third_party/catapult/common/py_trace_event/py_trace_event/trace_time.py third_party/catapult/common/py_trace_event/py_trace_event/trace_time.py
index c5e3fe1ed92..5ac07af38f1 100644
--- third_party/catapult/common/py_trace_event/py_trace_event/trace_time.py
+++ third_party/catapult/common/py_trace_event/py_trace_event/trace_time.py
@@ -26,6 +26,7 @@ _PLATFORMS = {
     'windows': 'win32',
     'cygwin': 'cygwin',
     'freebsd': 'freebsd',
+    'dragonfly': 'dragonfly',
     'sunos': 'sunos5',
     'bsd': 'bsd'
 }
@@ -33,6 +34,7 @@ _PLATFORMS = {
 _CLOCK_MONOTONIC = {
     'linux': 1,
     'freebsd': 4,
+    'dragonfly': 4,
     'bsd': 3,
     'sunos5': 4
 }
@@ -206,6 +208,7 @@ def InitializeNowFunction(plat):
 
   elif (plat.startswith(_PLATFORMS['linux'])
         or plat.startswith(_PLATFORMS['freebsd'])
+        or plat.startswith(_PLATFORMS['dragonfly'])
         or plat.startswith(_PLATFORMS['bsd'])
         or plat.startswith(_PLATFORMS['sunos'])):
     InitializeLinuxNowFunction(plat)
diff --git third_party/catapult/common/py_trace_event/py_trace_event/trace_time_unittest.py third_party/catapult/common/py_trace_event/py_trace_event/trace_time_unittest.py
index bae7ea81fe5..d2fee128f74 100644
--- third_party/catapult/common/py_trace_event/py_trace_event/trace_time_unittest.py
+++ third_party/catapult/common/py_trace_event/py_trace_event/trace_time_unittest.py
@@ -103,6 +103,9 @@ class TimerTest(unittest.TestCase):
   def testGetClockGetTimeClockNumber_freebsd(self):
     self.assertEquals(trace_time.GetClockGetTimeClockNumber('freebsd'), 4)
 
+  def testGetClockGetTimeClockNumber_dragonfly(self):
+    self.assertEquals(trace_time.GetClockGetTimeClockNumber('dragonfly'), 4)
+
   def testGetClockGetTimeClockNumber_bsd(self):
     self.assertEquals(trace_time.GetClockGetTimeClockNumber('bsd'), 3)
 
diff --git third_party/catapult/third_party/gsutil/third_party/monotonic/monotonic.py third_party/catapult/third_party/gsutil/third_party/monotonic/monotonic.py
index e36b7f7943b..c48cc7bb6c4 100644
--- third_party/catapult/third_party/gsutil/third_party/monotonic/monotonic.py
+++ third_party/catapult/third_party/gsutil/third_party/monotonic/monotonic.py
@@ -146,6 +146,8 @@ except AttributeError:
                 CLOCK_MONOTONIC = 1
             elif sys.platform.startswith('freebsd'):
                 CLOCK_MONOTONIC = 4
+            elif sys.platform.startswith('dragonfly'):
+                CLOCK_MONOTONIC = 4
             elif sys.platform.startswith('sunos5'):
                 CLOCK_MONOTONIC = 4
             elif 'bsd' in sys.platform:
diff --git third_party/catapult/third_party/pyserial/serial/serialposix.py third_party/catapult/third_party/pyserial/serial/serialposix.py
index b9b4b282682..538f943814c 100755
--- third_party/catapult/third_party/pyserial/serial/serialposix.py
+++ third_party/catapult/third_party/pyserial/serial/serialposix.py
@@ -125,7 +125,8 @@ elif plat[:7] == 'openbsd':    # OpenBSD
     baudrate_constants = {}
 
 elif plat[:3] == 'bsd' or  \
-    plat[:7] == 'freebsd':
+    plat[:7] == 'freebsd' or  \
+    plat[:9] == 'dragonfly':
 
     def device(port):
         return '/dev/cuad%d' % port
diff --git third_party/catapult/third_party/pyserial/serial/tools/list_ports_posix.py third_party/catapult/third_party/pyserial/serial/tools/list_ports_posix.py
index 09f115fbfdb..56ab9e93379 100755
--- third_party/catapult/third_party/pyserial/serial/tools/list_ports_posix.py
+++ third_party/catapult/third_party/pyserial/serial/tools/list_ports_posix.py
@@ -40,7 +40,8 @@ elif plat[:7] == 'openbsd':    # OpenBSD
         return [(d, d, d) for d in devices]
 
 elif plat[:3] == 'bsd' or  \
-        plat[:7] == 'freebsd':
+        plat[:7] == 'freebsd' or  \
+	plat[:9] == 'dragonfly':
 
     def comports():
         devices = glob.glob('/dev/cuad*')
diff --git third_party/dav1d/libdav1d/include/stdatomic.h third_party/dav1d/libdav1d/include/stdatomic.h
new file mode 100644
index 00000000000..b4845a74e49
--- /dev/null
+++ third_party/dav1d/libdav1d/include/stdatomic.h
@@ -0,0 +1,190 @@
+/*===---- stdatomic.h - Standard header for atomic types and operations -----===
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ *
+ *===-----------------------------------------------------------------------===
+ */
+
+#ifndef __CLANG_STDATOMIC_H
+#define __CLANG_STDATOMIC_H
+
+/* If we're hosted, fall back to the system's stdatomic.h. FreeBSD, for
+ * example, already has a Clang-compatible stdatomic.h header.
+ */
+#if __STDC_HOSTED__ && __has_include_next(<stdatomic.h>)
+# include_next <stdatomic.h>
+#else
+
+#include <stddef.h>
+#include <stdint.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* 7.17.1 Introduction */
+
+#define ATOMIC_BOOL_LOCK_FREE       __CLANG_ATOMIC_BOOL_LOCK_FREE
+#define ATOMIC_CHAR_LOCK_FREE       __CLANG_ATOMIC_CHAR_LOCK_FREE
+#define ATOMIC_CHAR16_T_LOCK_FREE   __CLANG_ATOMIC_CHAR16_T_LOCK_FREE
+#define ATOMIC_CHAR32_T_LOCK_FREE   __CLANG_ATOMIC_CHAR32_T_LOCK_FREE
+#define ATOMIC_WCHAR_T_LOCK_FREE    __CLANG_ATOMIC_WCHAR_T_LOCK_FREE
+#define ATOMIC_SHORT_LOCK_FREE      __CLANG_ATOMIC_SHORT_LOCK_FREE
+#define ATOMIC_INT_LOCK_FREE        __CLANG_ATOMIC_INT_LOCK_FREE
+#define ATOMIC_LONG_LOCK_FREE       __CLANG_ATOMIC_LONG_LOCK_FREE
+#define ATOMIC_LLONG_LOCK_FREE      __CLANG_ATOMIC_LLONG_LOCK_FREE
+#define ATOMIC_POINTER_LOCK_FREE    __CLANG_ATOMIC_POINTER_LOCK_FREE
+
+/* 7.17.2 Initialization */
+
+#define ATOMIC_VAR_INIT(value) (value)
+#define atomic_init __c11_atomic_init
+
+/* 7.17.3 Order and consistency */
+
+typedef enum memory_order {
+  memory_order_relaxed = __ATOMIC_RELAXED,
+  memory_order_consume = __ATOMIC_CONSUME,
+  memory_order_acquire = __ATOMIC_ACQUIRE,
+  memory_order_release = __ATOMIC_RELEASE,
+  memory_order_acq_rel = __ATOMIC_ACQ_REL,
+  memory_order_seq_cst = __ATOMIC_SEQ_CST
+} memory_order;
+
+#define kill_dependency(y) (y)
+
+/* 7.17.4 Fences */
+
+/* These should be provided by the libc implementation. */
+void atomic_thread_fence(memory_order);
+void atomic_signal_fence(memory_order);
+
+#define atomic_thread_fence(order) __c11_atomic_thread_fence(order)
+#define atomic_signal_fence(order) __c11_atomic_signal_fence(order)
+
+/* 7.17.5 Lock-free property */
+
+#define atomic_is_lock_free(obj) __c11_atomic_is_lock_free(sizeof(*(obj)))
+
+/* 7.17.6 Atomic integer types */
+
+#ifdef __cplusplus
+typedef _Atomic(bool)               atomic_bool;
+#else
+typedef _Atomic(_Bool)              atomic_bool;
+#endif
+typedef _Atomic(char)               atomic_char;
+typedef _Atomic(signed char)        atomic_schar;
+typedef _Atomic(unsigned char)      atomic_uchar;
+typedef _Atomic(short)              atomic_short;
+typedef _Atomic(unsigned short)     atomic_ushort;
+typedef _Atomic(int)                atomic_int;
+typedef _Atomic(unsigned int)       atomic_uint;
+typedef _Atomic(long)               atomic_long;
+typedef _Atomic(unsigned long)      atomic_ulong;
+typedef _Atomic(long long)          atomic_llong;
+typedef _Atomic(unsigned long long) atomic_ullong;
+typedef _Atomic(uint_least16_t)     atomic_char16_t;
+typedef _Atomic(uint_least32_t)     atomic_char32_t;
+typedef _Atomic(wchar_t)            atomic_wchar_t;
+typedef _Atomic(int_least8_t)       atomic_int_least8_t;
+typedef _Atomic(uint_least8_t)      atomic_uint_least8_t;
+typedef _Atomic(int_least16_t)      atomic_int_least16_t;
+typedef _Atomic(uint_least16_t)     atomic_uint_least16_t;
+typedef _Atomic(int_least32_t)      atomic_int_least32_t;
+typedef _Atomic(uint_least32_t)     atomic_uint_least32_t;
+typedef _Atomic(int_least64_t)      atomic_int_least64_t;
+typedef _Atomic(uint_least64_t)     atomic_uint_least64_t;
+typedef _Atomic(int_fast8_t)        atomic_int_fast8_t;
+typedef _Atomic(uint_fast8_t)       atomic_uint_fast8_t;
+typedef _Atomic(int_fast16_t)       atomic_int_fast16_t;
+typedef _Atomic(uint_fast16_t)      atomic_uint_fast16_t;
+typedef _Atomic(int_fast32_t)       atomic_int_fast32_t;
+typedef _Atomic(uint_fast32_t)      atomic_uint_fast32_t;
+typedef _Atomic(int_fast64_t)       atomic_int_fast64_t;
+typedef _Atomic(uint_fast64_t)      atomic_uint_fast64_t;
+typedef _Atomic(intptr_t)           atomic_intptr_t;
+typedef _Atomic(uintptr_t)          atomic_uintptr_t;
+typedef _Atomic(size_t)             atomic_size_t;
+typedef _Atomic(ptrdiff_t)          atomic_ptrdiff_t;
+typedef _Atomic(intmax_t)           atomic_intmax_t;
+typedef _Atomic(uintmax_t)          atomic_uintmax_t;
+
+/* 7.17.7 Operations on atomic types */
+
+#define atomic_store(object, desired) __c11_atomic_store(object, desired, __ATOMIC_SEQ_CST)
+#define atomic_store_explicit __c11_atomic_store
+
+#define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST)
+#define atomic_load_explicit __c11_atomic_load
+
+#define atomic_exchange(object, desired) __c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST)
+#define atomic_exchange_explicit __c11_atomic_exchange
+
+#define atomic_compare_exchange_strong(object, expected, desired) __c11_atomic_compare_exchange_strong(object, expected, desired, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)
+#define atomic_compare_exchange_strong_explicit __c11_atomic_compare_exchange_strong
+
+#define atomic_compare_exchange_weak(object, expected, desired) __c11_atomic_compare_exchange_weak(object, expected, desired, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)
+#define atomic_compare_exchange_weak_explicit __c11_atomic_compare_exchange_weak
+
+#define atomic_fetch_add(object, operand) __c11_atomic_fetch_add(object, operand, __ATOMIC_SEQ_CST)
+#define atomic_fetch_add_explicit __c11_atomic_fetch_add
+
+#define atomic_fetch_sub(object, operand) __c11_atomic_fetch_sub(object, operand, __ATOMIC_SEQ_CST)
+#define atomic_fetch_sub_explicit __c11_atomic_fetch_sub
+
+#define atomic_fetch_or(object, operand) __c11_atomic_fetch_or(object, operand, __ATOMIC_SEQ_CST)
+#define atomic_fetch_or_explicit __c11_atomic_fetch_or
+
+#define atomic_fetch_xor(object, operand) __c11_atomic_fetch_xor(object, operand, __ATOMIC_SEQ_CST)
+#define atomic_fetch_xor_explicit __c11_atomic_fetch_xor
+
+#define atomic_fetch_and(object, operand) __c11_atomic_fetch_and(object, operand, __ATOMIC_SEQ_CST)
+#define atomic_fetch_and_explicit __c11_atomic_fetch_and
+
+/* 7.17.8 Atomic flag type and operations */
+
+typedef struct atomic_flag { atomic_bool _Value; } atomic_flag;
+
+#define ATOMIC_FLAG_INIT { 0 }
+
+/* These should be provided by the libc implementation. */
+#ifdef __cplusplus
+bool atomic_flag_test_and_set(volatile atomic_flag *);
+bool atomic_flag_test_and_set_explicit(volatile atomic_flag *, memory_order);
+#else
+_Bool atomic_flag_test_and_set(volatile atomic_flag *);
+_Bool atomic_flag_test_and_set_explicit(volatile atomic_flag *, memory_order);
+#endif
+void atomic_flag_clear(volatile atomic_flag *);
+void atomic_flag_clear_explicit(volatile atomic_flag *, memory_order);
+
+#define atomic_flag_test_and_set(object) __c11_atomic_exchange(&(object)->_Value, 1, __ATOMIC_SEQ_CST)
+#define atomic_flag_test_and_set_explicit(object, order) __c11_atomic_exchange(&(object)->_Value, 1, order)
+
+#define atomic_flag_clear(object) __c11_atomic_store(&(object)->_Value, 0, __ATOMIC_SEQ_CST)
+#define atomic_flag_clear_explicit(object, order) __c11_atomic_store(&(object)->_Value, 0, order)
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __STDC_HOSTED__ */
+#endif /* __CLANG_STDATOMIC_H */
+
diff --git third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h
index 0543da54d80..ccb734f85b2 100644
--- third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h
+++ third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h
@@ -115,6 +115,7 @@
 //   GTEST_OS_CYGWIN   - Cygwin
 //   GTEST_OS_DRAGONFLY - DragonFlyBSD
 //   GTEST_OS_FREEBSD  - FreeBSD
+//   GTEST_OS_DRAGONFLY- DragonFly BSD
 //   GTEST_OS_FUCHSIA  - Fuchsia
 //   GTEST_OS_GNU_KFREEBSD - GNU/kFreeBSD
 //   GTEST_OS_HAIKU    - Haiku
diff --git third_party/googletest/src/googletest/src/gtest-port.cc third_party/googletest/src/googletest/src/gtest-port.cc
index ee11c39e19b..f75ff012327 100644
--- third_party/googletest/src/googletest/src/gtest-port.cc
+++ third_party/googletest/src/googletest/src/gtest-port.cc
@@ -64,7 +64,7 @@
 # endif
 #endif
 
-#if GTEST_OS_FREEBSD
+#if GTEST_OS_FREEBSD || GTEST_OS_DRAGONFLY
 #include <sys/sysctl.h>
 #include <sys/user.h>
 #endif
@@ -145,9 +145,13 @@ size_t GetThreadCount() {
   }
 }
 
-#elif GTEST_OS_FREEBSD
+#elif GTEST_OS_FREEBSD || GTEST_OS_DRAGONFLY
 
+#ifdef GTEST_OS_FREEBSD
 #define KP_NLWP(kp) (kp.ki_numthreads)
+#else
+#define KP_NLWP(kp) (kp.kp_nthreads)
+#endif
 
 // Return the number of threads running in the process, or 0 to indicate that
 // we cannot detect it.
diff --git third_party/grpc/src/include/grpc/impl/codegen/port_platform.h third_party/grpc/src/include/grpc/impl/codegen/port_platform.h
index d7294d59d41..b2325f2eec0 100644
--- third_party/grpc/src/include/grpc/impl/codegen/port_platform.h
+++ third_party/grpc/src/include/grpc/impl/codegen/port_platform.h
@@ -248,7 +248,7 @@
 #else /* _LP64 */
 #define GPR_ARCH_32 1
 #endif /* _LP64 */
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #define GPR_PLATFORM_STRING "freebsd"
 #ifndef _BSD_SOURCE
 #define _BSD_SOURCE
diff --git third_party/grpc/src/setup.py third_party/grpc/src/setup.py
index 1e205bdf91d..403e293d1ad 100644
--- third_party/grpc/src/setup.py
+++ third_party/grpc/src/setup.py
@@ -45,6 +45,8 @@ if 'darwin' in sys.platform:
   CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_darwin'),)
 if 'freebsd' in sys.platform:
   CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_freebsd'),)
+if 'dragonfly' in sys.platform:
+  CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_freebsd'),)
 if 'linux' in sys.platform:
   CARES_INCLUDE += (os.path.join('third_party', 'cares', 'config_linux'),)
 if 'openbsd' in sys.platform:
diff --git third_party/grpc/src/src/c-ares/gen_build_yaml.py third_party/grpc/src/src/c-ares/gen_build_yaml.py
index 6e832edcea3..e8d3c559931 100755
--- third_party/grpc/src/src/c-ares/gen_build_yaml.py
+++ third_party/grpc/src/src/c-ares/gen_build_yaml.py
@@ -33,6 +33,8 @@ try:
       return 'src/cares/cares/config_darwin/ares_config.h'
     if 'freebsd' in sys.platform:
       return 'src/cares/cares/config_freebsd/ares_config.h'
+    if 'dragonfly' in sys.platform:
+      return 'src/cares/cares/config_freebsd/ares_config.h'
     if 'linux' in sys.platform:
       return 'src/cares/cares/config_linux/ares_config.h'
     if 'openbsd' in sys.platform:
diff --git third_party/grpc/src/test/cpp/qps/json_run_localhost.cc third_party/grpc/src/test/cpp/qps/json_run_localhost.cc
index 42cc9e0ed76..6b2cc2b3b15 100644
--- third_party/grpc/src/test/cpp/qps/json_run_localhost.cc
+++ third_party/grpc/src/test/cpp/qps/json_run_localhost.cc
@@ -24,7 +24,7 @@
 #include <sstream>
 #include <string>
 
-#ifdef __FreeBSD__
+#ifdef defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/wait.h>
 #endif
 
diff --git third_party/icu/source/common/unicode/platform.h third_party/icu/source/common/unicode/platform.h
index ad75b298a42..c2ac6a197be 100644
--- third_party/icu/source/common/unicode/platform.h
+++ third_party/icu/source/common/unicode/platform.h
@@ -173,8 +173,8 @@
 #   else
 #       define U_PLATFORM U_PF_DARWIN
 #   endif
-#elif defined(BSD) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__MirBSD__)
-#   if defined(__FreeBSD__)
+#elif defined(BSD) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__MirBSD__) || defined(__DragonFly__)
+#   if defined(__FreeBSD__) || defined(__DragonFly__)
 #       include <sys/endian.h>
 #   endif
 #   define U_PLATFORM U_PF_BSD
diff --git third_party/libFuzzer/src/FuzzerDefs.h third_party/libFuzzer/src/FuzzerDefs.h
index 5dc2d8e1ac0..37692bb3a51 100644
--- third_party/libFuzzer/src/FuzzerDefs.h
+++ third_party/libFuzzer/src/FuzzerDefs.h
@@ -46,7 +46,7 @@
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_OPENBSD 0
 #define LIBFUZZER_WINDOWS 0
-#elif __FreeBSD__
+#elif __FreeBSD__ || __DragonFly__
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_FUCHSIA 0
 #define LIBFUZZER_LINUX 0
diff --git third_party/libFuzzer/src/afl/afl_driver.cpp third_party/libFuzzer/src/afl/afl_driver.cpp
index f21dfc58fed..cbfc0b69187 100644
--- third_party/libFuzzer/src/afl/afl_driver.cpp
+++ third_party/libFuzzer/src/afl/afl_driver.cpp
@@ -72,7 +72,7 @@ If 1, close stdout at startup. If 2 close stderr; if 3 close both.
 #define LIBFUZZER_NETBSD 1
 #define LIBFUZZER_FREEBSD 0
 #define LIBFUZZER_OPENBSD 0
-#elif __FreeBSD__
+#elif __FreeBSD__ || __DragonFly__
 #define LIBFUZZER_LINUX 0
 #define LIBFUZZER_APPLE 0
 #define LIBFUZZER_NETBSD 0
diff --git third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port-arch.h third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port-arch.h
index 74ab949057c..1c931c32cdd 100644
--- third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port-arch.h
+++ third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port-arch.h
@@ -67,6 +67,8 @@
 # if TARGET_OS_IPHONE
 #  define GTEST_OS_IOS 1
 # endif
+#elif defined __DragonFly__
+# define GTEST_OS_DRAGONFLY 1
 #elif defined __FreeBSD__
 # define GTEST_OS_FREEBSD 1
 #elif defined __linux__
diff --git third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h
index da57e65d338..0862d7bb375 100644
--- third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h
+++ third_party/libaom/source/libaom/third_party/googletest/src/googletest/include/gtest/internal/gtest-port.h
@@ -121,6 +121,7 @@
 //
 //   GTEST_OS_AIX      - IBM AIX
 //   GTEST_OS_CYGWIN   - Cygwin
+//   GTEST_OS_DRAGONFLY - DragonFly
 //   GTEST_OS_FREEBSD  - FreeBSD
 //   GTEST_OS_HPUX     - HP-UX
 //   GTEST_OS_LINUX    - Linux
@@ -601,7 +602,7 @@ struct _RTL_CRITICAL_SECTION;
 // To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
 // to your compiler flags.
 # define GTEST_HAS_PTHREAD (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX \
-    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL)
+    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_DRAGONFLY || GTEST_OS_NACL)
 #endif  // GTEST_HAS_PTHREAD
 
 #if GTEST_HAS_PTHREAD
@@ -790,7 +791,8 @@ using ::std::tuple_size;
      (GTEST_OS_MAC && !GTEST_OS_IOS) || \
      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || \
      GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
-     GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD)
+     GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD || \
+     GTEST_OS_DRAGONFLY)
 # define GTEST_HAS_DEATH_TEST 1
 #endif
 
diff --git third_party/libdrm/src/xf86drmMode.c third_party/libdrm/src/xf86drmMode.c
index 15957ffcba1..24d7fc79239 100644
--- third_party/libdrm/src/xf86drmMode.c
+++ third_party/libdrm/src/xf86drmMode.c
@@ -796,7 +796,7 @@ int drmCheckModesettingSupported(const char *busid)
 	closedir(sysdir);
 	if (found)
 		return 0;
-#elif defined (__FreeBSD__) || defined (__FreeBSD_kernel__)
+#elif defined (__FreeBSD__) || defined (__FreeBSD_kernel__) || defined(__DragonFly__)
 	char kbusid[1024], sbusid[1024];
 	char oid[128];
 	int domain, bus, dev, func;
@@ -829,8 +829,6 @@ int drmCheckModesettingSupported(const char *busid)
 			return -EINVAL;
 		return (modesetting ? 0 : -ENOSYS);
 	}
-#elif defined(__DragonFly__)
-	return 0;
 #endif
 #ifdef __OpenBSD__
 	int	fd;
diff --git third_party/libphonenumber/dist/cpp/src/phonenumbers/base/memory/singleton.h third_party/libphonenumber/dist/cpp/src/phonenumbers/base/memory/singleton.h
index 99a1fdbf4e7..74a009b4316 100644
--- third_party/libphonenumber/dist/cpp/src/phonenumbers/base/memory/singleton.h
+++ third_party/libphonenumber/dist/cpp/src/phonenumbers/base/memory/singleton.h
@@ -56,7 +56,8 @@ template <class T> boost::once_flag Singleton<T>::flag = BOOST_ONCE_INIT;
 #include "phonenumbers/base/logging.h"
 #include "phonenumbers/base/thread_checker.h"
 
-#if !defined(__linux__) && !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__OpenBSD__)
+#if !defined(__linux__) && !defined(__APPLE__) && !defined(__FreeBSD__) && \
+  !defined(__OpenBSD__) && !defined(__DragonFly__)
 
 namespace i18n {
 namespace phonenumbers {
diff --git third_party/libphonenumber/dist/cpp/src/phonenumbers/base/synchronization/lock.h third_party/libphonenumber/dist/cpp/src/phonenumbers/base/synchronization/lock.h
index 6ce10fd8ab2..046c338f52a 100644
--- third_party/libphonenumber/dist/cpp/src/phonenumbers/base/synchronization/lock.h
+++ third_party/libphonenumber/dist/cpp/src/phonenumbers/base/synchronization/lock.h
@@ -63,7 +63,8 @@ private:
 // Dummy lock implementation on non-POSIX platforms. If you are running on a
 // different platform and care about thread-safety, please compile with
 // -DI18N_PHONENUMBERS_USE_BOOST.
-#elif !defined(__linux__) && !defined(__APPLE__) && !defined(__FreeBSD__)
+#elif !defined(__linux__) && !defined(__APPLE__) && !defined(__FreeBSD__) && \
+  !defined(__OpenBSD__) && !defined(__DragonFly__)
 
 namespace i18n {
 namespace phonenumbers {
diff --git third_party/libphonenumber/dist/cpp/src/phonenumbers/base/thread_checker.h third_party/libphonenumber/dist/cpp/src/phonenumbers/base/thread_checker.h
index 14a5d98878e..21a242bebd4 100644
--- third_party/libphonenumber/dist/cpp/src/phonenumbers/base/thread_checker.h
+++ third_party/libphonenumber/dist/cpp/src/phonenumbers/base/thread_checker.h
@@ -24,7 +24,7 @@
 // it is not depending on Boost.
 #if !defined(__linux__) && !defined(__APPLE__) && \
     !defined(__FreeBSD__) && !defined(__OpenBSD__) && \
-    !defined(I18N_PHONENUMBERS_NO_THREAD_SAFETY)
+    !defined(__DragonFly__) && !defined(I18N_PHONENUMBERS_NO_THREAD_SAFETY)
 #error Building without Boost, please provide \
        -DI18N_PHONENUMBERS_NO_THREAD_SAFETY
 #endif
@@ -32,7 +32,8 @@
 #endif
 
 #if !defined(NDEBUG) && !defined(I18N_PHONENUMBERS_USE_BOOST) && \
-    (defined(__linux__) || defined(__apple__)) || defined(__FreeBSD__) || defined(__OpenBSD__)
+    (defined(__linux__) || defined(__apple__)) || defined(__FreeBSD__) || \
+    defined(__OpenBSD__) || defined(__DragonFly__)
 
 #include <pthread.h>
 
diff --git third_party/libpng/arm/filter_neon.S third_party/libpng/arm/filter_neon.S
index 2308aad13e6..df123cd0bbe 100644
--- third_party/libpng/arm/filter_neon.S
+++ third_party/libpng/arm/filter_neon.S
@@ -16,7 +16,7 @@
 #define PNG_VERSION_INFO_ONLY
 #include "../pngpriv.h"
 
-#if (defined(__linux__) || defined(__FreeBSD__)) && defined(__ELF__)
+#if (defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)) && defined(__ELF__)
 .section .note.GNU-stack,"",%progbits /* mark stack as non-executable */
 #endif
 
diff --git third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port-arch.h third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port-arch.h
index f83700e06d9..5274712ef9a 100644
--- third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port-arch.h
+++ third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port-arch.h
@@ -70,6 +70,8 @@
 # if TARGET_OS_IPHONE
 #  define GTEST_OS_IOS 1
 # endif
+#elif defined __DragonFly__
+# define GTEST_OS_DRAGONFLY 1
 #elif defined __FreeBSD__
 # define GTEST_OS_FREEBSD 1
 #elif defined __Fuchsia__
diff --git third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port.h third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port.h
index 786497d854c..07f2f86006f 100644
--- third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port.h
+++ third_party/libvpx/source/libvpx/third_party/googletest/src/include/gtest/internal/gtest-port.h
@@ -125,6 +125,7 @@
 //
 //   GTEST_OS_AIX      - IBM AIX
 //   GTEST_OS_CYGWIN   - Cygwin
+//   GTEST_OS_DRAGONFLY - DragonFly
 //   GTEST_OS_FREEBSD  - FreeBSD
 //   GTEST_OS_FUCHSIA  - Fuchsia
 //   GTEST_OS_HPUX     - HP-UX
@@ -637,7 +638,8 @@ typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
 // to your compiler flags.
 #define GTEST_HAS_PTHREAD                                             \
   (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX || \
-   GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA)
+   GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || \
+   GTEST_OS_FUCHSIA || GTEST_OS_DRAGONFLY)
 #endif  // GTEST_HAS_PTHREAD
 
 #if GTEST_HAS_PTHREAD
@@ -829,7 +831,7 @@ typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) ||          \
      GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
      GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD || \
-     GTEST_OS_NETBSD || GTEST_OS_FUCHSIA)
+     GTEST_OS_NETBSD || GTEST_OS_FUCHSIA || GTEST_OS_DRAGONFLY)
 # define GTEST_HAS_DEATH_TEST 1
 #endif
 
diff --git third_party/llvm/compiler-rt/test/fuzzer/lit.cfg.py third_party/llvm/compiler-rt/test/fuzzer/lit.cfg.py
index 00871b8a94a..71c5dcb2035 100644
--- third_party/llvm/compiler-rt/test/fuzzer/lit.cfg.py
+++ third_party/llvm/compiler-rt/test/fuzzer/lit.cfg.py
@@ -28,6 +28,7 @@ config.test_format = lit.formats.ShTest(execute_external)
 # LeakSanitizer is not supported on OSX or Windows right now.
 if (sys.platform.startswith('darwin') or
     sys.platform.startswith('freebsd') or
+    sys.platform.startswith('dragonfly') or
     sys.platform.startswith('win')):
   lit_config.note('lsan feature unavailable')
 else:
diff --git third_party/llvm/libcxx/utils/google-benchmark/src/timers.cc third_party/llvm/libcxx/utils/google-benchmark/src/timers.cc
index 7613ff92c6e..fc0e9fa3e8e 100644
--- third_party/llvm/libcxx/utils/google-benchmark/src/timers.cc
+++ third_party/llvm/libcxx/utils/google-benchmark/src/timers.cc
@@ -28,7 +28,7 @@
 #include <sys/time.h>
 #include <sys/types.h>  // this header must be included before 'sys/sysctl.h' to avoid compilation error on FreeBSD
 #include <unistd.h>
-#if defined BENCHMARK_OS_FREEBSD || defined BENCHMARK_OS_MACOSX
+#if defined BENCHMARK_OS_FREEBSD || defined BENCHMARK_OS_MACOSX || defined BENCHMARK_OS_DRAGONFLY
 #include <sys/sysctl.h>
 #endif
 #if defined(BENCHMARK_OS_MACOSX)
diff --git third_party/llvm/llvm/utils/benchmark/src/internal_macros.h third_party/llvm/llvm/utils/benchmark/src/internal_macros.h
index f2d54bfcbd9..3a8a3ca725c 100644
--- third_party/llvm/llvm/utils/benchmark/src/internal_macros.h
+++ third_party/llvm/llvm/utils/benchmark/src/internal_macros.h
@@ -47,6 +47,8 @@
       #define BENCHMARK_OS_IOS 1
     #endif
   #endif
+#elif defined(__DragonFly__)
+  #define BENCHMARK_OS_DRAGONFLY 1
 #elif defined(__FreeBSD__)
   #define BENCHMARK_OS_FREEBSD 1
 #elif defined(__NetBSD__)
diff --git third_party/llvm/llvm/utils/benchmark/src/sysinfo.cc third_party/llvm/llvm/utils/benchmark/src/sysinfo.cc
index 01dd8a0317b..d36b7bbf408 100644
--- third_party/llvm/llvm/utils/benchmark/src/sysinfo.cc
+++ third_party/llvm/llvm/utils/benchmark/src/sysinfo.cc
@@ -28,7 +28,8 @@
 #include <sys/types.h>  // this header must be included before 'sys/sysctl.h' to avoid compilation error on FreeBSD
 #include <unistd.h>
 #if defined BENCHMARK_OS_FREEBSD || defined BENCHMARK_OS_MACOSX || \
-    defined BENCHMARK_OS_NETBSD || defined BENCHMARK_OS_OPENBSD
+    defined BENCHMARK_OS_NETBSD || defined BENCHMARK_OS_OPENBSD || \
+    defined BENCHMARK_OS_DRAGONFLY
 #define BENCHMARK_HAS_SYSCTL
 #include <sys/sysctl.h>
 #endif
@@ -507,6 +508,8 @@ double GetCPUCyclesPerSecond() {
   constexpr auto* FreqStr =
 #if defined(BENCHMARK_OS_FREEBSD) || defined(BENCHMARK_OS_NETBSD)
       "machdep.tsc_freq";
+#elif defined BENCHMARK_OS_DRAGONFLY
+      "hw.tsc_frequency";
 #elif defined BENCHMARK_OS_OPENBSD
       "hw.cpuspeed";
 #else
diff --git third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h
index f1319c7f2e2..d4185a2a4a9 100644
--- third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h
+++ third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h
@@ -67,6 +67,8 @@
 # if TARGET_OS_IPHONE
 #  define GTEST_OS_IOS 1
 # endif
+#elif defined __DragonFly__
+# define GTEST_OS_DRAGONFLY 1
 #elif defined __FreeBSD__
 # define GTEST_OS_FREEBSD 1
 #elif defined __linux__
diff --git third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h
index 86e75a32ef4..f92ae15417a 100644
--- third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h
+++ third_party/llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h
@@ -121,6 +121,7 @@
 //
 //   GTEST_OS_AIX      - IBM AIX
 //   GTEST_OS_CYGWIN   - Cygwin
+//   GTEST_OS_DRAGONFLY - DragonFly
 //   GTEST_OS_FREEBSD  - FreeBSD
 //   GTEST_OS_HAIKU    - Haiku
 //   GTEST_OS_HPUX     - HP-UX
@@ -604,7 +605,7 @@ struct _RTL_CRITICAL_SECTION;
 // To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
 // to your compiler flags.
 # define GTEST_HAS_PTHREAD (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX \
-    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL)
+    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_DRAGONFLY)
 #endif  // GTEST_HAS_PTHREAD
 
 #if GTEST_HAS_PTHREAD
@@ -793,6 +794,7 @@ using ::std::tuple_size;
      (GTEST_OS_MAC && !GTEST_OS_IOS) || \
      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || \
      GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
+     GTEST_OS_DRAGONFLY || \
      GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NETBSD)
 # define GTEST_HAS_DEATH_TEST 1
 #endif
diff --git third_party/minizip/src/lib/brg/brg_endian.h third_party/minizip/src/lib/brg/brg_endian.h
index 9ef4af58030..ec51db6a952 100644
--- third_party/minizip/src/lib/brg/brg_endian.h
+++ third_party/minizip/src/lib/brg/brg_endian.h
@@ -27,7 +27,8 @@ Issue Date: 20/12/2007
 /* Include files where endian defines and byteswap functions may reside */
 #if defined( __sun )
 #  include <sys/isa_defs.h>
-#elif defined( __FreeBSD__ ) || defined( __OpenBSD__ ) || defined( __NetBSD__ )
+#elif defined( __FreeBSD__ ) || defined( __OpenBSD__ ) || defined( __NetBSD__ ) || \
+      defined(__DragonFly__)
 #  include <sys/endian.h>
 #elif defined( BSD ) && ( BSD >= 199103 ) || defined( __APPLE__ ) || \
       defined( __CYGWIN32__ ) || defined( __DJGPP__ ) || defined( __osf__ ) || \
diff --git third_party/node/node.py third_party/node/node.py
index cc0c2f0518a..19d90e32674 100755
--- third_party/node/node.py
+++ third_party/node/node.py
@@ -12,6 +12,7 @@ import sys
 def GetBinaryPath():
   return os_path.join(os_path.dirname(__file__), *{
     'Darwin': ('mac', 'node-darwin-x64', 'bin', 'node'),
+    'DragonFly': ('dragonfly', 'node-dragonfly-x64', 'bin', 'node'),
     'FreeBSD': ('freebsd', 'node-freebsd-x64', 'bin', 'node'),
     'Linux': ('linux', 'node-linux-x64', 'bin', 'node'),
     'Windows': ('win', 'node.exe'),
diff --git third_party/pdfium/core/fxcrt/fx_system.h third_party/pdfium/core/fxcrt/fx_system.h
index 746534a2255..8e20055aaf3 100644
--- third_party/pdfium/core/fxcrt/fx_system.h
+++ third_party/pdfium/core/fxcrt/fx_system.h
@@ -26,7 +26,7 @@
 #define _FX_PLATFORM_ _FX_PLATFORM_WINDOWS_
 #elif defined(_WIN64)
 #define _FX_PLATFORM_ _FX_PLATFORM_WINDOWS_
-#elif defined(__linux__) || defined(__FreeBSD__)
+#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #define _FX_PLATFORM_ _FX_PLATFORM_LINUX_
 #elif defined(__APPLE__)
 #define _FX_PLATFORM_ _FX_PLATFORM_APPLE_
diff --git third_party/pdfium/fxjs/cjs_publicmethods.cpp third_party/pdfium/fxjs/cjs_publicmethods.cpp
index 9ad58d194e1..3a4dad45208 100644
--- third_party/pdfium/fxjs/cjs_publicmethods.cpp
+++ third_party/pdfium/fxjs/cjs_publicmethods.cpp
@@ -86,7 +86,7 @@ constexpr const wchar_t* kDateFormats[] = {L"m/d",
 constexpr const wchar_t* kTimeFormats[] = {L"HH:MM", L"h:MM tt", L"HH:MM:ss",
                                            L"h:MM:ss tt"};
 
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 /*
  * cvt.c - IEEE floating point formatting routines for FreeBSD
  * from GNU libc-4.6.27
diff --git third_party/pdfium/fxjs/fx_date_helpers.cpp third_party/pdfium/fxjs/fx_date_helpers.cpp
index 3375ecb3d75..4fdab91c3c2 100644
--- third_party/pdfium/fxjs/fx_date_helpers.cpp
+++ third_party/pdfium/fxjs/fx_date_helpers.cpp
@@ -35,7 +35,7 @@ double GetLocalTZA() {
     return 0;
   time_t t = 0;
   FXSYS_time(&t);
-#ifdef __FreeBSD__
+#if defined(__FreeBSD__) || defined(__DragonFly__)
   struct tm lt;
   localtime_r(&t, &lt);
   return (double)(-(lt.tm_gmtoff * 1000));
@@ -48,7 +48,7 @@ double GetLocalTZA() {
   _get_timezone(&timezone);
 #endif
   return (double)(-(timezone * 1000));
-#endif // __FreeBSD__
+#endif // __FreeBSD__ || __DragonFly__
 }
 
 int GetDaylightSavingTA(double d) {
diff --git third_party/pdfium/fxjs/js_define.cpp third_party/pdfium/fxjs/js_define.cpp
index 0c0c02cdc26..d5b617d8689 100644
--- third_party/pdfium/fxjs/js_define.cpp
+++ third_party/pdfium/fxjs/js_define.cpp
@@ -14,6 +14,7 @@
 #include "core/fxcrt/fx_extension.h"
 #include "fxjs/cjs_document.h"
 #include "fxjs/cjs_object.h"
+
 #include "fxjs/fx_date_helpers.h"
 
 void JSDestructor(v8::Local<v8::Object> obj) {
diff --git third_party/pdfium/third_party/libopenjpeg20/opj_malloc.h third_party/pdfium/third_party/libopenjpeg20/opj_malloc.h
index 79b3a64102a..664877964ec 100644
--- third_party/pdfium/third_party/libopenjpeg20/opj_malloc.h
+++ third_party/pdfium/third_party/libopenjpeg20/opj_malloc.h
@@ -98,7 +98,7 @@ Allocate memory aligned to a 16 byte boundary
 #else /* Not _WIN32 */
   #if defined(__sun)
     #define HAVE_MEMALIGN
-  #elif defined(__FreeBSD__)
+  #elif defined(__FreeBSD__) || defined(__DragonFly__)
     #define HAVE_POSIX_MEMALIGN
   /* Linux x86_64 and OSX always align allocations to 16 bytes */
   #elif !defined(__amd64__) && !defined(__APPLE__) && !defined(_AIX)
diff --git third_party/pdfium/third_party/libpng16/arm/filter_neon.S third_party/pdfium/third_party/libpng16/arm/filter_neon.S
index 2308aad13e6..df123cd0bbe 100644
--- third_party/pdfium/third_party/libpng16/arm/filter_neon.S
+++ third_party/pdfium/third_party/libpng16/arm/filter_neon.S
@@ -16,7 +16,7 @@
 #define PNG_VERSION_INFO_ONLY
 #include "../pngpriv.h"
 
-#if (defined(__linux__) || defined(__FreeBSD__)) && defined(__ELF__)
+#if (defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)) && defined(__ELF__)
 .section .note.GNU-stack,"",%progbits /* mark stack as non-executable */
 #endif
 
diff --git third_party/perfetto/include/perfetto/base/build_config.h third_party/perfetto/include/perfetto/base/build_config.h
index 10df93412f8..e1d6e55a065 100644
--- third_party/perfetto/include/perfetto/base/build_config.h
+++ third_party/perfetto/include/perfetto/base/build_config.h
@@ -29,6 +29,7 @@
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_MACOSX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_LINUX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FREEBSD() 0
+#define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_DRAGONFLY() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WIN() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WASM() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 0
@@ -39,6 +40,7 @@
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_MACOSX() 1
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_LINUX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FREEBSD() 0
+#define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_DRAGONFLY() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WIN() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WASM() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 0
@@ -58,11 +60,12 @@
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_NACL() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_IOS() 0
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_ANDROID() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_MACOSX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_LINUX() 1
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FREEBSD() 1
+#define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_DRAGONFLY() 1
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WIN() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WASM() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 0
@@ -73,6 +76,7 @@
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_MACOSX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_LINUX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FREEBSD() 0
+#define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_DRAGONFLY() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WIN() 1
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WASM() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 0
@@ -83,6 +87,7 @@
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_MACOSX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_LINUX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FREEBSD() 0
+#define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_DRAGONFLY() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WIN() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WASM() 1
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 0
@@ -93,6 +98,7 @@
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_MACOSX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_LINUX() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FREEBSD() 0
+#define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_DRAGONFLY() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WIN() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_WASM() 0
 #define PERFETTO_BUILDFLAG_DEFINE_PERFETTO_OS_FUCHSIA() 1
diff --git third_party/perfetto/include/perfetto/base/thread_utils.h third_party/perfetto/include/perfetto/base/thread_utils.h
index f531fece1d7..0a9e08f4ad9 100644
--- third_party/perfetto/include/perfetto/base/thread_utils.h
+++ third_party/perfetto/include/perfetto/base/thread_utils.h
@@ -33,7 +33,9 @@
 #include <sys/types.h>
 #include <unistd.h>
 #endif
-#if PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD)
+
+#if PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD) || \
+    PERFETTO_BUILDFLAG(PERFETTO_OS_DRAGONFLY)
 #include <pthread_np.h>
 #endif
 
@@ -45,6 +47,11 @@ using PlatformThreadId = pid_t;
 inline PlatformThreadId GetThreadId() {
   return gettid();
 }
+#elif PERFETTO_BUILDFLAG(PERFETTO_OS_DRAGONFLY)
+using PlatformThreadId = int;
+inline PlatformThreadId GetThreadId() {
+  return pthread_getthreadid_np();
+}
 #elif PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD)
 using PlatformThreadId = pid_t;
 inline PlatformThreadId GetThreadId() {
diff --git third_party/perfetto/include/perfetto/base/time.h third_party/perfetto/include/perfetto/base/time.h
index 5961299a446..bdcc35d6002 100644
--- third_party/perfetto/include/perfetto/base/time.h
+++ third_party/perfetto/include/perfetto/base/time.h
@@ -141,7 +141,8 @@ inline TimeNanos GetTimeInternalNs(clockid_t clk_id) {
 // Return ns from boot. Conversely to GetWallTimeNs, this clock counts also time
 // during suspend (when supported).
 inline TimeNanos GetBootTimeNs() {
-#if PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD)
+#if PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD) || \
+    PERFETTO_BUILDFLAG(PERFETTO_OS_DRAGONFLY)
   return GetTimeInternalNs(kWallTimeClockSource);
 #else
   // Determine if CLOCK_BOOTTIME is available on the first call.
diff --git third_party/perfetto/include/perfetto/ext/base/event_fd.h third_party/perfetto/include/perfetto/ext/base/event_fd.h
index ad46cde38a2..c10b3d10cc1 100644
--- third_party/perfetto/include/perfetto/ext/base/event_fd.h
+++ third_party/perfetto/include/perfetto/ext/base/event_fd.h
@@ -20,8 +20,10 @@
 #include "perfetto/base/build_config.h"
 #include "perfetto/ext/base/scoped_file.h"
 
-#if !PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD) && (PERFETTO_BUILDFLAG(PERFETTO_OS_LINUX) || \
-    PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID))
+#if (PERFETTO_BUILDFLAG(PERFETTO_OS_LINUX) || \
+    PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID)) && \
+    !PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD) && \
+    !PERFETTO_BUILDFLAG(PERFETTO_OS_DRAGONFLY)
 #define PERFETTO_USE_EVENTFD() 1
 #else
 #define PERFETTO_USE_EVENTFD() 0
diff --git third_party/perfetto/src/base/file_utils.cc third_party/perfetto/src/base/file_utils.cc
index b8020adcb0b..3697bbc843f 100644
--- third_party/perfetto/src/base/file_utils.cc
+++ third_party/perfetto/src/base/file_utils.cc
@@ -91,7 +91,11 @@ bool FlushFile(int fd) {
   PERFETTO_DCHECK(fd != 0);
 #if PERFETTO_BUILDFLAG(PERFETTO_OS_LINUX) || \
     PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID)
+#ifdef __DragonFly__
+  return !PERFETTO_EINTR(fsync(fd));
+#else
   return !PERFETTO_EINTR(fdatasync(fd));
+#endif
 #elif PERFETTO_BUILDFLAG(PERFETTO_OS_WIN)
   return !PERFETTO_EINTR(_commit(fd));
 #else
diff --git third_party/perfetto/src/base/unix_socket.cc third_party/perfetto/src/base/unix_socket.cc
index c1b0a5dda18..af0c9993bff 100644
--- third_party/perfetto/src/base/unix_socket.cc
+++ third_party/perfetto/src/base/unix_socket.cc
@@ -601,8 +601,9 @@ void UnixSocket::ReadPeerCredentials() {
   if (sock_raw_.family() != SockFamily::kUnix)
     return;
 
-#if (PERFETTO_BUILDFLAG(PERFETTO_OS_LINUX) && !PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD)) || \
-    PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID)
+#if (PERFETTO_BUILDFLAG(PERFETTO_OS_LINUX) && \
+     (!PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD) && !PERFETTO_BUILDFLAG(PERFETTO_OS_DRAGONFLY)) || \
+     PERFETTO_BUILDFLAG(PERFETTO_OS_ANDROID))
   struct ucred user_cred;
   socklen_t len = sizeof(user_cred);
   int fd = sock_raw_.fd();
diff --git third_party/perfetto/src/tracing/core/tracing_service_impl.cc third_party/perfetto/src/tracing/core/tracing_service_impl.cc
index 8f69abb08a7..a4911cc3bcf 100644
--- third_party/perfetto/src/tracing/core/tracing_service_impl.cc
+++ third_party/perfetto/src/tracing/core/tracing_service_impl.cc
@@ -2307,6 +2307,7 @@ void TracingServiceImpl::SnapshotClocks(std::vector<TracePacket>* packets,
 #if !PERFETTO_BUILDFLAG(PERFETTO_OS_MACOSX) && \
     !PERFETTO_BUILDFLAG(PERFETTO_OS_WIN) &&    \
     !PERFETTO_BUILDFLAG(PERFETTO_OS_FREEBSD) && \
+    !PERFETTO_BUILDFLAG(PERFETTO_OS_DRAGONFLY) && \
     !PERFETTO_BUILDFLAG(PERFETTO_OS_NACL)
   struct {
     clockid_t id;
diff --git third_party/protobuf/src/google/protobuf/stubs/platform_macros.h third_party/protobuf/src/google/protobuf/stubs/platform_macros.h
index fb93f21ecf4..f1e1c843c2a 100644
--- third_party/protobuf/src/google/protobuf/stubs/platform_macros.h
+++ third_party/protobuf/src/google/protobuf/stubs/platform_macros.h
@@ -118,7 +118,8 @@ GOOGLE_PROTOBUF_PLATFORM_ERROR
 
 #undef GOOGLE_PROTOBUF_PLATFORM_ERROR
 
-#if defined(GOOGLE_PROTOBUF_OS_ANDROID) || defined(GOOGLE_PROTOBUF_OS_IPHONE) || defined(__FreeBSD__)
+#if defined(GOOGLE_PROTOBUF_OS_ANDROID) || defined(GOOGLE_PROTOBUF_OS_IPHONE) || \
+  defined(__FreeBSD__) || defined(__DragonFly__)
 // Android ndk does not support the __thread keyword very well yet. Here
 // we use pthread_key_create()/pthread_getspecific()/... methods for
 // TLS support on android.
diff --git third_party/skia/src/gpu/GrAutoLocaleSetter.h third_party/skia/src/gpu/GrAutoLocaleSetter.h
index c0b75ea1671..d96cba3306b 100644
--- third_party/skia/src/gpu/GrAutoLocaleSetter.h
+++ third_party/skia/src/gpu/GrAutoLocaleSetter.h
@@ -27,7 +27,8 @@
 #define HAVE_XLOCALE 0
 #endif
 
-#if defined(SK_BUILD_FOR_ANDROID) || defined(__UCLIBC__) || defined(_NEWLIB_VERSION) || defined(__FreeBSD__)
+#if defined(SK_BUILD_FOR_ANDROID) || defined(__UCLIBC__) || \
+  defined(_NEWLIB_VERSION) || defined(__FreeBSD__) || defined(__DragonFly__)
 #define HAVE_LOCALE_T 0
 #else
 #define HAVE_LOCALE_T 1
diff --git third_party/skia/src/ports/SkOSFile_stdio.cpp third_party/skia/src/ports/SkOSFile_stdio.cpp
index f6e4433566d..8a4817fd5ba 100644
--- third_party/skia/src/ports/SkOSFile_stdio.cpp
+++ third_party/skia/src/ports/SkOSFile_stdio.cpp
@@ -132,7 +132,7 @@ void sk_fflush(FILE* f) {
 
 void sk_fsync(FILE* f) {
 #if !defined(_WIN32) && !defined(SK_BUILD_FOR_ANDROID) && !defined(__UCLIBC__) \
-        && !defined(_NEWLIB_VERSION) && !defined(__FreeBSD__)
+  && !defined(_NEWLIB_VERSION) && !defined(__FreeBSD__) && !defined(__DragonFly__)
     int fd = fileno(f);
     fsync(fd);
 #endif
diff --git third_party/skia/third_party/vulkanmemoryallocator/include/vk_mem_alloc.h third_party/skia/third_party/vulkanmemoryallocator/include/vk_mem_alloc.h
index af2595f97f3..7451d7be4d9 100644
--- third_party/skia/third_party/vulkanmemoryallocator/include/vk_mem_alloc.h
+++ third_party/skia/third_party/vulkanmemoryallocator/include/vk_mem_alloc.h
@@ -2232,7 +2232,7 @@ remove them if not needed.
 #include <mutex> // for std::mutex
 #include <atomic> // for std::atomic
 
-#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__FreeBSD__)
+#if !defined(__DragonFly__) && !defined(_WIN32) && !defined(__APPLE__) && !defined(__FreeBSD__)
     #include <malloc.h> // for aligned_alloc()
 #endif
 
diff --git third_party/sqlite/BUILD.gn third_party/sqlite/BUILD.gn
index 09e812e41b1..f0e55b0d611 100644
--- third_party/sqlite/BUILD.gn
+++ third_party/sqlite/BUILD.gn
@@ -316,7 +316,7 @@ component("chromium_sqlite3") {
   if (is_linux || is_android) {
     defines += [
       # Linux provides fdatasync(), a faster equivalent of fsync().
-      "fdatasync=fdatasync",
+      "fdatasync=fsync",
     ]
   }
 
diff --git third_party/swiftshader/src/Common/Configurator.cpp third_party/swiftshader/src/Common/Configurator.cpp
index 0e74b12751a..50fb2b47ec1 100644
--- third_party/swiftshader/src/Common/Configurator.cpp
+++ third_party/swiftshader/src/Common/Configurator.cpp
@@ -42,7 +42,7 @@ namespace sw
 
 	bool Configurator::readFile()
 	{
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
                 return false;
 #endif      
 		#if defined(__unix__)
diff --git third_party/swiftshader/src/Common/MutexLock.hpp third_party/swiftshader/src/Common/MutexLock.hpp
index 8784278b535..62df5eacc35 100644
--- third_party/swiftshader/src/Common/MutexLock.hpp
+++ third_party/swiftshader/src/Common/MutexLock.hpp
@@ -17,7 +17,7 @@
 
 #include "Thread.hpp"
 
-#if defined(__linux__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 // Use a pthread mutex on Linux. Since many processes may use SwiftShader
 // at the same time it's best to just have the scheduler overhead.
 #include <pthread.h>
diff --git third_party/swiftshader/src/Common/SharedLibrary.hpp third_party/swiftshader/src/Common/SharedLibrary.hpp
index d0f48e7c0bd..36b8081360e 100644
--- third_party/swiftshader/src/Common/SharedLibrary.hpp
+++ third_party/swiftshader/src/Common/SharedLibrary.hpp
@@ -97,7 +97,7 @@ void *loadLibrary(const std::string &libraryDirectory, const char *(&names)[n],
 
 	inline void *getLibraryHandle(const char *path)
 	{
-		#if defined( __ANDROID__) || defined(__FreeBSD__)
+        #if defined( __ANDROID__) || defined(__FreeBSD__) || defined(__DragonFly__)
 			// bionic doesn't support RTLD_NOLOAD before L
 			return dlopen(path, RTLD_NOW | RTLD_LOCAL);
 		#else
diff --git third_party/swiftshader/src/Main/SwiftConfig.cpp third_party/swiftshader/src/Main/SwiftConfig.cpp
index a09536d5c52..4d193b5308e 100644
--- third_party/swiftshader/src/Main/SwiftConfig.cpp
+++ third_party/swiftshader/src/Main/SwiftConfig.cpp
@@ -764,7 +764,7 @@ namespace sw
 		struct stat status;
 		int lastModified = ini.getInteger("LastModified", "Time", 0);
 
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) && !defined(__DragonFly__)
 		bool noConfig = stat("SwiftShader.ini", &status) != 0;
 #else
                bool noConfig = false;
diff --git third_party/swiftshader/src/OpenGL/compiler/osinclude.h third_party/swiftshader/src/OpenGL/compiler/osinclude.h
index 54d4c75025a..46cbcf125fd 100644
--- third_party/swiftshader/src/OpenGL/compiler/osinclude.h
+++ third_party/swiftshader/src/OpenGL/compiler/osinclude.h
@@ -26,7 +26,7 @@
       defined(__FreeBSD__) || defined(__OpenBSD__) || \
       defined(__sun) || defined(ANDROID) || \
       defined(__GLIBC__) || defined(__GNU__) || \
-      defined(__QNX__) || defined(__Fuchsia__)
+      defined(__QNX__) || defined(__Fuchsia__) || defined(__DragonFly__)
 #define ANGLE_OS_POSIX
 #else
 #error Unsupported platform.
diff --git third_party/swiftshader/src/OpenGL/libEGL/Display.cpp third_party/swiftshader/src/OpenGL/libEGL/Display.cpp
index d94fbf3dd58..ad24979b86f 100644
--- third_party/swiftshader/src/OpenGL/libEGL/Display.cpp
+++ third_party/swiftshader/src/OpenGL/libEGL/Display.cpp
@@ -690,7 +690,7 @@ bool Display::isValidWindow(EGLNativeWindowType window)
 			return status != 0;
 		}
 		return false;
-	#elif defined(__linux__) || defined(__FreeBSD__)
+	#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 		return false;  // Non X11 linux is headless only
 	#elif defined(__APPLE__)
 		return sw::OSX::IsValidWindow(window);
@@ -868,7 +868,7 @@ sw::Format Display::getDisplayFormat() const
 		{
 			return sw::FORMAT_X8R8G8B8;
 		}
-	#elif defined(__linux__) || defined(__FreeBSD__) // Non X11 linux is headless only
+	#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__) // Non X11 linux is headless only
 		return sw::FORMAT_A8B8G8R8;
 	#elif defined(__APPLE__)
 		return sw::FORMAT_A8B8G8R8;
diff --git third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp
index b06d627e6cc..febd2d5eb0b 100644
--- third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp
+++ third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp
@@ -362,7 +362,7 @@ bool WindowSurface::checkForResize()
 
 		int windowWidth = windowAttributes.width;
 		int windowHeight = windowAttributes.height;
-	#elif defined(__linux__) || defined(__FreeBSD__)
+	#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 		// Non X11 linux is headless only
 		int windowWidth = 100;
 		int windowHeight = 100;
diff --git third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp
index 66b8619c8f0..2d55102d147 100644
--- third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp
+++ third_party/swiftshader/src/OpenGL/libEGL/libEGL.cpp
@@ -153,7 +153,7 @@ EGLDisplay EGLAPIENTRY GetDisplay(EGLNativeDisplayType display_id)
 		// FIXME: Check if display_id is the default display
 	}
 
-	#if (defined(__linux__) || defined(__FreeBSD)) && !defined(__ANDROID__)
+    #if (defined(__linux__) || defined(__FreeBSD) || defined(__DragonFly__)) && !defined(__ANDROID__)
 		#if defined(USE_X11)
 		if(!libX11)
 		#endif  // Non X11 linux is headless only
@@ -216,7 +216,7 @@ const char *EGLAPIENTRY QueryString(EGLDisplay dpy, EGLint name)
 	{
 		return success(
 			"EGL_KHR_client_get_all_proc_addresses "
-#if (defined(__linux__) || defined(__FreeBSD__)) && !defined(__ANDROID__)
+#if (defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)) && !defined(__ANDROID__)
 			"EGL_KHR_platform_gbm "
 #endif
 #if defined(USE_X11)
@@ -1298,7 +1298,7 @@ EGLDisplay EGLAPIENTRY GetPlatformDisplay(EGLenum platform, void *native_display
 {
 	TRACE("(EGLenum platform = 0x%X, void *native_display = %p, const EGLAttrib *attrib_list = %p)", platform, native_display, attrib_list);
 
-	#if (defined(__linux__) || defined(__FreeBSD__)) && !defined(__ANDROID__)
+#if (defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)) && !defined(__ANDROID__)
 		switch(platform)
 		{
 		#if defined(USE_X11)
diff --git third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp
index 32feaec2932..fabc19b1dd6 100644
--- third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp
+++ third_party/swiftshader/src/OpenGL/libEGL/libEGL.hpp
@@ -100,7 +100,7 @@ private:
 				#endif
 			#elif defined(__ANDROID__)
 				const char *libEGL_lib[] = {"libEGL_swiftshader.so", "libEGL_swiftshader.so"};
-			#elif defined(__linux__) || defined(__FreeBSD__)
+			#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 				#if defined(__LP64__)
 					const char *libEGL_lib[] = {"lib64EGL_translator.so", "libEGL.so.1", "libEGL.so"};
 				#else
diff --git third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp
index f5ce1563195..566cf90c6fd 100644
--- third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp
+++ third_party/swiftshader/src/OpenGL/libGLES_CM/libGLES_CM.hpp
@@ -261,7 +261,7 @@ private:
 				#endif
 			#elif defined(__ANDROID__)
 				const char *libGLES_CM_lib[] = {"libGLESv1_CM_swiftshader.so", "libGLESv1_CM_swiftshader.so"};
-			#elif defined(__linux__) || defined(__FreeBSD__)
+			#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 				#if defined(__LP64__)
 					const char *libGLES_CM_lib[] = {"lib64GLES_CM_translator.so", "libGLES_CM.so.1", "libGLES_CM.so"};
 				#else
diff --git third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp
index 5e82611a4dc..27927c13f6e 100644
--- third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp
+++ third_party/swiftshader/src/OpenGL/libGLESv2/libGLESv2.hpp
@@ -286,7 +286,7 @@ private:
 				#endif
 			#elif defined(__ANDROID__)
 				const char *libGLESv2_lib[] = {"libGLESv2_swiftshader.so", "libGLESv2_swiftshader.so"};
-			#elif defined(__linux__) || defined(__FreeBSD__)
+			#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)
 				#if defined(__LP64__)
 					const char *libGLESv2_lib[] = {"lib64GLES_V2_translator.so", "libGLESv2.so.2", "libGLESv2.so"};
 				#else
diff --git third_party/swiftshader/src/Vulkan/VkDebug.cpp third_party/swiftshader/src/Vulkan/VkDebug.cpp
index 33255f20379..c77c9407370 100644
--- third_party/swiftshader/src/Vulkan/VkDebug.cpp
+++ third_party/swiftshader/src/Vulkan/VkDebug.cpp
@@ -29,7 +29,7 @@
 #	include <sys/sysctl.h>
 #	include <unistd.h>
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 #	include <sys/sysctl.h>
 #	include <sys/user.h>
 #	include <unistd.h>
@@ -39,7 +39,8 @@ namespace {
 
 bool IsUnderDebugger()
 {
-#if defined(PTRACE) && !defined(__APPLE__) && !defined(__MACH__) && !defined(__FreeBSD__)
+#if defined(PTRACE) && !defined(__APPLE__) && !defined(__MACH__) && !defined(__FreeBSD__) && \
+    !defined(__DragonFly__)
 	static bool checked = false;
 	static bool res = false;
 
@@ -61,7 +62,8 @@ bool IsUnderDebugger()
 	return res;
 #elif defined(_WIN32) || defined(_WIN64)
 	return IsDebuggerPresent() != 0;
-#elif defined(__APPLE__) || defined(__MACH__) || defined(__FreeBSD__)
+#elif defined(__APPLE__) || defined(__MACH__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__)
 	// Code comes from the Apple Technical Q&A QA1361
 
 	// Tell sysctl what info we're requestion. Specifically we're asking for
@@ -78,6 +80,8 @@ bool IsUnderDebugger()
 
 #	if defined(__FreeBSD__)
 	info.ki_flag = 0;
+#   elif defined(__DragonFly__)
+	info.kp_flags = 0;
 #	else
 	info.kp_proc.p_flag = 0;
 #	endif
@@ -89,7 +93,9 @@ bool IsUnderDebugger()
 	// We're being debugged if the P_TRACED flag is set
 #	if defined(__FreeBSD__)
 	return ((info.ki_flag & P_TRACED) != 0);
-#	else
+#   elif defined(__DragonFly__)
+	return ((info.kp_flags & P_TRACED) != 0);
+# else
 	return ((info.kp_proc.p_flag & P_TRACED) != 0);
 #	endif
 #else
diff --git third_party/swiftshader/third_party/llvm-7.0/configs/linux/include/llvm/Config/config.h third_party/swiftshader/third_party/llvm-7.0/configs/linux/include/llvm/Config/config.h
index 7bc5e1c3f7b..148cacda298 100644
--- third_party/swiftshader/third_party/llvm-7.0/configs/linux/include/llvm/Config/config.h
+++ third_party/swiftshader/third_party/llvm-7.0/configs/linux/include/llvm/Config/config.h
@@ -119,7 +119,7 @@
 /* #undef HAVE_MACH_MACH_H */
 
 /* Define to 1 if you have the `mallctl' function. */
-#define HAVE_MALLCTL 1
+/* #define HAVE_MALLCTL 1 */
 
 /* Define to 1 if you have the `mallinfo' function. */
 /* #undef HAVE_MALLINFO */
@@ -134,7 +134,7 @@
 /* #undef HAVE_MALLOC_ZONE_STATISTICS */
 
 /* Define to 1 if you have the `posix_fallocate' function. */
-#define HAVE_POSIX_FALLOCATE 1
+/* #define HAVE_POSIX_FALLOCATE 1 */
 
 /* Define to 1 if you have the `posix_spawn' function. */
 #define HAVE_POSIX_SPAWN 1
diff --git third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Path.inc third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Path.inc
index b4279d4fcc0..da95d7e9d00 100644
--- third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Path.inc
+++ third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Path.inc
@@ -53,13 +53,13 @@
 
 #include <sys/types.h>
 #if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__FreeBSD__) &&   \
-    !defined(__linux__)
+    !defined(__linux__) && !defined(__DragonFly__)
 #include <sys/statvfs.h>
 #define STATVFS statvfs
 #define FSTATVFS fstatvfs
 #define STATVFS_F_FRSIZE(vfs) vfs.f_frsize
 #else
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
+#if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/mount.h>
 #include <sys/param.h>
 #elif defined(__linux__)
diff --git third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Threading.inc third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Threading.inc
index 2d49ce1ad74..8a40690268e 100644
--- third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Threading.inc
+++ third_party/swiftshader/third_party/llvm-7.0/llvm/lib/Support/Unix/Threading.inc
@@ -21,11 +21,11 @@
 
 #include <pthread.h>
 
-#if defined(__FreeBSD__) || defined(__OpenBSD__)
+#if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
 #include <pthread_np.h> // For pthread_getthreadid_np() / pthread_set_name_np()
 #endif
 
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
 #include <errno.h>
 #include <sys/sysctl.h>
 #include <sys/user.h>
@@ -90,7 +90,7 @@ uint64_t llvm::get_threadid() {
   thread_port_t Self = mach_thread_self();
   mach_port_deallocate(mach_task_self(), Self);
   return Self;
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
   return uint64_t(pthread_getthreadid_np());
 #elif defined(__NetBSD__)
   return uint64_t(_lwp_self());
@@ -115,7 +115,8 @@ static constexpr uint32_t get_max_thread_name_length_impl() {
 #else
   return 0;
 #endif
-#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+// In DragonFly BSD case, it's MAXCOMLEN which is actually 16
+#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
   return 16;
 #elif defined(__OpenBSD__)
   return 32;
@@ -148,7 +149,7 @@ void llvm::set_thread_name(const Twine &Name) {
   ::pthread_setname_np(::pthread_self(), NameStr.data());
 #endif
 #endif
-#elif defined(__FreeBSD__) || defined(__OpenBSD__)
+#elif defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
   ::pthread_set_name_np(::pthread_self(), NameStr.data());
 #elif defined(__NetBSD__)
   ::pthread_setname_np(::pthread_self(), "%s",
@@ -161,7 +162,7 @@ void llvm::set_thread_name(const Twine &Name) {
 void llvm::get_thread_name(SmallVectorImpl<char> &Name) {
   Name.clear();
 
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
   int pid = ::getpid();
   uint64_t tid = get_threadid();
 
diff --git third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h
index f1319c7f2e2..d4185a2a4a9 100644
--- third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h
+++ third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port-arch.h
@@ -67,6 +67,8 @@
 # if TARGET_OS_IPHONE
 #  define GTEST_OS_IOS 1
 # endif
+#elif defined __DragonFly__
+# define GTEST_OS_DRAGONFLY 1
 #elif defined __FreeBSD__
 # define GTEST_OS_FREEBSD 1
 #elif defined __linux__
diff --git third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h
index d36e8203bcc..bcd98f398b2 100644
--- third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h
+++ third_party/swiftshader/third_party/llvm-7.0/llvm/utils/unittest/googletest/include/gtest/internal/gtest-port.h
@@ -121,6 +121,7 @@
 //
 //   GTEST_OS_AIX      - IBM AIX
 //   GTEST_OS_CYGWIN   - Cygwin
+//   GTEST_OS_DRAGONFLY - DragonFly
 //   GTEST_OS_FREEBSD  - FreeBSD
 //   GTEST_OS_HAIKU    - Haiku
 //   GTEST_OS_HPUX     - HP-UX
@@ -604,7 +605,7 @@ struct _RTL_CRITICAL_SECTION;
 // To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
 // to your compiler flags.
 # define GTEST_HAS_PTHREAD (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX \
-    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL)
+    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_DRAGONFLY)
 #endif  // GTEST_HAS_PTHREAD
 
 #if GTEST_HAS_PTHREAD
@@ -793,6 +794,7 @@ using ::std::tuple_size;
      (GTEST_OS_MAC && !GTEST_OS_IOS) || \
      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || \
      GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
+     GTEST_OS_DRAGONFLY || \
      GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NETBSD)
 # define GTEST_HAS_DEATH_TEST 1
 #endif
diff --git third_party/swiftshader/third_party/marl/src/memory.cpp third_party/swiftshader/third_party/marl/src/memory.cpp
index 7a06cffbf6e..be7a9585677 100644
--- third_party/swiftshader/third_party/marl/src/memory.cpp
+++ third_party/swiftshader/third_party/marl/src/memory.cpp
@@ -19,7 +19,8 @@
 
 #include <cstring>
 
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || \
+    defined(__DragonFly__)
 #include <sys/mman.h>
 #include <unistd.h>
 namespace {
diff --git third_party/swiftshader/third_party/marl/src/thread.cpp third_party/swiftshader/third_party/marl/src/thread.cpp
index c2161d4513e..f6b70580003 100644
--- third_party/swiftshader/third_party/marl/src/thread.cpp
+++ third_party/swiftshader/third_party/marl/src/thread.cpp
@@ -27,7 +27,7 @@
 #include <mach/thread_act.h>
 #include <pthread.h>
 #include <unistd.h>
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
 #include <pthread.h>
 #include <pthread_np.h>
 #include <unistd.h>
@@ -89,7 +89,7 @@ void Thread::setName(const char* fmt, ...) {
 
 #if defined(__APPLE__)
   pthread_setname_np(name);
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
   pthread_set_name_np(pthread_self(), name);
 #elif !defined(__Fuchsia__)
   pthread_setname_np(pthread_self(), name);
diff --git third_party/unrar/src/os.hpp third_party/unrar/src/os.hpp
index 707d604fc72..ce2d5b773c2 100644
--- third_party/unrar/src/os.hpp
+++ third_party/unrar/src/os.hpp
@@ -177,7 +177,7 @@
 #define SAVE_LINKS
 #endif
 
-#if defined(__linux) || defined(__FreeBSD__)
+#if defined(__linux) || defined(__FreeBSD__) || defined(__DragonFly__)
 #include <sys/time.h>
 #define USE_LUTIMES
 #endif
diff --git third_party/usrsctp/BUILD.gn third_party/usrsctp/BUILD.gn
index f1cfdda0214..284f98cfe9a 100644
--- third_party/usrsctp/BUILD.gn
+++ third_party/usrsctp/BUILD.gn
@@ -122,10 +122,10 @@ static_library("usrsctp") {
       "_GNU_SOURCE",
     ]
   } else if (is_bsd) {
-    defines += [
-      "__Userspace_os_FreeBSD",
-    ]
-    cflags += [ "-U__FreeBSD__" ]
+      defines += [
+        "__Userspace_os_DragonFly",
+        "HAVE_SYS_QUEUE_H",
+      ]
   } else if (is_mac || is_ios) {
     defines += [
       "HAVE_SA_LEN",
diff --git third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_os_userspace.h third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_os_userspace.h
index 8613301ab08..23932f1e64e 100755
--- third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_os_userspace.h
+++ third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_os_userspace.h
@@ -43,6 +43,10 @@
 
 #include <errno.h>
 
+#if defined(__Userspace_os_DragonFly)
+#include <sys/param.h>
+#endif
+
 #if defined(__Userspace_os_Windows)
 #include <winsock2.h>
 #include <ws2tcpip.h>
diff --git third_party/webrtc/rtc_base/platform_thread_types.cc third_party/webrtc/rtc_base/platform_thread_types.cc
index a17a0f929f8..64b883bada7 100644
--- third_party/webrtc/rtc_base/platform_thread_types.cc
+++ third_party/webrtc/rtc_base/platform_thread_types.cc
@@ -11,7 +11,7 @@
 #include "rtc_base/platform_thread_types.h"
 
 #if defined(WEBRTC_LINUX)
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) && !defined(__DragonFly__)
 #include <sys/prctl.h>
 #else
 #include <pthread_np.h>
@@ -31,7 +31,7 @@ PlatformThreadId CurrentThreadId() {
   return gettid();
 #elif defined(WEBRTC_FUCHSIA)
   return zx_thread_self();
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__DragonFly__)
   return pthread_getthreadid_np();
 #elif defined(WEBRTC_LINUX)
   return syscall(__NR_gettid);
@@ -63,7 +63,7 @@ bool IsThreadRefEqual(const PlatformThreadRef& a, const PlatformThreadRef& b) {
 }
 
 void SetCurrentThreadName(const char* name) {
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) && !defined(__DragonFly__)
 #if defined(WEBRTC_WIN)
   // For details see:
   // https://docs.microsoft.com/en-us/visualstudio/debugger/how-to-set-a-thread-name-in-native-code
diff --git third_party/zlib/contrib/minizip/ioapi.h third_party/zlib/contrib/minizip/ioapi.h
index c1b7a54847f..09e2485ebb6 100644
--- third_party/zlib/contrib/minizip/ioapi.h
+++ third_party/zlib/contrib/minizip/ioapi.h
@@ -50,7 +50,7 @@
 #define ftello64 ftell
 #define fseeko64 fseek
 #else
-#ifdef __FreeBSD__
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 #define fopen64 fopen
 #define ftello64 ftello
 #define fseeko64 fseeko
diff --git tools/gn/bootstrap/bootstrap.py tools/gn/bootstrap/bootstrap.py
index 8955e051acd..4756351643f 100755
--- tools/gn/bootstrap/bootstrap.py
+++ tools/gn/bootstrap/bootstrap.py
@@ -29,7 +29,6 @@ BOOTSTRAP_DIR = os.path.dirname(os.path.abspath(__file__))
 GN_ROOT = os.path.dirname(BOOTSTRAP_DIR)
 SRC_ROOT = os.path.dirname(os.path.dirname(GN_ROOT))
 
-
 def main(argv):
   parser = optparse.OptionParser(description=sys.modules[__name__].__doc__)
   parser.add_option(
diff --git tools/gn/build/gen.py tools/gn/build/gen.py
index df5f4c55ec7..50657d6f1d8 100755
--- tools/gn/build/gen.py
+++ tools/gn/build/gen.py
@@ -42,12 +42,14 @@ class Platform(object):
       self._platform = 'freebsd'
     elif self._platform.startswith('openbsd'):
       self._platform = 'openbsd'
+    elif self._platform.lower().startswith('dragonfly'):
+      self._platform = 'dragonfly'
     elif self._platform.startswith('haiku'):
       self._platform = 'haiku'
 
   @staticmethod
   def known_platforms():
-    return ['linux', 'darwin', 'msvc', 'aix', 'fuchsia', 'freebsd', 'openbsd', 'haiku']
+    return ['linux', 'darwin', 'msvc', 'aix', 'fuchsia', 'freebsd', 'openbsd', 'haiku', 'dragonfly']
 
   def platform(self):
     return self._platform
@@ -76,8 +78,11 @@ class Platform(object):
   def is_freebsd(self):
     return self._platform == 'freebsd'
 
+  def is_dragonfly(self):
+    return self._platform == 'dragonfly'
+
   def is_posix(self):
-    return self._platform in ['linux', 'freebsd', 'darwin', 'aix', 'openbsd', 'haiku']
+    return self._platform in ['linux', 'freebsd', 'darwin', 'aix', 'openbsd', 'haiku', 'dragonfly']
 
 
 def main(argv):
@@ -183,6 +188,7 @@ def WriteGenericNinja(path, static_libraries, executables,
       'darwin': 'build_mac.ninja.template',
       'linux': 'build_linux.ninja.template',
       'freebsd': 'build_linux.ninja.template',
+      'dragonfly': 'build_linux.ninja.template',
       'aix': 'build_aix.ninja.template',
       'openbsd': 'build_openbsd.ninja.template',
       'haiku': 'build_haiku.ninja.template',
@@ -359,6 +365,11 @@ def WriteGNNinja(path, platform, host, options):
       ldflags.extend(['-pthread'])
       libs.extend(['-lexecinfo', '-lkvm', '-lutil'])
       include_dirs += ['/usr/local/include']
+    elif platform.is_dragonfly():
+      cflags.extend(['-Wno-deprecated-register', '-Wno-parentheses-equality'])
+      ldflags.extend(['-pthread'])
+      libs.extend(['-lexecinfo', '-lkvm', '-lutil'])
+      include_dirs += ['/usr/local/include']
 
     if platform.is_posix() and not platform.is_haiku():
       ldflags.append('-pthread')
diff --git tools/gn/src/base/files/file_posix.cc tools/gn/src/base/files/file_posix.cc
index a44b490bc45..643dc90c342 100644
--- tools/gn/src/base/files/file_posix.cc
+++ tools/gn/src/base/files/file_posix.cc
@@ -372,7 +372,7 @@ void File::DoInitialize(const FilePath& path, uint32_t flags) {
 bool File::Flush() {
   DCHECK(IsValid());
 
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) && !defined(OS_DRAGONFLY)
   return !HANDLE_EINTR(fdatasync(file_.get()));
 #else
   return !HANDLE_EINTR(fsync(file_.get()));
diff --git tools/gn/src/gn/args.cc tools/gn/src/gn/args.cc
index c40c7e18357..1cb6875c84b 100644
--- tools/gn/src/gn/args.cc
+++ tools/gn/src/gn/args.cc
@@ -308,6 +308,8 @@ void Args::SetSystemVarsLocked(Scope* dest) const {
   os = "mac";
 #elif defined(OS_LINUX)
   os = "linux";
+#elif defined(OS_DRAGONFLY)
+  os = "dragonfly";
 #elif defined(OS_FREEBSD)
   os = "freebsd";
 #elif defined(OS_AIX)
diff --git tools/gn/src/gn/format_test_data/016.gn tools/gn/src/gn/format_test_data/016.gn
index 00a79922828..e0e08f864c5 100644
--- tools/gn/src/gn/format_test_data/016.gn
+++ tools/gn/src/gn/format_test_data/016.gn
@@ -1 +1 @@
-something = !is_win && is_linux || is_mac && !(is_freebsd || is_ios)
+something = !is_win && is_linux || is_mac && !(is_freebsd || is_ios || is_dragonfly)
diff --git tools/gn/src/gn/format_test_data/016.golden tools/gn/src/gn/format_test_data/016.golden
index 3f4f15bc507..e9610a0be38 100644
--- tools/gn/src/gn/format_test_data/016.golden
+++ tools/gn/src/gn/format_test_data/016.golden
@@ -1 +1 @@
-something = (!is_win && is_linux) || (is_mac && !(is_freebsd || is_ios))
+something = (!is_win && is_linux) || (is_mac && !(is_freebsd || is_ios || is_dragonfly))
diff --git tools/gn/src/util/build_config.h tools/gn/src/util/build_config.h
index f7cc991d523..c8ccf7e747e 100644
--- tools/gn/src/util/build_config.h
+++ tools/gn/src/util/build_config.h
@@ -44,6 +44,8 @@
 #define OS_NETBSD 1
 #elif defined(__OpenBSD__)
 #define OS_OPENBSD 1
+#elif defined(__DragonFly__)
+#define OS_DRAGONFLY 1
 #elif defined(__sun)
 #define OS_SOLARIS 1
 #elif defined(__QNXNTO__)
@@ -62,7 +64,8 @@
 
 // For access to standard BSD features, use OS_BSD instead of a
 // more specific macro.
-#if defined(OS_FREEBSD) || defined(OS_NETBSD) || defined(OS_OPENBSD)
+#if defined(OS_FREEBSD) || defined(OS_NETBSD) || defined(OS_OPENBSD) || \
+  defined(OS_DRAGONFLY)
 #define OS_BSD 1
 #endif
 
@@ -71,7 +74,8 @@
 #if defined(OS_AIX) || defined(OS_ANDROID) || defined(OS_ASMJS) ||    \
     defined(OS_FREEBSD) || defined(OS_LINUX) || defined(OS_MACOSX) || \
     defined(OS_NACL) || defined(OS_NETBSD) || defined(OS_OPENBSD) ||  \
-    defined(OS_QNX) || defined(OS_SOLARIS) || defined(OS_HAIKU)
+    defined(OS_QNX) || defined(OS_SOLARIS) || defined(OS_HAIKU) || \
+    defined(OS_DRAGONFLY)
 #define OS_POSIX 1
 #endif
 
diff --git tools/gn/src/util/exe_path.cc tools/gn/src/util/exe_path.cc
index 3b66a7bc70b..b398b8557cb 100644
--- tools/gn/src/util/exe_path.cc
+++ tools/gn/src/util/exe_path.cc
@@ -15,7 +15,7 @@
 #include <windows.h>
 
 #include "base/win/win_util.h"
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <limits.h>
 #include <sys/sysctl.h>
 #include <sys/types.h>
@@ -55,7 +55,7 @@ base::FilePath GetExePath() {
   return base::FilePath(system_buffer);
 }
 
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 
 base::FilePath GetExePath() {
   int mib[] = {CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1};
diff --git tools/grit/grit/node/base.py tools/grit/grit/node/base.py
index bec8f8532dd..aede5dd21b7 100644
--- tools/grit/grit/node/base.py
+++ tools/grit/grit/node/base.py
@@ -483,12 +483,15 @@ class Node(object):
         value = target_platform == 'android'
       elif name == 'is_ios':
         value = target_platform == 'ios'
+      elif name == 'is_dragonfly':
+        value = 'dragonfly' in target_platform
       elif name == 'is_bsd':
-        value = 'bsd' in target_platform
+        value = ('dragonfly' in target_platform or
+                 'bsd' in target_platform)
       elif name == 'is_posix':
         value = (target_platform in ('darwin', 'linux2', 'linux3', 'sunos5',
                                      'android', 'ios')
-                 or 'bsd' in target_platform)
+                 or 'bsd' in target_platform or 'dragonfly' in target_platform)
 
       elif name == 'pp_ifdef':
         def pp_ifdef(symbol):
diff --git tools/variations/fieldtrial_to_struct.py tools/variations/fieldtrial_to_struct.py
index d5c320c7d75..564d9eec037 100755
--- tools/variations/fieldtrial_to_struct.py
+++ tools/variations/fieldtrial_to_struct.py
@@ -36,6 +36,7 @@ _platforms = [
     'android_webview',
     'chromeos',
     'freebsd',
+    'dragonfly',
     'fuchsia',
     'ios',
     'linux',
diff --git ui/base/x/x11_util.cc ui/base/x/x11_util.cc
index 89bf128bb18..9acee8718b0 100644
--- ui/base/x/x11_util.cc
+++ ui/base/x/x11_util.cc
@@ -60,7 +60,7 @@
 #include "ui/gfx/x/x11_atom_cache.h"
 #include "ui/gfx/x/x11_error_tracker.h"
 
-#if defined(OS_FREEBSD)
+#if defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 #include <sys/sysctl.h>
 #include <sys/types.h>
 #endif
diff --git ui/events/event_switches.cc ui/events/event_switches.cc
index 775f8560261..94ddfb16c5d 100644
--- ui/events/event_switches.cc
+++ ui/events/event_switches.cc
@@ -14,7 +14,7 @@ namespace switches {
 const char kCompensateForUnstablePinchZoom[] =
     "compensate-for-unstable-pinch-zoom";
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 // Tells chrome to interpret events from these devices as touch events. Only
 // available with XInput 2 (i.e. X server 1.8 or above). The id's of the
 // devices can be retrieved from 'xinput list'.
diff --git ui/events/event_switches.h ui/events/event_switches.h
index 351cbbb6d61..07b140efd52 100644
--- ui/events/event_switches.h
+++ ui/events/event_switches.h
@@ -13,7 +13,7 @@ namespace switches {
 
 EVENTS_BASE_EXPORT extern const char kCompensateForUnstablePinchZoom[];
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_DRAGONFLY)
 EVENTS_BASE_EXPORT extern const char kTouchDevices[];
 EVENTS_BASE_EXPORT extern const char kPenDevices[];
 #endif
diff --git ui/gfx/linux/client_native_pixmap_dmabuf.cc ui/gfx/linux/client_native_pixmap_dmabuf.cc
index 352a55a61f9..c45cffe05b4 100644
--- ui/gfx/linux/client_native_pixmap_dmabuf.cc
+++ ui/gfx/linux/client_native_pixmap_dmabuf.cc
@@ -5,7 +5,7 @@
 #include "ui/gfx/linux/client_native_pixmap_dmabuf.h"
 
 #include <fcntl.h>
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) && !defined(__DragonFly__)
 #include <linux/version.h>
 #endif
 #include <stddef.h>
@@ -28,7 +28,7 @@
 #include "ui/gfx/buffer_format_util.h"
 #include "ui/gfx/switches.h"
 
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__DragonFly__)
 struct dma_buf_sync {
   __u64 flags;
 };
diff --git ui/gl/gl_fence.cc ui/gl/gl_fence.cc
index 49054e45a17..3c47734760f 100644
--- ui/gl/gl_fence.cc
+++ ui/gl/gl_fence.cc
@@ -18,7 +18,8 @@
 #include "ui/gl/gl_fence_apple.h"
 #endif
 
-#if defined(USE_EGL) && defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_FREEBSD)
+#if defined(USE_EGL) && defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_FREEBSD) && \
+  !defined(OS_DRAGONFLY)
 #define USE_GL_FENCE_ANDROID_NATIVE_FENCE_SYNC
 #include "ui/gl/gl_fence_android_native_fence_sync.h"
 #include "ui/gl/gl_surface_egl.h"
diff --git ui/strings/app_locale_settings.grd ui/strings/app_locale_settings.grd
index 374670fc097..f9f557646ae 100644
--- ui/strings/app_locale_settings.grd
+++ ui/strings/app_locale_settings.grd
@@ -216,7 +216,7 @@
           75%
         </message>
       </if>
-      <if expr="is_posix and not chromeos">
+      <if expr="is_posix or is_bsd and not chromeos">
         <!-- The font used in Web UI (e.g. History). Note that these are only
              backups. We try to use the system font if possible. -->
         <message name="IDS_WEB_FONT_FAMILY" use_name_for_id="true">
diff --git v8/src/api/api.cc v8/src/api/api.cc
index 1950136bedf..9224dea7985 100644
--- v8/src/api/api.cc
+++ v8/src/api/api.cc
@@ -112,7 +112,8 @@
 #include "src/wasm/wasm-result.h"
 #include "src/wasm/wasm-serialization.h"
 
-#if V8_OS_LINUX || V8_OS_MACOSX || V8_OS_FREEBSD
+#if V8_OS_LINUX || V8_OS_MACOSX || V8_OS_FREEBSD || \
+  V8_OS_DRAGONFLYBSD
 #include <signal.h>
 #include "include/v8-wasm-trap-handler-posix.h"
 #include "src/trap-handler/handler-inside-posix.h"
@@ -5657,7 +5658,8 @@ bool v8::V8::Initialize() {
   return true;
 }
 
-#if V8_OS_LINUX || V8_OS_MACOSX || V8_OS_OPENBSD || V8_OS_FREEBSD
+#if V8_OS_LINUX || V8_OS_MACOSX || V8_OS_OPENBSD || V8_OS_FREEBSD || \
+  V8_OS_DRAGONFLYBSD
 bool TryHandleWebAssemblyTrapPosix(int sig_code, siginfo_t* info,
                                    void* context) {
 #if V8_TARGET_ARCH_X64 && !V8_OS_ANDROID
diff --git v8/src/base/platform/condition-variable.cc v8/src/base/platform/condition-variable.cc
index 5ea70835eef..4bd7557cb29 100644
--- v8/src/base/platform/condition-variable.cc
+++ v8/src/base/platform/condition-variable.cc
@@ -15,7 +15,7 @@ namespace base {
 #if V8_OS_POSIX
 
 ConditionVariable::ConditionVariable() {
-#if (V8_OS_FREEBSD || V8_OS_NETBSD || V8_OS_OPENBSD || \
+#if (V8_OS_FREEBSD || V8_OS_NETBSD || V8_OS_OPENBSD || V8_OS_DRAGONFLYBSD || \
      (V8_OS_LINUX && V8_LIBC_GLIBC))
   // On Free/Net/OpenBSD and Linux with glibc we can change the time
   // source for pthread_cond_timedwait() to use the monotonic clock.
@@ -91,7 +91,7 @@ bool ConditionVariable::WaitFor(Mutex* mutex, const TimeDelta& rel_time) {
   result = pthread_cond_timedwait_relative_np(
       &native_handle_, &mutex->native_handle(), &ts);
 #else
-#if (V8_OS_FREEBSD || V8_OS_NETBSD || V8_OS_OPENBSD || \
+#if (V8_OS_FREEBSD || V8_OS_NETBSD || V8_OS_OPENBSD || V8_OS_DRAGONFLYBSD || \
      (V8_OS_LINUX && V8_LIBC_GLIBC))
   // On Free/Net/OpenBSD and Linux with glibc we can change the time
   // source for pthread_cond_timedwait() to use the monotonic clock.
diff --git v8/src/base/platform/platform-freebsd.cc v8/src/base/platform/platform-freebsd.cc
index 462f1432187..f3b75d20bb9 100644
--- v8/src/base/platform/platform-freebsd.cc
+++ v8/src/base/platform/platform-freebsd.cc
@@ -48,6 +48,7 @@ static unsigned StringToLong(char* buffer) {
 
 std::vector<OS::SharedLibraryAddress> OS::GetSharedLibraryAddresses() {
   std::vector<SharedLibraryAddress> result;
+#ifndef __DragonFly__
   int mib[4] = {CTL_KERN, KERN_PROC, KERN_PROC_VMMAP, getpid()};
   size_t miblen = sizeof(mib) / sizeof(mib[0]);
   size_t buffer_size;
@@ -89,6 +90,7 @@ std::vector<OS::SharedLibraryAddress> OS::GetSharedLibraryAddresses() {
       }
     }
   }
+#endif
   return result;
 }
 
diff --git v8/src/base/platform/platform-posix.cc v8/src/base/platform/platform-posix.cc
index c25a63e531a..e8d25ca8193 100644
--- v8/src/base/platform/platform-posix.cc
+++ v8/src/base/platform/platform-posix.cc
@@ -65,7 +65,7 @@
 #include <sys/syscall.h>
 #endif
 
-#if V8_OS_FREEBSD || V8_OS_MACOSX || V8_OS_OPENBSD || V8_OS_SOLARIS
+#if V8_OS_FREEBSD || V8_OS_MACOSX || V8_OS_OPENBSD || V8_OS_SOLARIS || V8_OS_DRAGONFLYBSD
 #define MAP_ANONYMOUS MAP_ANON
 #endif
 
@@ -128,9 +128,9 @@ int GetProtectionFromMemoryPermission(OS::MemoryPermission access) {
 int GetFlagsForMemoryPermission(OS::MemoryPermission access) {
   int flags = MAP_PRIVATE | MAP_ANONYMOUS;
   if (access == OS::MemoryPermission::kNoAccess) {
-#if !V8_OS_AIX && !V8_OS_FREEBSD && !V8_OS_QNX
+#if !V8_OS_AIX && !V8_OS_FREEBSD && !V8_OS_QNX && !V8_OS_DRAGONFLYBSD
     flags |= MAP_NORESERVE;
-#endif  // !V8_OS_AIX && !V8_OS_FREEBSD && !V8_OS_QNX
+#endif  // !V8_OS_AIX && !V8_OS_FREEBSD && !V8_OS_QNX && !V8_OS_DRAGONFLYBSD
 #if V8_OS_QNX
     flags |= MAP_LAZY;
 #endif  // V8_OS_QNX
@@ -427,7 +427,7 @@ bool OS::DiscardSystemPages(void* address, size_t size) {
 
 // static
 bool OS::HasLazyCommits() {
-#if V8_OS_AIX || V8_OS_LINUX || V8_OS_MACOSX || V8_OS_FREEBSD
+#if V8_OS_AIX || V8_OS_LINUX || V8_OS_MACOSX || V8_OS_FREEBSD || V8_OS_DRAGONFLYBSD
   return true;
 #else
   // TODO(bbudge) Return true for all POSIX platforms.
diff --git v8/src/base/sys-info.cc v8/src/base/sys-info.cc
index 3d47ebe8f78..6795a43bc03 100644
--- v8/src/base/sys-info.cc
+++ v8/src/base/sys-info.cc
@@ -63,7 +63,7 @@ int64_t SysInfo::AmountOfPhysicalMemory() {
     return 0;
   }
   return memsize;
-#elif V8_OS_FREEBSD
+#elif V8_OS_FREEBSD || V8_OS_DRAGONFLYBSD
   int pages, page_size;
   size_t size = sizeof(pages);
   sysctlbyname("vm.stats.vm.v_page_count", &pages, &size, nullptr, 0);
diff --git v8/src/base/utils/random-number-generator.cc v8/src/base/utils/random-number-generator.cc
index 61b78f1bdff..3e5d72c70e4 100644
--- v8/src/base/utils/random-number-generator.cc
+++ v8/src/base/utils/random-number-generator.cc
@@ -51,7 +51,7 @@ RandomNumberGenerator::RandomNumberGenerator() {
   result = rand_s(&second_half);
   DCHECK_EQ(0, result);
   SetSeed((static_cast<int64_t>(first_half) << 32) + second_half);
-#elif V8_OS_MACOSX || V8_OS_FREEBSD || V8_OS_OPENBSD
+#elif V8_OS_MACOSX || V8_OS_FREEBSD || V8_OS_OPENBSD || V8_OS_DRAGONFLYBSD
   // Despite its prefix suggests it is not RC4 algorithm anymore.
   // It always succeeds while having decent performance and
   // no file descriptor involved.
diff --git v8/src/d8/d8-posix.cc v8/src/d8/d8-posix.cc
index 23767ba2b5e..66af21c4831 100644
--- v8/src/d8/d8-posix.cc
+++ v8/src/d8/d8-posix.cc
@@ -350,7 +350,7 @@ static Local<Value> GetStdout(Isolate* isolate, int child_fd,
 // See http://code.google.com/p/v8/issues/detail?id=401.
 #if defined(WNOWAIT) && !defined(ANDROID) && !defined(__APPLE__) && \
     !defined(__NetBSD__) && !defined(__Fuchsia__)
-#if !defined(__FreeBSD__)
+#if !defined(__FreeBSD__) || !defined(__DragonFly__)
 #define HAS_WAITID 1
 #endif
 #endif
diff --git v8/src/libsampler/sampler.cc v8/src/libsampler/sampler.cc
index 9677b58c199..0113109ff98 100644
--- v8/src/libsampler/sampler.cc
+++ v8/src/libsampler/sampler.cc
@@ -467,7 +467,7 @@ void SignalHandler::FillRegisterState(void* context, RegisterState* state) {
   state->sp = reinterpret_cast<void*>(mcontext->__ss.__esp);
   state->fp = reinterpret_cast<void*>(mcontext->__ss.__ebp);
 #endif  // V8_HOST_ARCH_IA32
-#elif V8_OS_FREEBSD
+#elif V8_OS_FREEBSD || V8_OS_DRAGONFLYBSD
 #if V8_HOST_ARCH_IA32
   state->pc = reinterpret_cast<void*>(mcontext.mc_eip);
   state->sp = reinterpret_cast<void*>(mcontext.mc_esp);
diff --git v8/src/trap-handler/handler-inside-posix.cc v8/src/trap-handler/handler-inside-posix.cc
index 6228e87e84f..ec2a0a500eb 100644
--- v8/src/trap-handler/handler-inside-posix.cc
+++ v8/src/trap-handler/handler-inside-posix.cc
@@ -27,7 +27,7 @@
 
 #include <signal.h>
 
-#if defined(V8_OS_LINUX) || defined(V8_OS_FREEBSD)
+#if defined(V8_OS_LINUX) || defined(V8_OS_FREEBSD) || defined(V8_OS_DRAGONFLYBSD)
 #include <ucontext.h>
 #elif V8_OS_MACOSX
 #include <sys/ucontext.h>
@@ -112,7 +112,7 @@ bool TryHandleSignal(int signum, siginfo_t* info, void* context) {
     auto* context_rip = &uc->uc_mcontext.gregs[REG_RIP];
 #elif V8_OS_MACOSX
     auto* context_rip = &uc->uc_mcontext->__ss.__rip;
-#elif V8_OS_FREEBSD
+#elif defined(V8_OS_FREEBSD) || defined(V8_OS_DRAGONFLYBSD)
     auto* context_rip = &uc->uc_mcontext.mc_rip;
 #else
 #error Unsupported platform
diff --git v8/src/trap-handler/handler-inside-posix.h v8/src/trap-handler/handler-inside-posix.h
index 49fe23a7128..01ede742839 100644
--- v8/src/trap-handler/handler-inside-posix.h
+++ v8/src/trap-handler/handler-inside-posix.h
@@ -12,7 +12,7 @@ namespace v8 {
 namespace internal {
 namespace trap_handler {
 
-#if V8_OS_LINUX || V8_OS_FREEBSD
+#if V8_OS_LINUX || V8_OS_FREEBSD || V8_OS_DRAGONFLYBSD
 constexpr int kOobSignal = SIGSEGV;
 #elif V8_OS_MACOSX
 constexpr int kOobSignal = SIGBUS;
diff --git v8/src/trap-handler/trap-handler.h v8/src/trap-handler/trap-handler.h
index f6fdca553e1..a8d14ed52dc 100644
--- v8/src/trap-handler/trap-handler.h
+++ v8/src/trap-handler/trap-handler.h
@@ -25,6 +25,8 @@ namespace trap_handler {
 #define V8_TRAP_HANDLER_SUPPORTED true
 #elif V8_TARGET_ARCH_X64 && V8_OS_FREEBSD
 #define V8_TRAP_HANDLER_SUPPORTED true
+#elif V8_TARGET_ARCH_X64 && V8_OS_DRAGONFLYBSD
+#define V8_TRAP_HANDLER_SUPPORTED true
 #else
 #define V8_TRAP_HANDLER_SUPPORTED false
 #endif
diff --git v8/tools/testrunner/local/utils.py v8/tools/testrunner/local/utils.py
index 9128c433a04..780e284e04a 100644
--- v8/tools/testrunner/local/utils.py
+++ v8/tools/testrunner/local/utils.py
@@ -83,6 +83,10 @@ def GuessOS():
     # On Windows Vista platform.system() can return 'Microsoft' with some
     # versions of Python, see http://bugs.python.org/issue1082
     return 'windows'
+  elif system == 'DragonFlyBSD':
+    return 'dragonfly'
+  elif system == 'DragonFly':
+    return 'dragonfly'
   elif system == 'FreeBSD':
     return 'freebsd'
   elif system == 'OpenBSD':
