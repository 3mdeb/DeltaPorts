WIP WIP WIP WIP note: does not apply when glib is used (use_glib).
no idea what pedantic crap is going on here, i'm a fortran developer

../../ui/events/platform/x11/x11_event_source_libevent.cc: In member function 'virtual void ui::X11EventSourceLibevent::ProcessXEvent(XEvent*)':
../../ui/events/platform/x11/x11_event_source_libevent.cc:153:41: error: no matching function for call to 'ui::X11EventSourceLibevent::DispatchEvent(std::unique_ptr<ui::Event>::pointer)'
     DispatchEvent(translated_event.get());
                                         ^
In file included from ../../ui/events/platform/x11/x11_event_source_libevent.h:11:0,
                 from ../../ui/events/platform/x11/x11_event_source_libevent.cc:5:
../../ui/events/platform/platform_event_source.h:78:20: note: candidate: virtual uint32_t ui::PlatformEventSource::DispatchEvent(ui::PlatformEvent)
   virtual uint32_t DispatchEvent(PlatformEvent platform_event);
                    ^
../../ui/events/platform/platform_event_source.h:78:20: note:   no known conversion for argument 1 from 'std::unique_ptr<ui::Event>::pointer {aka ui::Event*}' to 'ui::PlatformEvent {aka _XEvent*}'

While clang++ 3.9.1 gives:
../../ui/events/platform/x11/x11_event_source_libevent.cc:152:19: error: cannot initialize a parameter of type 'PlatformEvent' (aka '_XEvent *') with an
      rvalue of type 'pointer' (aka 'ui::Event *')
    DispatchEvent(translated_event.get());
                  ^~~~~~~~~~~~~~~~~~~~~~
../../ui/events/platform/platform_event_source.h:78:48: note: passing argument to parameter 'platform_event' here
  virtual uint32_t DispatchEvent(PlatformEvent platform_event);
                                               ^
1 error generated.

--- ui/events/platform/x11/x11_event_source_libevent.cc.orig	2016-11-10 22:02:30.000000000 +0200
+++ ui/events/platform/x11/x11_event_source_libevent.cc
@@ -147,10 +147,15 @@ void X11EventSourceLibevent::RemoveXEven
 }
 
 void X11EventSourceLibevent::ProcessXEvent(XEvent* xevent) {
+#if 0
   std::unique_ptr<ui::Event> translated_event = TranslateXEventToEvent(*xevent);
   if (translated_event) {
     DispatchEvent(translated_event.get());
   } else {
+#else
+// eat me
+  {
+#endif
     // Only if we can't translate XEvent into ui::Event, try to dispatch XEvent
     // directly to XEventDispatchers.
     DispatchXEventToXEventDispatchers(xevent);
