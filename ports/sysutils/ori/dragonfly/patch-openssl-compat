--- liboriutil/key.cc.orig	2014-01-17 06:40:03 UTC
+++ liboriutil/key.cc
@@ -131,14 +131,16 @@ PublicKey::verify(const string &blob,
                   const string &digest) const
 {
     int err;
-    EVP_MD_CTX ctx;
+    EVP_MD_CTX *ctxp;
 
     assert(x509 != NULL && key != NULL);
 
-    EVP_VerifyInit(&ctx, EVP_sha256());
-    EVP_VerifyUpdate(&ctx, blob.data(), blob.size());
-    err = EVP_VerifyFinal(&ctx, (const unsigned char *)digest.data(),
+    ctxp = EVP_MD_CTX_new();
+    EVP_VerifyInit(ctxp, EVP_sha256());
+    EVP_VerifyUpdate(ctxp, blob.data(), blob.size());
+    err = EVP_VerifyFinal(ctxp, (const unsigned char *)digest.data(),
                           digest.length(), key);
+    EVP_MD_CTX_free(ctxp);
     if (err != 1)
     {
         ERR_print_errors_fp(stderr);
@@ -185,11 +187,13 @@ PrivateKey::sign(const string &blob) con
     int err;
     unsigned int sigLen = SIGBUF_LEN;
     char sigBuf[SIGBUF_LEN];
-    EVP_MD_CTX ctx;
+    EVP_MD_CTX *ctxp;
 
-    EVP_SignInit(&ctx, EVP_sha256());
-    EVP_SignUpdate(&ctx, blob.data(), blob.size());
-    err = EVP_SignFinal(&ctx, (unsigned char *)sigBuf, &sigLen, key);
+    ctxp = EVP_MD_CTX_new();
+    EVP_SignInit(ctxp, EVP_sha256());
+    EVP_SignUpdate(ctxp, blob.data(), blob.size());
+    err = EVP_SignFinal(ctxp, (unsigned char *)sigBuf, &sigLen, key);
+    EVP_MD_CTX_free(ctxp);
     if (err != 1)
     {
         ERR_print_errors_fp(stderr);
--- liboriutil/oricrypt.cc.orig	2014-01-17 06:40:03 UTC
+++ liboriutil/oricrypt.cc
@@ -155,7 +155,7 @@ OriCrypt_Encrypt(const string &plaintext
     unsigned char keyData[32];
     unsigned char ivData[32];
     unsigned char *buf;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctxp;
     string ciphertext;
 
     // Generate random salt and prepend it
@@ -173,13 +173,13 @@ OriCrypt_Encrypt(const string &plaintext
     clen = plaintext.size() + AES_BLOCK_SIZE;
     buf = new unsigned char[clen];
 
-    EVP_CIPHER_CTX_init(&ctx);
-    EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, keyData, ivData);
-    EVP_EncryptUpdate(&ctx, buf, &clen,
+    EVP_CIPHER_CTX_init(ctxp);
+    EVP_EncryptInit_ex(ctxp, EVP_aes_256_cbc(), NULL, keyData, ivData);
+    EVP_EncryptUpdate(ctxp, buf, &clen,
                       (const unsigned char *)plaintext.data(),
                       plaintext.size());
-    EVP_EncryptFinal_ex(&ctx, buf+clen, &flen);
-    EVP_CIPHER_CTX_cleanup(&ctx);
+    EVP_EncryptFinal_ex(ctxp, buf+clen, &flen);
+    EVP_CIPHER_CTX_cleanup(ctxp);
 
     ciphertext.append((const char *)buf, clen+flen);
     delete buf;
@@ -199,7 +199,7 @@ OriCrypt_Decrypt(const string &ciphertex
     unsigned char keyData[32];
     unsigned char ivData[32];
     unsigned char *buf;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctxp;
     string plaintext;
 
     if (ciphertext.size() <= PKCS5_SALT_LEN)
@@ -217,13 +217,13 @@ OriCrypt_Decrypt(const string &ciphertex
     plen = ciphertext.size() + AES_BLOCK_SIZE;
     buf = new unsigned char[plen];
 
-    EVP_CIPHER_CTX_init(&ctx);
-    EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, keyData, ivData);
-    EVP_DecryptUpdate(&ctx, buf, &plen,
+    EVP_CIPHER_CTX_init(ctxp);
+    EVP_DecryptInit_ex(ctxp, EVP_aes_256_cbc(), NULL, keyData, ivData);
+    EVP_DecryptUpdate(ctxp, buf, &plen,
                       (const unsigned char *)ciphertext.data() + PKCS5_SALT_LEN,
                       ciphertext.size() - PKCS5_SALT_LEN);
-    EVP_DecryptFinal_ex(&ctx, buf+plen, &flen);
-    EVP_CIPHER_CTX_cleanup(&ctx);
+    EVP_DecryptFinal_ex(ctxp, buf+plen, &flen);
+    EVP_CIPHER_CTX_cleanup(ctxp);
 
     plaintext.assign((const char *)buf, plen+flen);
     delete buf;
