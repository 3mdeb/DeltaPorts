--- src/mongo/util/net/ssl_manager.cpp.orig	2016-06-21 19:15:24 UTC
+++ src/mongo/util/net/ssl_manager.cpp
@@ -626,6 +626,10 @@ bool SSLManager::_initSSLContext(SSL_CTX
     return true;
 }
 
+#ifndef BIO_s_file_internal
+#define BIO_s_file_internal BIO_s_file
+#endif
+
 bool SSLManager::_setSubjectName(const std::string& keyFile, std::string& subjectName) {
     // Read the certificate subject name and store it
     BIO* in = BIO_new(BIO_s_file_internal());
--- src/mongo/crypto/crypto_openssl.cpp.orig	2016-06-21 19:15:24 UTC
+++ src/mongo/crypto/crypto_openssl.cpp
@@ -34,19 +34,22 @@ namespace crypto {
  * Computes a SHA-1 hash of 'input'.
  */
 bool sha1(const unsigned char* input, const size_t inputLen, unsigned char* output) {
-    EVP_MD_CTX digestCtx;
-    EVP_MD_CTX_init(&digestCtx);
-    ON_BLOCK_EXIT(EVP_MD_CTX_cleanup, &digestCtx);
+    static EVP_MD_CTX *digestCtxp = NULL;
 
-    if (1 != EVP_DigestInit_ex(&digestCtx, EVP_sha1(), NULL)) {
+    if (digestCtxp == NULL)
+       digestCtxp = EVP_MD_CTX_new();
+    EVP_MD_CTX_init(digestCtxp);
+    //ON_BLOCK_EXIT(EVP_MD_CTX_cleanup, digestCtxp);
+
+    if (1 != EVP_DigestInit_ex(digestCtxp, EVP_sha1(), NULL)) {
         return false;
     }
 
-    if (1 != EVP_DigestUpdate(&digestCtx, input, inputLen)) {
+    if (1 != EVP_DigestUpdate(digestCtxp, input, inputLen)) {
         return false;
     }
 
-    return (1 == EVP_DigestFinal_ex(&digestCtx, output, NULL));
+    return (1 == EVP_DigestFinal_ex(digestCtxp, output, NULL));
 }
 
 /*
