--- src/scfb_driver.c.orig	2018-03-26 23:53:42 UTC
+++ src/scfb_driver.c
@@ -55,7 +55,6 @@
 #include "xf86Priv.h"
 
 #include "mipointer.h"
-#include "mibstore.h"
 #include "micmap.h"
 #include "colormapst.h"
 #include "xf86cmap.h"
@@ -80,19 +79,13 @@
 #include "xf86xv.h"
 #endif
 
+#include "compat-api.h"
+
+#define SCFB_LOG_VERBOSE	4
+
 #undef	DEBUG
 #define	DEBUG	1
 
-#if DEBUG
-# define TRACE_ENTER(str)	ErrorF("scfb: " str " %d\n",pScrn->scrnIndex)
-# define TRACE_EXIT(str)	ErrorF("scfb: " str " done\n")
-# define TRACE(str)		ErrorF("scfb trace: " str "\n")
-#else
-# define TRACE_ENTER(str)
-# define TRACE_EXIT(str)
-# define TRACE(str)
-#endif
-
 /* Prototypes */
 static pointer ScfbSetup(pointer, pointer, int *, int *);
 static Bool ScfbGetRec(ScrnInfoPtr);
@@ -101,16 +94,17 @@ static const OptionInfoRec * ScfbAvailab
 static void ScfbIdentify(int);
 static Bool ScfbProbe(DriverPtr, int);
 static Bool ScfbPreInit(ScrnInfoPtr, int);
-static Bool ScfbScreenInit(int, ScreenPtr, int, char **);
-static Bool ScfbCloseScreen(int, ScreenPtr);
+static Bool ScfbScreenInit(ScreenPtr, int, char **);
+static Bool ScfbCloseScreen(ScreenPtr);
 static void *ScfbWindowLinear(ScreenPtr, CARD32, CARD32, int, CARD32 *,
 			      void *);
-static void ScfbPointerMoved(int, int, int);
-static Bool ScfbEnterVT(int, int);
-static void ScfbLeaveVT(int, int);
-static Bool ScfbSwitchMode(int, DisplayModePtr, int);
-static int ScfbValidMode(int, DisplayModePtr, Bool, int);
+static void ScfbPointerMoved(ScrnInfoPtr, int, int);
+static Bool ScfbEnterVT(ScrnInfoPtr);
+static void ScfbLeaveVT(ScrnInfoPtr);
+static Bool ScfbSwitchMode(ScrnInfoPtr, DisplayModePtr);
+static int ScfbValidMode(ScrnInfoPtr, DisplayModePtr, Bool, int);
 static void ScfbLoadPalette(ScrnInfoPtr, int, int *, LOCO *, VisualPtr);
+static void ScfbDPMSSet(ScrnInfoPtr, int, int);
 static Bool ScfbSaveScreen(ScreenPtr, int);
 static void ScfbSave(ScrnInfoPtr);
 static void ScfbRestore(ScrnInfoPtr);
@@ -200,7 +194,7 @@ ScfbSetup(pointer module, pointer opts,
 	/* Check that we're being loaded on a OpenBSD or NetBSD system. */
 	LoaderGetOS(&osname, NULL, NULL, NULL);
 	if (!osname || (strcmp(osname, "freebsd") != 0 && strcmp(osname, "openbsd") != 0 &&
-	                strcmp(osname, "netbsd") != 0)) {
+	                strcmp(osname, "netbsd") != 0 && strcmp(osname, "dragonfly") != 0)) {
 		if (errmaj)
 			*errmaj = LDR_BADOS;
 		if (errmin)
@@ -231,7 +225,7 @@ typedef struct {
 	void *			shadow;
 	CloseScreenProcPtr	CloseScreen;
 	CreateScreenResourcesProcPtr CreateScreenResources;
-	void			(*PointerMoved)(int, int, int);
+	void			(*PointerMoved)(ScrnInfoPtr, int, int);
 	EntityInfoPtr		pEnt;
 
 #ifdef XFreeXDGA
@@ -302,7 +296,7 @@ scfb_mmap(size_t len, off_t off, int fd)
 		mapaddr = NULL;
 	}
 #if DEBUG
-	ErrorF("mmap returns: addr %p len 0x%x, fd %d, off %x\n", mapaddr, mapsize, fd, off);
+	ErrorF("mmap returns: addr %p len 0x%x, fd %d, off %lx\n", mapaddr, mapsize, fd, off);
 #endif
 	return mapaddr;
 }
@@ -314,9 +308,12 @@ ScfbProbe(DriverPtr drv, int flags)
        	GDevPtr *devSections;
 	int numDevSections;
 	const char *dev;
+	struct fbtype fb;
 	Bool foundScreen = FALSE;
 
-	TRACE("probe start");
+#if DEBUG
+	ErrorF("scfb: ScfbProbe start\n");
+#endif
 
 	/* For now, just bail out for PROBE_DETECT. */
 	if (flags & PROBE_DETECT)
@@ -330,7 +327,8 @@ ScfbProbe(DriverPtr drv, int flags)
 	for (i = 0; i < numDevSections; i++) {
 		ScrnInfoPtr pScrn = NULL;
 		dev = xf86FindOptionValue(devSections[i]->options, "device");
-		if ((fd = xf86Info.consoleFd) >= 0) {
+		if ((fd = xf86Info.consoleFd) >= 0 &&
+		    ioctl(fd, FBIOGTYPE, &fb) != -1) {
 			entity = xf86ClaimFbSlot(drv, 0, devSections[i], TRUE);
 			pScrn = xf86ConfigFbEntity(NULL,0,entity,
 						   NULL,NULL,NULL,NULL);
@@ -355,7 +353,6 @@ ScfbProbe(DriverPtr drv, int flags)
 		}
 	}
 	free(devSections);
-	TRACE("probe done");
 	return foundScreen;
 }
 
@@ -366,14 +363,15 @@ ScfbPreInit(ScrnInfoPtr pScrn, int flags
 	struct fbtype fb;
 	int default_depth, wstype;
 	const char *dev;
-	char *mod = NULL, *s;
-	const char *reqSym = NULL;
+	char *mod = NULL;
+	const char *reqSym = NULL, *s;
 	Gamma zeros = {0.0, 0.0, 0.0};
 	DisplayModePtr mode;
 
 	if (flags & PROBE_DETECT) return FALSE;
 
-	TRACE_ENTER("PreInit");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbPreInit\n");
 
 	if (pScrn->numEntities != 1) return FALSE;
 
@@ -588,7 +586,8 @@ ScfbPreInit(ScrnInfoPtr pScrn, int flags
 		ScfbFreeRec(pScrn);
 		return FALSE;
 	}
-	TRACE_EXIT("PreInit");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbPreInit done\n");
 	return TRUE;
 }
 
@@ -633,15 +632,16 @@ ScfbShadowInit(ScreenPtr pScreen)
 }
 
 static Bool
-ScfbScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
+ScfbScreenInit(ScreenPtr pScreen, int argc, char **argv)
 {
-	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
 	ScfbPtr fPtr = SCFBPTR(pScrn);
 	VisualPtr visual;
 	int ret, flags, ncolors;
 	size_t len;
 
-	TRACE_ENTER("ScfbScreenInit");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbScreenInit\n");
 #if DEBUG
 	ErrorF("\tbitsPerPixel=%d, depth=%d, defaultVisual=%s\n"
 	       "\tmask: %x,%x,%x, offset: %u,%u,%u\n",
@@ -792,29 +792,32 @@ ScfbScreenInit(int scrnIndex, ScreenPtr
 				   "RENDER extension initialisation failed.");
 	}
 	if (fPtr->shadowFB && !ScfbShadowInit(pScreen)) {
-		xf86DrvMsg(scrnIndex, X_ERROR,
+		xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
 		    "shadow framebuffer initialization failed\n");
 		return FALSE;
 	}
 
+	/* Init DPMS */
+	xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Initializing DPMS\n");
+	xf86DPMSInit(pScreen, ScfbDPMSSet, 0);
+
 #ifdef XFreeXDGA
 	if (!fPtr->rotate)
 		ScfbDGAInit(pScrn, pScreen);
 	else
-		xf86DrvMsg(scrnIndex, X_INFO, "Rotated display, "
+		xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Rotated display, "
 		    "disabling DGA\n");
 #endif
 	if (fPtr->rotate) {
-		xf86DrvMsg(scrnIndex, X_INFO, "Enabling Driver Rotation, "
+		xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Enabling Driver Rotation, "
 		    "disabling RandR\n");
 		xf86DisableRandR();
 		if (pScrn->bitsPerPixel == 24)
-			xf86DrvMsg(scrnIndex, X_WARNING,
+			xf86DrvMsg(pScrn->scrnIndex, X_WARNING,
 			    "Rotation might be broken in 24 bpp\n");
 	}
 
 	xf86SetBlackWhitePixels(pScreen);
-	miInitializeBackingStore(pScreen);
 	xf86SetBackingStore(pScreen);
 
 	/* Software cursor. */
@@ -853,19 +856,20 @@ ScfbScreenInit(int scrnIndex, ScreenPtr
 	fPtr->CloseScreen = pScreen->CloseScreen;
 	pScreen->CloseScreen = ScfbCloseScreen;
 
-	TRACE_EXIT("ScfbScreenInit");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbScreenInit done\n");
 	return TRUE;
 }
 
 static Bool
-ScfbCloseScreen(int scrnIndex, ScreenPtr pScreen)
+ScfbCloseScreen(ScreenPtr pScreen)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
 	PixmapPtr pPixmap;
 	ScfbPtr fPtr = SCFBPTR(pScrn);
 
-
-	TRACE_ENTER("ScfbCloseScreen");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbCloseScreen\n");
 
 	pPixmap = pScreen->GetScreenPixmap(pScreen);
 	if (fPtr->shadowFB)
@@ -891,8 +895,9 @@ ScfbCloseScreen(int scrnIndex, ScreenPtr
 
 	/* Unwrap CloseScreen. */
 	pScreen->CloseScreen = fPtr->CloseScreen;
-	TRACE_EXIT("ScfbCloseScreen");
-	return (*pScreen->CloseScreen)(scrnIndex, pScreen);
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbCloseScreen done\n");
+	return (*pScreen->CloseScreen)(pScreen);
 }
 
 static void *
@@ -907,9 +912,8 @@ ScfbWindowLinear(ScreenPtr pScreen, CARD
 }
 
 static void
-ScfbPointerMoved(int index, int x, int y)
+ScfbPointerMoved(ScrnInfoPtr pScrn, int x, int y)
 {
-    ScrnInfoPtr pScrn = xf86Screens[index];
     ScfbPtr fPtr = SCFBPTR(pScrn);
     int newX, newY;
 
@@ -941,50 +945,40 @@ ScfbPointerMoved(int index, int x, int y
     }
 
     /* Pass adjusted pointer coordinates to wrapped PointerMoved function. */
-    (*fPtr->PointerMoved)(index, newX, newY);
+    (*fPtr->PointerMoved)(pScrn, newX, newY);
 }
 
 static Bool
-ScfbEnterVT(int scrnIndex, int flags)
+ScfbEnterVT(ScrnInfoPtr pScrn)
 {
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-
-	TRACE_ENTER("EnterVT");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbEnterVT\n");
 	pScrn->vtSema = TRUE;
-	TRACE_EXIT("EnterVT");
 	return TRUE;
 }
 
 static void
-ScfbLeaveVT(int scrnIndex, int flags)
+ScfbLeaveVT(ScrnInfoPtr pScrn)
 {
-#if DEBUG
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-#endif
-
-	TRACE_ENTER("LeaveVT");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbLeaveVT\n");
 }
 
 static Bool
-ScfbSwitchMode(int scrnIndex, DisplayModePtr mode, int flags)
+ScfbSwitchMode(ScrnInfoPtr pScrn, DisplayModePtr mode)
 {
-#if DEBUG
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-#endif
-
-	TRACE_ENTER("SwitchMode");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbSwitchMode\n");
 	/* Nothing else to do. */
 	return TRUE;
 }
 
 static int
-ScfbValidMode(int scrnIndex, DisplayModePtr mode, Bool verbose, int flags)
+ScfbValidMode(ScrnInfoPtr pScrn, DisplayModePtr mode, Bool verbose,
+	      int flags)
 {
-#if DEBUG
-	ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
-#endif
-
-	TRACE_ENTER("ValidMode");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbValidMode\n");
 	return MODE_OK;
 }
 
@@ -992,19 +986,43 @@ static void
 ScfbLoadPalette(ScrnInfoPtr pScrn, int numColors, int *indices,
 	       LOCO *colors, VisualPtr pVisual)
 {
-
-	TRACE_ENTER("LoadPalette");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbLoadPalette\n");
 	/* TODO */
 }
 
+static void
+ScfbDPMS(ScrnInfoPtr pScrn, int state)
+{
+	ScfbPtr fPtr = SCFBPTR(pScrn);
+
+	ioctl(fPtr->fd, FBIO_BLANK, &state);
+}
+
+static void
+ScfbDPMSSet(ScrnInfoPtr pScrn, int PowerManagementMode, int flags)
+{
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbDPMSSet(%d, %d)\n",
+		       PowerManagementMode, flags);
+
+	if (!pScrn->vtSema)
+		return;
+
+	/* The mapping of DPMSMode* to V_DISPLAY_* values is unclear. */
+	if (PowerManagementMode == DPMSModeOn)
+		ScfbDPMS(pScrn, V_DISPLAY_ON);
+	else
+		ScfbDPMS(pScrn, V_DISPLAY_SUSPEND);
+}
+
 static Bool
 ScfbSaveScreen(ScreenPtr pScreen, int mode)
 {
-	ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
-	ScfbPtr fPtr = SCFBPTR(pScrn);
-	int state;
+	ScrnInfoPtr	pScrn = xf86ScreenToScrn(pScreen);
 
-	TRACE_ENTER("SaveScreen");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbSaveScreen(%d)\n", mode);
 
 	if (!pScrn->vtSema)
 		return TRUE;
@@ -1012,7 +1030,6 @@ ScfbSaveScreen(ScreenPtr pScreen, int mo
 	if (mode != SCREEN_SAVER_FORCER) {
 		/* TODO, if (mode) enable_screen(); else disable_screen(); */
 	}
-	TRACE_EXIT("SaveScreen");
 	return TRUE;
 }
 
@@ -1022,10 +1039,8 @@ ScfbSave(ScrnInfoPtr pScrn)
 {
 	ScfbPtr fPtr = SCFBPTR(pScrn);
 
-	TRACE_ENTER("ScfbSave");
-
-	TRACE_EXIT("ScfbSave");
-
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbSave\n");
 }
 
 static void
@@ -1034,14 +1049,16 @@ ScfbRestore(ScrnInfoPtr pScrn)
 	ScfbPtr fPtr = SCFBPTR(pScrn);
 	int mode;
 
-	TRACE_ENTER("ScfbRestore");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbRestore\n");
 
 	/* Clear the screen. */
 	memset(fPtr->fbmem, 0, fPtr->fbmem_len);
 
 	/* Restore the text mode. */
 	/* TODO: We need to get first, if we need mode switching */
-	TRACE_EXIT("ScfbRestore");
+	xf86DrvMsgVerb(pScrn->scrnIndex, X_INFO, SCFB_LOG_VERBOSE,
+		       "ScfbRestore done\n");
 }
 
 #ifdef XFreeXDGA
@@ -1067,7 +1084,6 @@ static Bool
 ScfbDGASetMode(ScrnInfoPtr pScrn, DGAModePtr pDGAMode)
 {
 	DisplayModePtr pMode;
-	int scrnIdx = pScrn->pScreen->myNum;
 	int frameX0, frameY0;
 
 	if (pDGAMode) {
@@ -1081,9 +1097,9 @@ ScfbDGASetMode(ScrnInfoPtr pScrn, DGAMod
 		frameY0 = pScrn->frameY0;
 	}
 
-	if (!(*pScrn->SwitchMode)(scrnIdx, pMode, 0))
+	if (!(*pScrn->SwitchMode)(pScrn, pMode))
 		return FALSE;
-	(*pScrn->AdjustFrame)(scrnIdx, frameX0, frameY0, 0);
+	(*pScrn->AdjustFrame)(pScrn, frameX0, frameY0);
 
 	return TRUE;
 }
@@ -1091,7 +1107,7 @@ ScfbDGASetMode(ScrnInfoPtr pScrn, DGAMod
 static void
 ScfbDGASetViewport(ScrnInfoPtr pScrn, int x, int y, int flags)
 {
-	(*pScrn->AdjustFrame)(pScrn->pScreen->myNum, x, y, flags);
+	(*pScrn->AdjustFrame)(pScrn, x, y);
 }
 
 static int
