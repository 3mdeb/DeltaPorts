--- bsd.port.mk.orig	2014-02-10 09:05:27.641631000 +0000
+++ bsd.port.mk
@@ -43,7 +43,8 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 #				  makefile is being used on.  Automatically set to
 #				  "FreeBSD," "NetBSD," or "OpenBSD" as appropriate.
 # OSREL			- The release version (numeric) of the operating system.
-# OSVERSION		- The value of __FreeBSD_version.
+# OSVERSION		- 9999999 - try to ignore FreeBSD version check
+# DFLYVERSION		- The value of __DragonFly_version.
 #
 # This is the beginning of the list of all variables that need to be
 # defined in a port, listed in order that they should be included
@@ -565,6 +566,12 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 #				  Default: ${MASTERDIR}/scripts
 # FILESDIR		- A directory containing any miscellaneous additional files.
 #				  Default: ${MASTERDIR}/files
+# DFLY_PATCHDIR=	- A directory containing additional patches required
+#				  to build port on DragonFly
+#				  Default: ${MASTERDIR}/dragonfly
+# DFLY_FILESDIR 	- A directory containing any miscellaneous files
+#				  needed to build port on DragonFly
+#				  Default: ${MASTERDIR}/dragonfly
 # PKGDIR		- A directory containing any package creation files.
 #				  Default: ${MASTERDIR}
 # SRC_BASE		- The root of the src tree.  (Some ports require this to get
@@ -852,7 +859,7 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 # CONFIGURE_TARGET
 #				- The name of target to call when GNU_CONFIGURE is
 #				  defined.
-#				  Default: ${ARCH}-portbld-freebsd${OSREL}
+#				  Default: ${ARCH}-dports-dragonfly${OSREL}
 # GNU_CONFIGURE_PREFIX
 #				- The directory passed as prefix to the configure script if
 #				  GNU_CONFIGURE is set.
@@ -1111,26 +1118,30 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 # These need to be absolute since we don't know how deep in the ports
 # tree we are and thus can't go relative.  They can, of course, be overridden
 # by individual Makefiles or local system make configuration.
-PORTSDIR?=		/usr/ports
+WITH_PKGNG?=		yes
+WITHOUT_FBSD10_FIX?=	yes
+DFLY_PATCHDIR?= 	${MASTERDIR}/dragonfly
+DFLY_FILESDIR?= 	${MASTERDIR}/dragonfly
+PORTSDIR?=		/usr/dports
 LOCALBASE?=		/usr/local
 LINUXBASE?=		/compat/linux
-DISTDIR?=		${PORTSDIR}/distfiles
+DISTDIR?=		/usr/distfiles
+WRKDIRPREFIX?=		/usr/obj/dports
 _DISTDIR?=		${DISTDIR}/${DIST_SUBDIR}
 INDEXDIR?=		${PORTSDIR}
 SRC_BASE?=		/usr/src
 USESDIR?=		${PORTSDIR}/Mk/Uses
 SCRIPTSDIR?=	${PORTSDIR}/Mk/Scripts
-LIB_DIRS?=		/lib /usr/lib ${LOCALBASE}/lib
+LIB_DIRS?=		/usr/lib ${LOCALBASE}/lib
 NOTPHONY?=
 
 .if defined(FORCE_STAGE)
 .undef NO_STAGE
 .endif
 
-# make sure bmake treats -V as expected
-.MAKE.EXPAND_VARIABLES= yes
-# tell bmake we use the old :L :U modifiers
-.MAKE.FreeBSD_UL= yes
+# Prevent dport from building profile libraries
+NOPROFILE=		yes
+.export NOPROFILE
 
 .include "${PORTSDIR}/Mk/bsd.commands.mk"
 
@@ -1189,20 +1200,16 @@ OSREL!=	${UNAME} -r | ${SED} -e 's/[-(].
 
 # Get __FreeBSD_version
 .if !defined(OSVERSION)
-.if exists(/usr/include/sys/param.h)
-OSVERSION!=	${AWK} '/^\#define[[:blank:]]__FreeBSD_version/ {print $$3}' < /usr/include/sys/param.h
-.elif exists(${SRC_BASE}/sys/sys/param.h)
-OSVERSION!=	${AWK} '/^\#define[[:blank:]]__FreeBSD_version/ {print $$3}' < ${SRC_BASE}/sys/sys/param.h
-.else
-OSVERSION!=	${SYSCTL} -n kern.osreldate
-.endif
+OSVERSION=	9999999
 .endif
 
-.if ${OSVERSION} >= 1000017
-.if !defined(WITHOUT_PKGNG)
-WITH_PKGNG?=	yes
+.if !defined(DFLYVERSION)
+.if exists(/usr/include/sys/param.h)
+DFLYVERSION!=	${AWK} '/^\#define[[:blank:]]__DragonFly_version/ {print $$3}' < /usr/include/sys/param.h
+.elif exists(${SRC_BASE}/sys/sys/param.h)
+DFLYVERSION!=	${AWK} '/^\#define[[:blank:]]__DragonFly_version/ {print $$3}' < ${SRC_BASE}/sys/sys/param.h
 .else
-.undef	WITH_PKGNG
+DFLYVERSION!=	${SYSCTL} -n kern.osreldate
 .endif
 .endif
 
@@ -1214,7 +1221,7 @@ WARNING+=	"If you do not want to see thi
 
 # Enable new xorg for FreeBSD versions after Radeon KMS was imported unless
 # WITHOUT_NEW_XORG is set.
-.if ${OSVERSION} >= 1100000
+.if ${OPSYS} == FreeBSD && ${OSVERSION} >= 1100000
 . if !defined(WITHOUT_NEW_XORG)
 WITH_NEW_XORG?=	yes
 . else
@@ -1321,6 +1328,25 @@ MAKE_ENV+=	DONTSTRIP=yes
 
 .include "${PORTSDIR}/Mk/bsd.options.mk"
 
+# Multiple make jobs support
+.if defined(DISABLE_MAKE_JOBS) || defined(MAKE_JOBS_UNSAFE)
+_MAKE_JOBS=		#
+MAKE_JOBS_NUMBER=	1
+.else
+.if defined(MAKE_JOBS_NUMBER)
+_MAKE_JOBS_NUMBER:=	${MAKE_JOBS_NUMBER}
+.else
+_MAKE_JOBS_NUMBER!=	${SYSCTL} -n hw.ncpu
+.endif
+.if defined(MAKE_JOBS_NUMBER_LIMIT) && ( ${MAKE_JOBS_NUMBER_LIMIT} < ${_MAKE_JOBS_NUMBER} )
+MAKE_JOBS_NUMBER=	${MAKE_JOBS_NUMBER_LIMIT}
+.else
+MAKE_JOBS_NUMBER=	${_MAKE_JOBS_NUMBER}
+.endif
+_MAKE_JOBS?=		-j${MAKE_JOBS_NUMBER}
+BUILD_FAIL_MESSAGE+=	Try to set MAKE_JOBS_UNSAFE=yes and rebuild before reporting the failure to the maintainer.
+.endif
+
 # Start of pre-makefile section.
 .if !defined(AFTERPORTMK) && !defined(INOPTIONSMK)
 
@@ -1351,7 +1377,7 @@ PKGVERSION=	${PORTVERSION:C/[-_,]/./g}${
 PKGNAME=	${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PKGVERSION}
 DISTNAME?=	${PORTNAME}-${DISTVERSIONPREFIX}${DISTVERSION:C/:(.)/\1/g}${DISTVERSIONSUFFIX}
 
-INDEXFILE?=		INDEX-${OSVERSION:C/([0-9]*)[0-9]{5}/\1/}
+INDEXFILE?=		INDEX-${DFLYVERSION:C/([0-9]*)[0-9]{5}/\1/}
 
 DOCSDIR?=		${PREFIX}/share/doc/${PORTNAME}
 EXAMPLESDIR?=		${PREFIX}/share/examples/${PORTNAME}
@@ -1371,7 +1397,7 @@ ETCDIR?=		${PREFIX}/etc/${PORTNAME}
 .include "${PORTSDIR}/Mk/bsd.xorg.mk"
 .endif
 
-PACKAGES?=		${PORTSDIR}/packages
+PACKAGES?=		/usr/packages
 TEMPLATES?=		${PORTSDIR}/Templates
 
 PATCHDIR?=		${MASTERDIR}/files
@@ -1568,7 +1594,7 @@ DEV_ERROR+=	"${PKGNAME}: Makefile error:
 
 _POSTMKINCLUDED=	yes
 
-WRKDIR?=		${WRKDIRPREFIX}${.CURDIR}/work
+WRKDIR?=		${WRKDIRPREFIX}/${.CURDIR:H:T}/${.CURDIR:T}/work
 .if !defined(IGNORE_MASTER_SITE_GITHUB) && defined(USE_GITHUB)
 WRKSRC?=		${WRKDIR}/${GH_ACCOUNT}-${GH_PROJECT}-${GH_COMMIT}
 .endif
@@ -1598,7 +1624,9 @@ PLIST_REINPLACE_STOPDAEMON=s!^@stopdaemo
 
 # kludge to strip trailing whitespace from CFLAGS;
 # sub-configure will not # survive double space
-CFLAGS:=	${CFLAGS:C/ $//}
+# remove -O from /usr/share/mk/sys.mk and replace with -O2
+CFLAGS:=	${CFLAGS:C/ $//:N-O}
+CFLAGS+=	-O2
 
 .if defined(WITHOUT_CPU_CFLAGS)
 .if defined(_CPUCFLAGS)
@@ -1714,6 +1742,11 @@ EXTRACT_DEPENDS+=	unmakeself:${PORTSDIR}
 
 .if defined(USE_GCC) || defined(USE_FORTRAN)
 .include "${PORTSDIR}/Mk/bsd.gcc.mk"
+.else
+.  if !defined(USE_GNUSTEP)
+CONFIGURE_ENV+= 	CCVER=gcc47
+MAKE_ENV+=		CCVER=gcc47
+.  endif
 .endif
 
 .if defined(USE_BINUTILS) && !defined(DISABLE_BINUTILS)
@@ -2075,25 +2108,6 @@ CXXFLAGS:=	${CXXFLAGS:N-std=*} -std=${US
 CXXFLAGS+=	${CXXFLAGS_${ARCH}}
 .endif
 
-# Multiple make jobs support
-.if defined(DISABLE_MAKE_JOBS) || defined(MAKE_JOBS_UNSAFE)
-_MAKE_JOBS=		#
-MAKE_JOBS_NUMBER=	1
-.else
-.if defined(MAKE_JOBS_NUMBER)
-_MAKE_JOBS_NUMBER:=	${MAKE_JOBS_NUMBER}
-.else
-_MAKE_JOBS_NUMBER!=	${SYSCTL} -n kern.smp.cpus
-.endif
-.if defined(MAKE_JOBS_NUMBER_LIMIT) && ( ${MAKE_JOBS_NUMBER_LIMIT} < ${_MAKE_JOBS_NUMBER} )
-MAKE_JOBS_NUMBER=	${MAKE_JOBS_NUMBER_LIMIT}
-.else
-MAKE_JOBS_NUMBER=	${_MAKE_JOBS_NUMBER}
-.endif
-_MAKE_JOBS?=		-j${MAKE_JOBS_NUMBER}
-BUILD_FAIL_MESSAGE+=	Try to set MAKE_JOBS_UNSAFE=yes and rebuild before reporting the failure to the maintainer.
-.endif
-
 # ccache support
 # Support NO_CCACHE for common setups, require WITH_CCACHE_BUILD, and
 # don't use if ccache already set in CC
@@ -2774,7 +2788,7 @@ LATEST_LINK?=		${PKGBASE}
 PKGLATESTFILE=		${PKGLATESTREPOSITORY}/${LATEST_LINK}${PKG_SUFX}
 
 CONFIGURE_SCRIPT?=	configure
-CONFIGURE_TARGET?=	${ARCH}-portbld-freebsd${OSREL}
+CONFIGURE_TARGET?=	${ARCH}-dports-dragonfly${OSREL}
 CONFIGURE_TARGET:=	${CONFIGURE_TARGET:S/--build=//}
 CONFIGURE_LOG?=		config.log
 
@@ -2812,6 +2826,8 @@ SET_LATE_CONFIGURE_ARGS= \
 SCRIPTS_ENV+=	CURDIR=${MASTERDIR} DISTDIR=${DISTDIR} \
 		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} \
 		  SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
+		  DFLY_PATCHDIR=${DFLY_PATCHDIR} \
+		  DFLY_FILESDIR=${DFLY_FILESDIR} \
 		  PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} LOCALBASE=${LOCALBASE}
 
 .if defined(BATCH)
@@ -2853,7 +2869,7 @@ __pmlinks!=	${ECHO_CMD} '${MLINKS:S/	/ /
 		else \
 			{ print "broken"; exit; } \
 	} \
-  }' | ${SED} -e 's \([^/ ][^ ]*\.\(.\)[^. ]*\) $${MAN\2PREFIX}/$$$$$$$${__lang}/man\2/\1${MANEXT}g' -e 's/ //g' -e 's/MANlPREFIX/MANLPREFIX/g' -e 's/MANnPREFIX/MANNPREFIX/g'
+  }' | ${SED} -e 's \([^/ ][^ ]*\.\(.\)[^. ]*\) $${MAN\2PREFIX}/___LANG___/man\2/\1${MANEXT}g' -e 's/ //g' -e 's/MANlPREFIX/MANLPREFIX/g' -e 's/MANnPREFIX/MANNPREFIX/g'
 .if ${__pmlinks:Mbroken} == "broken"
 check-makevars::
 	@${ECHO_MSG} "${PKGNAME}: Makefile error: unable to parse MLINKS."
@@ -2864,7 +2880,7 @@ _MLINKS=	${_MLINKS_PREPEND}
 .for lang in ${MANLANG:S%^%man/%:S%^man/""$%man%}
 .for ___pmlinks in ${__pmlinks}
 .for __lang in ${lang}
-_MLINKS+=	${___pmlinks:S// /g}
+_MLINKS+=	${___pmlinks:S// /g:S/___LANG___/${__lang}/}
 .endfor
 .endfor
 .endfor
@@ -2993,7 +3009,7 @@ _DESKTOPDIR_REL=
 
 # Check the machine architectures
 .if defined(ONLY_FOR_ARCHS)
-.for __ARCH in ${ONLY_FOR_ARCHS}
+.for __ARCH in ${ONLY_FOR_ARCHS:S/amd64/x86_64/}
 .if ${ARCH:M${__ARCH}} != ""
 __ARCH_OK?=		1
 .endif
@@ -3003,7 +3019,7 @@ __ARCH_OK?=		1
 .endif
 
 .if defined(NOT_FOR_ARCHS)
-.for __NARCH in ${NOT_FOR_ARCHS}
+.for __NARCH in ${NOT_FOR_ARCHS:S/amd64/x86_64/}
 .if ${ARCH:M${__NARCH}} != ""
 .undef __ARCH_OK
 .endif
@@ -3012,9 +3028,9 @@ __ARCH_OK?=		1
 
 .if !defined(__ARCH_OK)
 .if defined(ONLY_FOR_ARCHS)
-IGNORE=		is only for ${ONLY_FOR_ARCHS},
+IGNORE=		is only for ${ONLY_FOR_ARCHS:S/amd64/x86_64/},
 .else # defined(NOT_FOR_ARCHS)
-IGNORE=		does not run on ${NOT_FOR_ARCHS},
+IGNORE=		does not run on ${NOT_FOR_ARCHS:S/amd64/x86_64/},
 .endif
 IGNORE+=	while you are running ${ARCH}
 
@@ -3148,12 +3164,11 @@ all:
 	  DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} \
 	  PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
 	  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
+	  DFLY_PATCHDIR=${DFLY_PATCHDIR} DFLY_FILESDIR=${DFLY_FILESDIR} \
 	  BUILD_DEPENDS="${BUILD_DEPENDS}" RUN_DEPENDS="${RUN_DEPENDS}" \
 	  CONFLICTS="${CONFLICTS}" \
 	${ALL_HOOK}
-.endif
-
-.if !target(all)
+.else
 all: build
 .endif
 
@@ -3292,14 +3307,7 @@ check-vulnerable:
 .if !defined(DISABLE_VULNERABILITIES) && !defined(PACKAGE_BUILDING)
 	@if [ -f "${AUDITFILE}" ]; then \
 		if [ -n "${WITH_PKGNG}" ]; then \
-			if [ -x "${PKG_BIN}" ]; then \
-				vlist=`${PKG_BIN} audit "${PKGNAME}"`; \
-			elif [ "${PORTNAME}" = "pkg" ]; then \
-				vlist=""; \
-			else \
-				${ECHO_MSG} "===> Unable to check vuln database as pkg(8) is missing"; \
-				exit 1; \
-			fi; \
+			vlist=`${PKG_BIN} audit "${PKGNAME}"`; \
 		elif [ -x "${LOCALBASE}/sbin/portaudit" ]; then \
 			vlist=`${LOCALBASE}/sbin/portaudit -X 14 "${PKGNAME}" \
 				2>&1 | grep -vE '^[0-9]+ problem\(s\) found.' \
@@ -3545,7 +3553,7 @@ do-patch:
 	@set -e ;\
 	if [ -d ${PATCHDIR} ]; then \
 		if [ "`${ECHO_CMD} ${PATCHDIR}/patch-*`" != "${PATCHDIR}/patch-*" ]; then \
-			${ECHO_MSG} "===>  Applying ${OPSYS} patches for ${PKGNAME}" ; \
+			${ECHO_MSG} "===>  Applying ports patches for ${PKGNAME}" ; \
 			PATCHES_APPLIED="" ; \
 			for i in ${PATCHDIR}/patch-*; do \
 				case $$i in \
@@ -3570,6 +3578,33 @@ do-patch:
 			done; \
 		fi; \
 	fi
+	@set -e ; if [ -d ${DFLY_PATCHDIR} ]; then \
+		if [ "`${ECHO_CMD} ${DFLY_PATCHDIR}/patch-*`" != "${DFLY_PATCHDIR}/patch-*" ]; then \
+			${ECHO_MSG} "===>  Applying ${OPSYS} patches for ${PKGNAME}" ; \
+			PATCHES_APPLIED="" ; \
+			for i in ${DFLY_PATCHDIR}/patch-*; do \
+				case $$i in \
+					*.orig|*.rej|*~|*,v) \
+						${ECHO_MSG} "===>   Ignoring patchfile $$i" ; \
+						;; \
+					*) \
+						if [ ${PATCH_DEBUG_TMP} = yes ]; then \
+							${ECHO_MSG} "===>   Applying ${OPSYS} patch $$i" ; \
+						fi; \
+						if ${PATCH} ${PATCH_ARGS} < $$i ; then \
+							PATCHES_APPLIED="$$PATCHES_APPLIED $$i" ; \
+						else \
+							${ECHO_MSG} `${ECHO_CMD} "=> Patch $$i failed to apply cleanly." | ${SED} "s|${DFLY_PATCHDIR}/||"` ; \
+							if [ x"$$PATCHES_APPLIED" != x"" ]; then \
+								${ECHO_MSG} `${ECHO_CMD} "=> Patch(es) $$PATCHES_APPLIED applied cleanly." | ${SED} "s|${DFLY_PATCHDIR}/||g"` ; \
+							fi; \
+							${FALSE} ; \
+						fi; \
+						;; \
+				esac; \
+			done; \
+		fi; \
+	fi
 .endif
 
 .if !target(run-autotools-fixup)
@@ -4828,14 +4863,14 @@ _DEPEND_ALWAYS=	0
 
 _INSTALL_DEPENDS=	\
 		if [ -n "${USE_PACKAGE_DEPENDS}" -o -n "${USE_PACKAGE_DEPENDS_ONLY}" ]; then \
-			subpkgfile=`(cd $$dir; ${MAKE} $$depends_args -V PKGFILE)`; \
+			subpkgfile=`(cd $$dir; ${MAKE} $$depends_args -V '$${PKGFILE}')`; \
 			subpkgname=$${subpkgfile%-*} ; \
 			subpkgname=$${subpkgname\#\#*/} ; \
 			if [ -r "$${subpkgfile}" -a "$$target" = "${DEPENDS_TARGET}" ]; then \
 				${ECHO_MSG} "===>   Installing existing package $${subpkgfile}"; \
 				if [ -n "${WITH_PKGNG}" -a $${subpkgname} = "pkg" ]; then \
 					[ -d ${WRKDIR} ] || ${MKDIR} ${WRKDIR} ; \
-					${TAR} xf $${subpkgfile} -C ${WRKDIR} -s ",/.*/,,g" "*/pkg-static" ; \
+					${TAR} -xf $${subpkgfile} -C ${WRKDIR} -s ",/.*/,,g" "*/pkg-static" ; \
 					${WRKDIR}/pkg-static add $${subpkgfile}; \
 					${RM} -f ${WRKDIR}/pkg-static; \
 				else \
@@ -5049,7 +5084,7 @@ ALL-DEPENDS-LIST= \
 				continue;				\
 			fi;						\
 			${ECHO_CMD} $$d;				\
-			if ! children=$$(cd $$d && ${MAKE} -V _DEPEND_DIRS); then\
+			if ! children=$$(cd $$d && ${MAKE} -V '$${_DEPEND_DIRS}'); then\
 				${ECHO_MSG} "${PKGNAME}: \"$$d\" erroneous -- dependency list incomplete" >&2; \
 				continue;				\
 			fi;						\
@@ -5079,7 +5114,7 @@ CLEAN-DEPENDS-FULL= \
 				${ECHO_MSG} "${PKGNAME}: \"$$d\" non-existent -- dependency list incomplete" >&2; \
 				continue;				\
 			fi;						\
-			if ! children=$$(cd $$d && ${MAKE} -V WRKDIR -V _DEPEND_DIRS); then \
+			if ! children=$$(cd $$d && ${MAKE} -V '$${WRKDIR}' -V '$${_DEPEND_DIRS}'); then \
 				${ECHO_MSG} "${PKGNAME}: \"$$d\" erroneous -- dependency list incomplete" >&2; \
 				continue;				\
 			fi;						\
@@ -5118,7 +5153,7 @@ CLEAN-DEPENDS-LIMITED= \
 				${ECHO_MSG} "${PKGNAME}: \"$$d\" non-existent -- dependency list incomplete" >&2; \
 				continue;				\
 			fi;						\
-			if ! children=$$(cd $$d && ${MAKE} -V WRKDIR -V _DEPEND_DIRS); then \
+			if ! children=$$(cd $$d && ${MAKE} -V '$${WRKDIR}' -V '$${_DEPEND_DIRS}'); then \
 				${ECHO_MSG} "${PKGNAME}: \"$$d\" erroneous -- dependency list incomplete" >&2; \
 				continue;				\
 			fi;						\
@@ -5209,7 +5244,7 @@ FETCH_LIST?=	for i in $$deps; do \
 			else	\
 				continue;	\
 			fi;;	\
-		*) if [ -d ${PKG_DBDIR}/$$(cd $$dir; ${MAKE} -V PKGNAME) ]; then \
+		*) if [ -d ${PKG_DBDIR}/$$(cd $$dir; ${MAKE} -V '$${PKGNAME}') ]; then \
 				continue;	\
 			fi;;	\
 		esac;	\
@@ -5504,10 +5539,15 @@ _SUB_LIST_TEMP=	${SUB_LIST:S/$/!g/:S/^/
 apply-slist:
 .if defined(SUB_FILES)
 .for file in ${SUB_FILES}
-.if !exists(${FILESDIR}/${file}.in)
-	@${ECHO_MSG} "** Missing ${FILESDIR}/${file}.in for ${PKGNAME}."; exit 1
-.else
+.if exists(${FILESDIR}/${file}.in)
 	@${SED} ${_SUB_LIST_TEMP} -e '/^@comment /d' ${FILESDIR}/${file}.in > ${WRKDIR}/${file}
+.elif exists(${DFLY_FILESDIR}/${file}.in)
+	@${SED} ${_SUB_LIST_TEMP} -e '/^@comment /d' ${DFLY_FILESDIR}/${file}.in > ${WRKDIR}/${file}
+.else
+	@${ECHO_MSG} "** Checked ${FILESDIR}:"; \
+	@${ECHO_MSG} "** Checked ${DFLY_FILESDIR}:"; \
+	@${ECHO_MSG} "** Missing ${file}.in for ${PKGNAME}."; \
+	exit 1
 .endif
 .endfor
 .for i in pkg-message pkg-install pkg-deinstall pkg-req
@@ -5848,6 +5888,7 @@ tags:
 	OPSYS="${OPSYS:S/"/"'"'"/g:S/\$/\$\$/g:S/\\/\\\\/g}" \
 	OSREL="${OSREL:S/"/"'"'"/g:S/\$/\$\$/g:S/\\/\\\\/g}" \
 	OSVERSION="${OSVERSION:S/"/"'"'"/g:S/\$/\$\$/g:S/\\/\\\\/g}" \
+	DFLYVERSION="${DFLYVERSION:Q}" \
 	SYSTEMVERSION="${SYSTEMVERSION:S/"/"'"'"/g:S/\$/\$\$/g:S/\\/\\\\/g}"
 .endif
 
