--- bsd.port.mk.orig	2016-01-05 15:35:57 UTC
+++ bsd.port.mk
@@ -43,7 +43,8 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 #				  makefile is being used on.  Automatically set to
 #				  "FreeBSD," "NetBSD," or "OpenBSD" as appropriate.
 # OSREL			- The release version (numeric) of the operating system.
-# OSVERSION		- The value of __FreeBSD_version.
+# OSVERSION		- 9999999 - try to ignore FreeBSD version check
+# DFLYVERSION		- The value of __DragonFly_version.
 #
 # This is the beginning of the list of all variables that need to be
 # defined in a port, listed in order that they should be included
@@ -534,6 +535,12 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 #				  Default: ${MASTERDIR}/scripts
 # FILESDIR		- A directory containing any miscellaneous additional files.
 #				  Default: ${MASTERDIR}/files
+# DFLY_PATCHDIR=	- A directory containing additional patches required
+#				  to build port on DragonFly
+#				  Default: ${MASTERDIR}/dragonfly
+# DFLY_FILESDIR 	- A directory containing any miscellaneous files
+#				  needed to build port on DragonFly
+#				  Default: ${MASTERDIR}/dragonfly
 # PKGDIR		- A directory containing any package creation files.
 #				  Default: ${MASTERDIR}
 # SRC_BASE		- The root of the src tree.  (Some ports require this to get
@@ -1061,10 +1068,15 @@ FreeBSD_MAINTAINER=	portmgr@FreeBSD.org
 # These need to be absolute since we don't know how deep in the ports
 # tree we are and thus can't go relative.  They can, of course, be overridden
 # by individual Makefiles or local system make configuration.
-PORTSDIR?=		/usr/ports
+WITH_PKGNG?=		yes
+WITHOUT_FBSD10_FIX?=	yes
+DFLY_PATCHDIR?= 	${MASTERDIR}/dragonfly
+DFLY_FILESDIR?= 	${MASTERDIR}/dragonfly
+PORTSDIR?=		/usr/dports
 LOCALBASE?=		/usr/local
 LINUXBASE?=		/compat/linux
-DISTDIR?=		${PORTSDIR}/distfiles
+DISTDIR?=		/usr/distfiles
+WRKDIRPREFIX?=		/usr/obj/dports
 _DISTDIR?=		${DISTDIR}/${DIST_SUBDIR}
 INDEXDIR?=		${PORTSDIR}
 SRC_BASE?=		/usr/src
@@ -1132,48 +1144,40 @@ MAINTAINER?=	ports@FreeBSD.org
 
 # Get the architecture
 .if !defined(ARCH)
-ARCH!=	${UNAME} -p
+ARCH=	x86_64
 .endif
 _EXPORTED_VARS+=	ARCH
 
 # Get the operating system type
 .if !defined(OPSYS)
-OPSYS!=	${UNAME} -s
+OPSYS=	DragonFly
 .endif
 _EXPORTED_VARS+=	OPSYS
 
 .if !defined(_OSRELEASE)
+.   if defined(.MAKE.DF.OSREL)
+_OSRELEASE=	${.MAKE.DF.OSREL}-DPORTS
+.   else
 _OSRELEASE!=	${UNAME} -r
+.   endif
 .endif
 _EXPORTED_VARS+=	_OSRELEASE
 
-# Get the operating system revision
-OSREL?=	${_OSRELEASE:C/-.*//}
-_EXPORTED_VARS+=	OSREL
-
 # Get __FreeBSD_version
 .if !defined(OSVERSION)
-.if exists(/usr/include/sys/param.h)
-OSVERSION!=	${AWK} '/^\#define[[:blank:]]__FreeBSD_version/ {print $$3}' < /usr/include/sys/param.h
-.elif exists(${SRC_BASE}/sys/sys/param.h)
-OSVERSION!=	${AWK} '/^\#define[[:blank:]]__FreeBSD_version/ {print $$3}' < ${SRC_BASE}/sys/sys/param.h
-.else
-.error Unable to determine OS version.  Either define OSVERSION, install /usr/include/sys/param.h or define SRC_BASE.
-.endif
-.endif
-_EXPORTED_VARS+=	OSVERSION
-
-# Convert OSVERSION to major release number
-_OSVERSION_MAJOR=	${OSVERSION:C/([0-9]?[0-9])([0-9][0-9])[0-9]{3}/\1/}
-# Sanity checks for chroot/jail building.
-# Skip if OSVERSION specified on cmdline for testing. Only works for bmake.
-.if !defined(.MAKEOVERRIDES) || !${.MAKEOVERRIDES:MOSVERSION}
-.if ${_OSVERSION_MAJOR} != ${_OSRELEASE:R}
-.error UNAME_r (${_OSRELEASE}) and OSVERSION (${OSVERSION}) do not agree on major version number.
-.elif ${_OSVERSION_MAJOR} != ${OSREL:R}
-.error OSREL (${OSREL}) and OSVERSION (${OSVERSION}) do not agree on major version number.
+OSVERSION=	9999999
 .endif
+
+.if !defined(DFLYVERSION)
+. if defined(.MAKE.DF.OSREL)
+DFLYVERSION=	${.MAKE.DF.VERSION}
+OSREL=		${.MAKE.DF.OSREL}
+. else
+DFLYVERSION!=	${AWK} '/^\#define[[:blank:]]__DragonFly_version/ {print $$3}' < /usr/include/sys/param.h
+OSREL!=		${ECHO} ${DFLYVERSION} | ${AWK} '{a=int($$1/100000); b=int(($$1-(a*100000))/100); print a "." b}'
+. endif
 .endif
+_EXPORTED_VARS+=	OSVERSION DFLYVERSION OSREL
 
 # Only define tools here (for transition period with between pkg tools)
 .include "${PORTSDIR}/Mk/bsd.commands.mk"
@@ -1307,7 +1311,7 @@ _GITHUB_MUST_SET_DISTNAME=		yes
 DISTNAME?=	${PORTNAME}-${DISTVERSIONFULL}
 .endif
 
-INDEXFILE?=		INDEX-${OSVERSION:C/([0-9]*)[0-9]{5}/\1/}
+INDEXFILE?=		INDEX-${DFLYVERSION:C/([0-9]*)[0-9]{5}/\1/}
 
 DOCSDIR?=		${PREFIX}/share/doc/${PORTNAME}
 EXAMPLESDIR?=		${PREFIX}/share/examples/${PORTNAME}
@@ -1327,7 +1331,7 @@ ETCDIR?=		${PREFIX}/etc/${PORTNAME}
 .include "${PORTSDIR}/Mk/bsd.xorg.mk"
 .endif
 
-PACKAGES?=		${PORTSDIR}/packages
+PACKAGES?=		/usr/packages
 TEMPLATES?=		${PORTSDIR}/Templates
 KEYWORDS?=		${PORTSDIR}/Keywords
 
@@ -1541,7 +1545,7 @@ MAKE_ENV+=		NM=${NM} \
 CONFIGURE_ENV+=	PKG_CONFIG_SYSROOT_DIR="${X_SYSROOT}"
 .endif
 
-WRKDIR?=		${WRKDIRPREFIX}${.CURDIR}/work
+WRKDIR=			${WRKDIRPREFIX}/${.CURDIR:H:T}/${.CURDIR:T}
 .if !defined(IGNORE_MASTER_SITE_GITHUB) && defined(USE_GITHUB)
 WRKSRC?=		${WRKDIR}/${GH_PROJECT}-${GH_TAGNAME_EXTRACT}
 .endif
@@ -1585,7 +1589,9 @@ PLIST_SUB_SED?= ${PLIST_SUB:C/.*=.{1,${P
 
 # kludge to strip trailing whitespace from CFLAGS;
 # sub-configure will not # survive double space
-CFLAGS:=	${CFLAGS:C/ $//}
+# remove -O from /usr/share/mk/sys.mk and replace with -O2
+CFLAGS:=	${CFLAGS:C/ $//:N-O}
+CFLAGS+=	-O2
 
 .if defined(WITHOUT_CPU_CFLAGS)
 .if defined(_CPUCFLAGS)
@@ -1643,19 +1649,6 @@ PATCH_DEPENDS+=		${LOCALBASE}/bin/unzip:
 
 # Check the compatibility layer for amd64/ia64
 
-.if ${ARCH} == "amd64" || ${ARCH} =="ia64"
-.if exists(/usr/lib32)
-HAVE_COMPAT_IA32_LIBS?=  YES
-.endif
-.if !defined(HAVE_COMPAT_IA32_KERN)
-HAVE_COMPAT_IA32_KERN!= if ${SYSCTL} -n compat.ia32.maxvmem >/dev/null 2>&1; then echo YES; fi; echo
-.if empty(HAVE_COMPAT_IA32_KERN)
-.undef HAVE_COMPAT_IA32_KERN
-.endif
-.endif
-.endif
-_EXPORTED_VARS+=	HAVE_COMPAT_IA32_KERN
-
 .if defined(IA32_BINARY_PORT) && ${ARCH} != "i386"
 .if ${ARCH} == "amd64" || ${ARCH} == "ia64"
 .if !defined(HAVE_COMPAT_IA32_KERN)
@@ -1682,7 +1675,17 @@ PKG_DEPENDS+=	${LOCALBASE}/sbin/pkg:${PO
 .endif
 
 .if defined(USE_GCC)
-.include "${PORTSDIR}/Mk/bsd.gcc.mk"
+.include "${PORTSDIR}/Mk/bsd.df.gcc.mk"
+.else
+.  if !defined(USE_GNUSTEP)
+.    if ${DFLYVERSION} < 400105
+CONFIGURE_ENV+= 	CCVER=gcc47
+MAKE_ENV+=		CCVER=gcc47
+.    else
+CONFIGURE_ENV+= 	CCVER=gcc50
+MAKE_ENV+=		CCVER=gcc50
+.    endif
+.  endif
 .endif
 
 .if defined(USE_BINUTILS) && !defined(DISABLE_BINUTILS)
@@ -1943,6 +1946,27 @@ ${_f}_ARGS:=	${f:C/^[^\:]*(\:|\$)//:S/,/
 .include "${USESDIR}/${f:C/\:.*//}.mk"
 .endfor
 
+.undef (SELECTED_OPTIONS)
+.undef (DESELECTED_OPTIONS)
+.for opt in ${ALL_OPTIONS}
+.  if ${PORT_OPTIONS:M${opt}}
+SELECTED_OPTIONS:=	${opt} ${SELECTED_OPTIONS}
+.  else
+DESELECTED_OPTIONS:=	${opt} ${DESELECTED_OPTIONS}
+.  endif
+.endfor
+.for otype in MULTI GROUP SINGLE RADIO
+.  for m in ${OPTIONS_${otype}}
+.    for opt in ${OPTIONS_${otype}_${m}}
+.      if ${PORT_OPTIONS:M${opt}}
+SELECTED_OPTIONS:=	${opt} ${SELECTED_OPTIONS}
+.      else
+DESELECTED_OPTIONS:=	${opt} ${DESELECTED_OPTIONS}
+.      endif
+.    endfor
+.  endfor
+.endfor
+
 .if defined(USE_XORG)
 # Add explicit X options to avoid problems with false positives in configure
 .if defined(GNU_CONFIGURE)
@@ -1977,9 +2001,11 @@ DISTINFO_FILE?=		${MASTERDIR}/distinfo
 MAKE_FLAGS?=	-f
 MAKEFILE?=		Makefile
 MAKE_CMD?=		${BSDMAKE}
+PLIST_SUB:=		${PLIST_SUB:NPROFILE=*} PROFILE="@comment "
 MAKE_ENV+=		PREFIX=${PREFIX} \
 			LOCALBASE=${LOCALBASE} \
 			LIBDIR="${LIBDIR}" \
+			NOPROFILE=1 \
 			CC="${CC}" CFLAGS="${CFLAGS}" \
 			CPP="${CPP}" CPPFLAGS="${CPPFLAGS}" \
 			LDFLAGS="${LDFLAGS}" LIBS="${LIBS}" \
@@ -2016,7 +2042,7 @@ MAKE_JOBS_NUMBER=	1
 _MAKE_JOBS_NUMBER:=	${MAKE_JOBS_NUMBER}
 .else
 .if !defined(_SMP_CPUS)
-_SMP_CPUS!=		${SYSCTL} -n kern.smp.cpus
+_SMP_CPUS!=		${SYSCTL} -n hw.ncpu
 .endif
 _EXPORTED_VARS+=	_SMP_CPUS
 _MAKE_JOBS_NUMBER=	${_SMP_CPUS}
@@ -2089,9 +2115,37 @@ PATCH_DIST_ARGS+=	--suffix .orig
 TAR?=	/usr/bin/tar
 
 # EXTRACT_SUFX is defined in .pre.mk section
-EXTRACT_CMD?=	${TAR}
-EXTRACT_BEFORE_ARGS?=	-xf
-EXTRACT_AFTER_ARGS?=	--no-same-owner --no-same-permissions
+
+LHA_BEFORE_ARGS?=	xfpw=${WRKDIR}
+LHA_AFTER_ARGS?=
+
+TAR_AFTER_ARGS_DEFAULT=	--no-same-owner --no-same-permissions
+TAR_BEFORE_ARGS_DEFAULT= -xf
+
+.if !defined(TAR_BEFORE_ARGS)
+.  if defined(EXTRACT_BEFORE_ARGS)
+TAR_BEFORE_ARGS=	${EXTRACT_BEFORE_ARGS}
+.  else
+TAR_BEFORE_ARGS=	${TAR_BEFORE_ARGS_DEFAULT}
+.  endif
+.endif
+
+# ZIP_* variables are always defined by zip.mk, so ?= only kicks in USES+=zip
+# when does not exist.  In this case, assume $TAR is desired for zip archives
+ZIP_BEFORE_ARGS?=	${TAR_BEFORE_ARGS_DEFAULT}
+ZIP_AFTER_ARGS?=	${TAR_AFTER_ARGS_DEFAULT}
+ZIP_EXTRACT_CMD?=	${TAR}
+
+.if !defined(TAR_AFTER_ARGS)
+.  if defined(EXTRACT_AFTER_ARGS)
+TAR_AFTER_ARGS=		${EXTRACT_AFTER_ARGS}
+.  else
+TAR_AFTER_ARGS=		${TAR_AFTER_ARGS_DEFAULT}
+.  endif
+.endif
+
+EXTRACT_BEFORE_ARGS?=	${TAR_BEFORE_ARGS_DEFAULT}
+EXTRACT_AFTER_ARGS?=	${TAR_AFTER_ARGS_DEFAULT}
 
 # Figure out where the local mtree file is
 .if !defined(MTREE_FILE) && !defined(NO_MTREE)
@@ -2604,7 +2658,7 @@ CONFIGURE_FAIL_MESSAGE?=	"Please report
 .if defined(GNU_CONFIGURE)
 # Maximum command line length
 .if !defined(CONFIGURE_MAX_CMD_LEN)
-CONFIGURE_MAX_CMD_LEN!=	${SYSCTL} -n kern.argmax
+CONFIGURE_MAX_CMD_LEN=	262144
 .endif
 _EXPORTED_VARS+=	CONFIGURE_MAX_CMD_LEN
 GNU_CONFIGURE_PREFIX?=	${PREFIX}
@@ -2640,6 +2694,8 @@ SET_LATE_CONFIGURE_ARGS= \
 SCRIPTS_ENV+=	CURDIR=${MASTERDIR} DISTDIR=${DISTDIR} \
 		  WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} PATCHDIR=${PATCHDIR} \
 		  SCRIPTDIR=${SCRIPTDIR} FILESDIR=${FILESDIR} \
+		  DFLY_PATCHDIR=${DFLY_PATCHDIR} \
+		  DFLY_FILESDIR=${DFLY_FILESDIR} \
 		  PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} LOCALBASE=${LOCALBASE}
 
 .if defined(BATCH)
@@ -2722,7 +2778,7 @@ DESKTOPDIR?=		${PREFIX}/share/applicatio
 
 # Check the machine architectures
 .if defined(ONLY_FOR_ARCHS)
-.for __ARCH in ${ONLY_FOR_ARCHS}
+.for __ARCH in ${ONLY_FOR_ARCHS:S/amd64/x86_64/}
 .if ${ARCH:M${__ARCH}} != ""
 __ARCH_OK?=		1
 .endif
@@ -2732,7 +2788,7 @@ __ARCH_OK?=		1
 .endif
 
 .if defined(NOT_FOR_ARCHS)
-.for __NARCH in ${NOT_FOR_ARCHS}
+.for __NARCH in ${NOT_FOR_ARCHS:S/amd64/x86_64/}
 .if ${ARCH:M${__NARCH}} != ""
 .undef __ARCH_OK
 .endif
@@ -2741,9 +2797,9 @@ __ARCH_OK?=		1
 
 .if !defined(__ARCH_OK)
 .if defined(ONLY_FOR_ARCHS)
-IGNORE=		is only for ${ONLY_FOR_ARCHS},
+IGNORE=		is only for ${ONLY_FOR_ARCHS:S/amd64/x86_64/},
 .else # defined(NOT_FOR_ARCHS)
-IGNORE=		does not run on ${NOT_FOR_ARCHS},
+IGNORE=		does not run on ${NOT_FOR_ARCHS:S/amd64/x86_64/},
 .endif
 IGNORE+=	while you are running ${ARCH}
 
@@ -2889,6 +2945,7 @@ all:
 	  DISTDIR=${DISTDIR} WRKDIR=${WRKDIR} WRKSRC=${WRKSRC} \
 	  PATCHDIR=${PATCHDIR} SCRIPTDIR=${SCRIPTDIR} \
 	  FILESDIR=${FILESDIR} PORTSDIR=${PORTSDIR} PREFIX=${PREFIX} \
+	  DFLY_PATCHDIR=${DFLY_PATCHDIR} DFLY_FILESDIR=${DFLY_FILESDIR} \
 	  BUILD_DEPENDS="${BUILD_DEPENDS}" RUN_DEPENDS="${RUN_DEPENDS}" \
 	  CONFLICTS="${CONFLICTS}" \
 	${ALL_HOOK}
@@ -3223,9 +3280,26 @@ clean-wrkdir:
 .if !target(do-extract)
 do-extract:
 	@for file in ${EXTRACT_ONLY}; do \
-		if ! (cd ${EXTRACT_WRKDIR} && ${EXTRACT_CMD} ${EXTRACT_BEFORE_ARGS} ${_DISTDIR}/$$file ${EXTRACT_AFTER_ARGS});\
-		then \
-			exit 1; \
+		if [ -n "${EXTRACT_CMD}" -a -z "${_INCLUDE_USES_ZIP_MK}" -a -z "${_INCLUDE_USES_LHA_MK}" ]; then \
+			if ! (cd ${EXTRACT_WRKDIR} && ${EXTRACT_CMD} ${EXTRACT_BEFORE_ARGS} ${_DISTDIR}/$$file ${EXTRACT_AFTER_ARGS});\
+			then \
+				exit 1; \
+			fi; \
+		else \
+			case $${file} in \
+			*.tar|*.tbz|*.tgz|*.txz|*.tar.bz2|*.tar.gz|*.tar.lzma|*.tar.xz|*.tar.Z) \
+				if ! (cd ${EXTRACT_WRKDIR} && ${TAR} ${TAR_BEFORE_ARGS} ${_DISTDIR}/$$file ${TAR_AFTER_ARGS}); \
+				then exit 1; fi; ;; \
+			*.lzh) \
+				if ! (cd ${EXTRACT_WRKDIR} && ${LHA_CMD} ${LHA_BEFORE_ARGS} ${_DISTDIR}/$$file ${LHA_AFTER_ARGS}); \
+				then exit 1; fi; ;; \
+			*.zip|*.ZIP|*.xpi) \
+				if ! (cd ${EXTRACT_WRKDIR} && ${ZIP_EXTRACT_CMD} ${ZIP_BEFORE_ARGS} ${_DISTDIR}/$$file ${ZIP_AFTER_ARGS}); \
+				then exit 1; fi; ;; \
+			*) \
+				if ! (cd ${EXTRACT_WRKDIR} && ${TAR} ${EXTRACT_BEFORE_ARGS} ${_DISTDIR}/$$file ${EXTRA_AFTER_ARGS}); \
+				then exit 1; fi; ;; \
+			esac ; \
 		fi; \
 	done
 	@if [ ${UID} = 0 ]; then \
@@ -3280,7 +3354,7 @@ do-patch:
 	@set -e ;\
 	if [ -d ${PATCHDIR} ]; then \
 		if [ "`${ECHO_CMD} ${PATCHDIR}/patch-*`" != "${PATCHDIR}/patch-*" ]; then \
-			${ECHO_MSG} "===>  Applying ${OPSYS} patches for ${PKGNAME}" ; \
+			${ECHO_MSG} "===>  Applying ports patches for ${PKGNAME}" ; \
 			PATCHES_APPLIED="" ; \
 			for i in ${PATCHDIR}/patch-*; do \
 				case $$i in \
@@ -3305,6 +3379,33 @@ do-patch:
 			done; \
 		fi; \
 	fi
+	@set -e ; if [ -d ${DFLY_PATCHDIR} ]; then \
+		if [ "`${ECHO_CMD} ${DFLY_PATCHDIR}/patch-*`" != "${DFLY_PATCHDIR}/patch-*" ]; then \
+			${ECHO_MSG} "===>  Applying ${OPSYS} patches for ${PKGNAME}" ; \
+			PATCHES_APPLIED="" ; \
+			for i in ${DFLY_PATCHDIR}/patch-*; do \
+				case $$i in \
+					*.orig|*.rej|*~|*,v) \
+						${ECHO_MSG} "===>   Ignoring patchfile $$i" ; \
+						;; \
+					*) \
+						if [ ${PATCH_DEBUG_TMP} = yes ]; then \
+							${ECHO_MSG} "===>   Applying ${OPSYS} patch $$i" ; \
+						fi; \
+						if ${PATCH} ${PATCH_ARGS} < $$i ; then \
+							PATCHES_APPLIED="$$PATCHES_APPLIED $$i" ; \
+						else \
+							${ECHO_MSG} `${ECHO_CMD} "=> Patch $$i failed to apply cleanly." | ${SED} "s|${DFLY_PATCHDIR}/||"` ; \
+							if [ x"$$PATCHES_APPLIED" != x"" ]; then \
+								${ECHO_MSG} `${ECHO_CMD} "=> Patch(es) $$PATCHES_APPLIED applied cleanly." | ${SED} "s|${DFLY_PATCHDIR}/||g"` ; \
+							fi; \
+							${FALSE} ; \
+						fi; \
+						;; \
+				esac; \
+			done; \
+		fi; \
+	fi
 .endif
 
 .if !target(run-autotools-fixup)
@@ -3930,6 +4031,7 @@ do-clean:
 	@if [ -d ${WRKDIR} ]; then \
 		if [ -w ${WRKDIR} ]; then \
 			${RM} -rf ${WRKDIR}; \
+			${FIND} ${WRKDIR:H} -type d -maxdepth 1 -empty -delete; \
 		else \
 			${ECHO_MSG} "===>   ${WRKDIR} not writable, skipping"; \
 		fi; \
@@ -4454,7 +4556,7 @@ FETCH_LIST?=	for i in $$deps; do \
 			else	\
 				continue;	\
 			fi;;	\
-		*) if [ -d ${PKG_DBDIR}/$$(cd $$dir; ${MAKE} -V PKGNAME) ]; then \
+		*) if [ -d ${PKG_DBDIR}/$$(cd $$dir; ${MAKE} -V '$${PKGNAME}') ]; then \
 				continue;	\
 			fi;;	\
 		esac;	\
@@ -4809,10 +4911,15 @@ _SUB_LIST_TEMP=	${SUB_LIST:S/$/!g/:S/^/
 apply-slist:
 .if defined(SUB_FILES)
 .for file in ${SUB_FILES}
-.if !exists(${FILESDIR}/${file}.in)
-	@${ECHO_MSG} "** Missing ${FILESDIR}/${file}.in for ${PKGNAME}."; exit 1
-.else
+.if exists(${FILESDIR}/${file}.in)
 	@${SED} ${_SUB_LIST_TEMP} -e '/^@comment /d' ${FILESDIR}/${file}.in > ${WRKDIR}/${file}
+.elif exists(${DFLY_FILESDIR}/${file}.in)
+	@${SED} ${_SUB_LIST_TEMP} -e '/^@comment /d' ${DFLY_FILESDIR}/${file}.in > ${WRKDIR}/${file}
+.else
+	@${ECHO_MSG} "** Checked ${FILESDIR}:"; \
+	@${ECHO_MSG} "** Checked ${DFLY_FILESDIR}:"; \
+	@${ECHO_MSG} "** Missing ${file}.in for ${PKGNAME}."; \
+	exit 1
 .endif
 .endfor
 .for i in pkg-message pkg-install pkg-deinstall pkg-req
@@ -5674,6 +5781,7 @@ _PATCH_DEP=		extract
 _PATCH_SEQ=		050:ask-license 100:patch-message 150:patch-depends \
 				300:pre-patch 450:pre-patch-script 500:do-patch \
 				700:post-patch 850:post-patch-script \
+				880:dfly-patch \
 				${_OPTIONS_patch} ${_USES_patch}
 _CONFIGURE_DEP=	patch
 _CONFIGURE_SEQ=	150:build-depends 151:lib-depends 200:configure-message \
