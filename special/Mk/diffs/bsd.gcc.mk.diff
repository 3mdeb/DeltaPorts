--- bsd.gcc.mk.orig	2014-01-10 02:33:50.673414000 +0000
+++ bsd.gcc.mk
@@ -31,7 +31,7 @@
 # If your port needs a Fortran compiler, please specify that with the
 # USE_FORTRAN= knob.  Here is the list of options for that knob:
 #
-#   USE_FORTRAN=	yes		# use gfortran46 (lang/gcc46)
+#   USE_FORTRAN=	yes		# use gfortran47 (lang/gcc-aux)
 #   USE_FORTRAN=	ifort	# use the Intel compiler (lang/ifc)
 #
 # Due to object file incompatiblity between Fortran compilers, we strongly
@@ -47,26 +47,28 @@ GCC_Include_MAINTAINER=		gerald@FreeBSD.
 
 # All GCC versions supported by the ports framework.  Keep them in
 # ascending order and in sync with the table below. 
-GCCVERSIONS=	040200 040400 040600 040700 040800 040900
+GCCVERSIONS=	040400 040600 040700 040800 040900
 
-# The first field if the OSVERSION in which it appeared in the base.
-# The second field is the OSVERSION in which it disappeared from the base.
+# The first field if the DFLYVERSION in which it appeared in the base.
+# The second field is the DFLYVERSION in which it disappeared from the base.
 # The third field is the version as USE_GCC would use.
-GCCVERSION_040200=	700042 9999999 4.2
-GCCVERSION_040400=	     0       0 4.4
+# This doesn't work so well with DragonFly due to dual compilers
+# DPorts wasn't supported until DragonFly 3.3.
+GCCVERSION_040400=	300200  300400 4.4
 GCCVERSION_040600=	     0       0 4.6
-GCCVERSION_040700=	     0       0 4.7
+GCCVERSION_040700=	300400 9999999 4.7
 GCCVERSION_040800=	     0       0 4.8
 GCCVERSION_040900=	     0       0 4.9
 
-GCC_DEFAULT_VERSION=	4.6
+GCC_DEFAULT_VERSION=	4.7
+DFLY_DEFAULT_VERSION=	47
 GCC_DEFAULT_V=	${GCC_DEFAULT_VERSION:S/.//}
 
 # No configurable parts below this. ####################################
 #
 
 .if defined(USE_GCC) && ${USE_GCC} == yes
-USE_GCC=	${GCC_DEFAULT_VERSION}+
+USE_GCC=	${GCC_DEFAULT_VERSION}
 .endif
 
 # Extract the fields from GCCVERSION_...
@@ -90,9 +92,16 @@ _GCCVERSION_${v}_V=	${j}
 
 # The default case, with a current lang/gcc port.
 . if ${USE_FORTRAN} == yes
-_USE_GCC:=	${GCC_DEFAULT_VERSION}
-FC:=	gfortran${GCC_DEFAULT_V}
-F77:=	gfortran${GCC_DEFAULT_V}
+BUILD_DEPENDS+= ${LOCALBASE}/gcc-aux/bin/gfortran:${PORTSDIR}/lang/gcc-aux
+RUN_DEPENDS+=	${LOCALBASE}/gcc-aux/bin/gfortran:${PORTSDIR}/lang/gcc-aux
+_USE_GCC:=	${GCC_DEFAULT_VERSION}  # dummy to avoid further depends
+_GCC_RUNTIME:=	${LOCALBASE}/gcc-aux/lib
+FC:=		${LOCALBASE}/gcc-aux/bin/gfortran
+F77:=		${LOCALBASE}/gcc-aux/bin/gfortran
+CC:=		${LOCALBASE}/gcc-aux/bin/gcc
+CXX:=		${LOCALBASE}/gcc-aux/bin/g++
+CPP:=		${LOCALBASE}/gcc-aux/bin/cpp
+LDFLAGS+=	-L${LOCALBASE}/gcc-aux/lib -Wl,-rpath,${LOCALBASE}/gcc-aux/lib
 
 # Intel Fortran compiler from lang/ifc.
 . elif ${USE_FORTRAN} == ifort
@@ -112,12 +121,12 @@ MAKE_ENV+=		F77="${F77}" FC="${FC}" FFLA
 
 .if defined(USE_GCC) && !defined(FORCE_BASE_CC_FOR_TESTING)
 
-. if ${USE_GCC} == any
+. if empty(USE_GCC) || ${USE_GCC} == any || ${USE_GCC:tl} == "yes"
 
 # Enable the clang-is-cc workaround.  Default to the last GCC imported
 # into base.
-_USE_GCC:=	4.2
-_GCC_ORLATER:=	true
+_USE_GCC:=	${GCC_DEFAULT_VERSION}
+_GCC_ORLATER:=	false
 
 . else # ${USE_GCC} == any
 
@@ -131,13 +140,14 @@ _GCC_ORLATER:=	true
 
 # Initialize _GCC_FOUND${v}.  In parallel, check if USE_GCC points to a
 # valid version to begin with.
+# Set USE_GCC=3.4(4.2, 4.4, 4.6) all to base compiler (4.7)
 .for v in ${GCCVERSIONS}
-. if exists(${LOCALBASE}/bin/gcc${_GCCVERSION_${v}_V:S/.//})
-_GCC_FOUND${v}=	port
-. elif ${OSVERSION} >= ${_GCCVERSION_${v}_L} && ${OSVERSION} < ${_GCCVERSION_${v}_R}
-.  if exists(/usr/bin/gcc)
+. if ${DFLYVERSION} >= ${_GCCVERSION_${v}_L} \
+  && ${DFLYVERSION} <  ${_GCCVERSION_${v}_R} \
+  && ${DFLY_DEFAULT_VERSION} <= ${_GCCVERSION_${v}_V:S/.//}
 _GCC_FOUND${v}=	base
-.  endif
+. elif exists(${LOCALBASE}/bin/gcc${_GCCVERSION_${v}_V:S/.//})
+_GCC_FOUND${v}=	port
 . endif
 . if ${_USE_GCC}==${_GCCVERSION_${v}_V}
 _GCCVERSION_OKAY=	true
@@ -187,7 +197,7 @@ _USE_GCC:=	${GCC_DEFAULT_VERSION}
 # dependencies, CC, CXX, CPP, and flags.
 .for v in ${GCCVERSIONS}
 . if ${_USE_GCC} == ${_GCCVERSION_${v}_V}
-.  if ${OSVERSION} < ${_GCCVERSION_${v}_L} || ${OSVERSION} > ${_GCCVERSION_${v}_R} || !exists(/usr/bin/gcc)
+.  if ${DFLYVERSION} < ${_GCCVERSION_${v}_L} || ${DFLYVERSION} > ${_GCCVERSION_${v}_R}
 V:=			${_GCCVERSION_${v}_V:S/.//}
 _GCC_PORT_DEPENDS:=	gcc${V}
 .   if ${_USE_GCC} == ${GCC_DEFAULT_VERSION}
@@ -213,11 +223,9 @@ _GCC_BUILD_DEPENDS:=	${_GCC_PORT_DEPENDS
 .  else # Use GCC in base.
 CC:=			gcc
 CXX:=			g++
-.   if exists(/usr/bin/gcpp)
-CPP:=			gcpp
-.   else
 CPP:=			cpp
-.   endif
+CONFIGURE_ENV+=		CCVER=gcc${DFLY_DEFAULT_VERSION}
+MAKE_ENV+=		CCVER=gcc${DFLY_DEFAULT_VERSION}
 .  endif # Use GCC in base.
 . endif # ${_USE_GCC} == ${_GCCVERSION_${v}_V}
 .endfor
@@ -226,9 +234,11 @@ CPP:=			cpp
 .if defined(_GCC_PORT_DEPENDS)
 BUILD_DEPENDS+=	${_GCC_PORT_DEPENDS}:${PORTSDIR}/lang/${_GCC_PORT}
 RUN_DEPENDS+=	${_GCC_PORT_DEPENDS}:${PORTSDIR}/lang/${_GCC_PORT}
+.  if ${_USE_GCC:S/.//} > ${GCC_DEFAULT_VERSION}
 # Later GCC ports already depend on binutils; make sure whatever we
 # build leverages this as well.
 USE_BINUTILS=	yes
+.  endif
 .endif
 .endif # defined(_USE_GCC) && !defined(FORCE_BASE_CC_FOR_TESTING)
 
@@ -258,6 +268,8 @@ test-gcc:
 	@echo CC=${CC} - CXX=${CXX} - CPP=${CPP} - CFLAGS=\"${CFLAGS}\"
 	@echo F77=${F77} - FC=${FC} - FFLAGS=\"${FFLAGS}\"
 	@echo LDFLAGS=\"${LDFLAGS}\"
+	@echo CONFIGURE_ENV=${CONFIGURE_ENV}
+	@echo MAKE_ENV=${MAKE_ENV}
 	@echo "BUILD_DEPENDS=${BUILD_DEPENDS}"
 	@echo "RUN_DEPENDS=${RUN_DEPENDS}"
 .endif
