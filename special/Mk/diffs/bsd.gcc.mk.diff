--- bsd.gcc.mk.orig	2015-01-31 21:29:44 UTC
+++ bsd.gcc.mk
@@ -40,18 +40,20 @@ GCCVERSIONS=	040200 040600 040700 040800
 # The first field if the OSVERSION in which it appeared in the base.
 # The second field is the OSVERSION in which it disappeared from the base.
 # The third field is the version as USE_GCC would use.
-GCCVERSION_040200=	700042 9999999 4.2
+GCCVERSION_040200=	     0       0 4.2
 GCCVERSION_040600=	     0       0 4.6
-GCCVERSION_040700=	     0       0 4.7
+GCCVERSION_040700=	300400 9999999 4.7
 GCCVERSION_040800=	     0       0 4.8
 GCCVERSION_040900=	     0       0 4.9
 GCCVERSION_050000=	     0       0 5
 
+DFLY_DEFAULT_VERSION=	47
+
 # No configurable parts below this. ####################################
 #
 
 .if defined(USE_GCC) && ${USE_GCC} == yes
-USE_GCC=	${GCC_DEFAULT}+
+USE_GCC=	${GCC_DEFAULT}
 .endif
 
 # Extract the fields from GCCVERSION_...
@@ -69,12 +71,12 @@ _GCCVERSION_${v}_V=	${j}
 
 .if defined(USE_GCC) && !defined(FORCE_BASE_CC_FOR_TESTING)
 
-. if ${USE_GCC} == any
+. if empty(USE_GCC) || ${USE_GCC} == any || ${USE_GCC:tl} == "yes"
 
 # Enable the clang-is-cc workaround.  Default to the last GCC imported
 # into base.
-_USE_GCC:=	4.2
-_GCC_ORLATER:=	true
+_USE_GCC:=	${GCC_DEFAULT}
+_GCC_ORLATER:=	false
 
 . else # ${USE_GCC} == any
 
@@ -88,13 +90,14 @@ _GCC_ORLATER:=	true
 
 # Initialize _GCC_FOUND${v}.  In parallel, check if USE_GCC points to a
 # valid version to begin with.
+# Set USE_GCC=3.4(4.2, 4.4, 4.6) all to base compiler (4.7)
 .for v in ${GCCVERSIONS}
-. if exists(${LOCALBASE}/bin/gcc${_GCCVERSION_${v}_V:S/.//})
-_GCC_FOUND${v}=	port
-. elif ${OSVERSION} >= ${_GCCVERSION_${v}_L} && ${OSVERSION} < ${_GCCVERSION_${v}_R}
-.  if exists(/usr/bin/gcc)
+. if ${DFLYVERSION} >= ${_GCCVERSION_${v}_L} \
+  && ${DFLYVERSION} <  ${_GCCVERSION_${v}_R} \
+  && ${DFLY_DEFAULT_VERSION} <= ${_GCCVERSION_${v}_V:S/.//}
 _GCC_FOUND${v}=	base
-.  endif
+. elif exists(${LOCALBASE}/bin/gcc${_GCCVERSION_${v}_V:S/.//})
+_GCC_FOUND${v}=	port
 . endif
 . if ${_USE_GCC}==${_GCCVERSION_${v}_V}
 _GCCVERSION_OKAY=	true
@@ -144,7 +147,7 @@ _USE_GCC:=	${GCC_DEFAULT}
 # dependencies, CC, CXX, CPP, and flags.
 .for v in ${GCCVERSIONS}
 . if ${_USE_GCC} == ${_GCCVERSION_${v}_V}
-.  if ${OSVERSION} < ${_GCCVERSION_${v}_L} || ${OSVERSION} > ${_GCCVERSION_${v}_R} || !exists(/usr/bin/gcc)
+.  if ${DFLYVERSION} < ${_GCCVERSION_${v}_L} || ${DFLYVERSION} > ${_GCCVERSION_${v}_R}
 V:=			${_GCCVERSION_${v}_V:S/.//}
 _GCC_PORT_DEPENDS:=	gcc${V}
 .   if ${_USE_GCC} == ${LANG_GCC_IS}
@@ -162,11 +165,9 @@ LDFLAGS+=		-Wl,-rpath=${_GCC_RUNTIME} -L
 .  else # Use GCC in base.
 CC:=			gcc
 CXX:=			g++
-.   if exists(/usr/bin/gcpp)
-CPP:=			gcpp
-.   else
 CPP:=			cpp
-.   endif
+CONFIGURE_ENV+=		CCVER=gcc${DFLY_DEFAULT_VERSION}
+MAKE_ENV+=		CCVER=gcc${DFLY_DEFAULT_VERSION}
 .  endif # Use GCC in base.
 . endif # ${_USE_GCC} == ${_GCCVERSION_${v}_V}
 .endfor
@@ -175,9 +176,11 @@ CPP:=			cpp
 .if defined(_GCC_PORT_DEPENDS)
 BUILD_DEPENDS+=	${_GCC_PORT_DEPENDS}:${PORTSDIR}/lang/${_GCC_PORT}
 RUN_DEPENDS+=	${_GCC_PORT_DEPENDS}:${PORTSDIR}/lang/${_GCC_PORT}
+.  if ${_USE_GCC:S/.//} > ${GCC_DEFAULT}
 # Later GCC ports already depend on binutils; make sure whatever we
 # build leverages this as well.
 USE_BINUTILS=	yes
+.  endif
 .endif
 .endif # defined(_USE_GCC) && !defined(FORCE_BASE_CC_FOR_TESTING)
 
@@ -205,6 +208,8 @@ test-gcc:
 .endif
 	@echo CC=${CC} - CXX=${CXX} - CPP=${CPP} - CFLAGS=\"${CFLAGS}\"
 	@echo LDFLAGS=\"${LDFLAGS}\"
+	@echo CONFIGURE_ENV=${CONFIGURE_ENV}
+	@echo MAKE_ENV=${MAKE_ENV}
 	@echo "BUILD_DEPENDS=${BUILD_DEPENDS}"
 	@echo "RUN_DEPENDS=${RUN_DEPENDS}"
 .endif
